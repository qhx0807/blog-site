<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>手机端1px边框</title>
    <url>/2017/04/05/1px%E8%BE%B9%E6%A1%86/</url>
    <content><![CDATA[<p>在多数移动端上css中的1px并不等于设备的1px。不同的手机有不同的像素密度。Window.devicePixelRatio。</p>
<p><code>@media only screen and (-webkit-min-device-pixel-ratio:1){}</code><br><code>@media only screen and (-webkit-min-device-pixel-ratio:2){}</code><br><code>@media only screen and (-webkit-min-device-pixel-ratio:2.5){}</code><br><code>@media only screen and (-webkit-min-device-pixel-ratio:3){}</code></p>
<ol>
<li>背景渐变：设置1px渐变背景，0.5可见，0.5透明。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.background-gradient-1px</span> &#123;</span><br><span class="line"><span class="attribute">background</span>:</span><br><span class="line"><span class="built_in">linear-gradient</span>(<span class="number">180deg</span>, black, black <span class="number">50%</span>, transparent <span class="number">50%</span>) top    left  / <span class="number">100%</span> <span class="number">1px</span> no-repeat,</span><br><span class="line"><span class="built_in">linear-gradient</span>(<span class="number">90deg</span>,  black, black <span class="number">50%</span>, transparent <span class="number">50%</span>) top    right / <span class="number">1px</span> <span class="number">100%</span> no-repeat,</span><br><span class="line"><span class="built_in">linear-gradient</span>(<span class="number">0</span>,      black, black <span class="number">50%</span>, transparent <span class="number">50%</span>) bottom right / <span class="number">100%</span> <span class="number">1px</span> no-repeat,</span><br><span class="line"><span class="built_in">linear-gradient</span>(-<span class="number">90deg</span>, black, black <span class="number">50%</span>, transparent <span class="number">50%</span>) bottom left  / <span class="number">1px</span> <span class="number">100%</span> no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*简写*/</span></span><br><span class="line"><span class="selector-class">.background-gradient-1px</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">-webkit-gradient</span>(linear, left top, left bottom, color-stop(.<span class="number">5</span>, transparent), <span class="built_in">color-stop</span>(.<span class="number">5</span>, #c8c7cc), <span class="built_in">to</span>(#c8c7cc)) left bottom repeat-x;</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>用box-shadow阴影实现。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-shadow-1px</span> &#123;</span><br><span class="line">	<span class="attribute">box-shadow</span>: inset <span class="number">0px</span> -<span class="number">1px</span> <span class="number">1px</span> -<span class="number">1px</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>伪类 + transform 实现。<br>一条边框<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.scale-1px</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">border</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scale-1px</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line"><span class="attribute">-webkit-transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span><br><span class="line"><span class="attribute">-webkit-transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
四条边框，可设置border-radius<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.scale-1px</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">border</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scale-1px</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">-webkit-box-sizing</span>: border-box;</span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200%</span>;</span><br><span class="line"><span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line"><span class="attribute">-webkit-transform-origin</span>: left top;</span><br><span class="line"><span class="attribute">transform-origin</span>: left top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>html5</tag>
      </tags>
  </entry>
  <entry>
    <title>AMD、CMD、CommonJs、ES6模块规范</title>
    <url>/2019/10/11/AMD%E3%80%81CMD%E3%80%81CommonJs%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h4 id="AMD规范"><a href="#AMD规范" class="headerlink" title="AMD规范"></a>AMD规范</h4><p><code>AMD</code> 即Asynchronous Module Definition，中文名是异步模块定义的意思。它是一个在浏览器端模块化开发的规范。</p>
<p>由于不是JavaScript原生支持，使用AMD规范进行页面开发需要用到对应的库函数，也就是大名鼎鼎 <code>RequireJS</code> ，实际上AMD 是 <code>RequireJS</code> 在推广过程中对模块定义的规范化的产出。</p>
<p>requireJS主要解决两个问题：</p>
<ol>
<li>多个js文件可能有依赖关系，被依赖的文件需要早于依赖它的文件加载到浏览器。</li>
<li>js加载的时候浏览器会停止页面渲染，加载文件越多，页面失去响应时间越长。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义模块 myModule.js</span></span><br><span class="line">define([<span class="string">'dependency'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'Byron'</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">printName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    printName: printName</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载模块</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'myModule'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">my</span>)</span>&#123;</span><br><span class="line">　 my.printName()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="CMD规范"><a href="#CMD规范" class="headerlink" title="CMD规范"></a>CMD规范</h4><p><code>CMD</code> 即Common Module Definition通用模块定义，CMD规范是国内发展出来的，就像AMD有个 <code>requireJS</code> ，CMD有个浏览器的实现 <code>SeaJS</code> ，SeaJS要解决的问题和 <code>requireJS</code> 一样，只不过在模块定义方式和模块加载（可以说运行、解析）时机上有所不同。</p>
<p><code>Sea.js</code> 推崇一个模块一个文件，遵循统一的写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define(id?, deps?, factory)</span><br></pre></td></tr></table></figure>
<ul>
<li>一个文件一个模块，所以经常就用文件名作为模块id</li>
<li>CMD推崇依赖就近，所以一般不在define的参数中写依赖，在factory中写</li>
</ul>
<p>factory是一个函数，有三个参数，function(require, exports, module)</p>
<ul>
<li>require 是一个方法，接受 模块标识 作为唯一参数，用来获取其他模块提供的接口：require(id)</li>
<li>exports 是一个对象，用来向外提供模块接口</li>
<li>module 是一个对象，上面存储了与当前模块相关联的一些属性和方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义模块  myModule.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery.js'</span>)</span><br><span class="line">  $(<span class="string">'div'</span>).addClass(<span class="string">'active'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载模块</span></span><br><span class="line">seajs.use([<span class="string">'myModule.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">my</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>AMD与CMD区别:</p>
<ol>
<li>AMD推崇依赖前置，在定义模块的时候就要声明其依赖的模块</li>
<li>CMD推崇就近依赖，只有在用到某个模块的时候再去require</li>
</ol>
<h4 id="ES6模块化"><a href="#ES6模块化" class="headerlink" title="ES6模块化"></a>ES6模块化</h4><p><a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener">阮一峰 - Module 的语法</a></p>
<p>在ES6之前，社区指定了一些模块加载方案，最主要的是CMD和AMD这两种，ES6在语言标准上实现了模块功能，而且实现得相当简单，完全可以取代CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; stat, exists, readFile &#125; <span class="keyword">from</span> <span class="string">'fs'</span></span><br></pre></td></tr></table></figure>
<p>上面代码的实质是从<code>fs</code>模块加载3个方法，其他方法不加载。这种加载称为“编译时加载”或者静态加载，即ES6可以在编译时就完成模块加载，效率要比 <code>CommonJS</code> 模块的加载方式高。</p>
<h4 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h4><p>node.js的模块系统，就是参照CommonJS规范实现的</p>
<p><a href="http://javascript.ruanyifeng.com/nodejs/module.html" target="_blank" rel="noopener">CommonJS规范-阮一峰</a></p>
<p>CommonJS规范规定，每个模块内部，module变量代表当前模块。这个变量是一个对象，它的exports属性（即module.exports）是对外的接口。加载某个模块，其实是加载该模块的module.exports属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> addX = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value + x</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports.x = x</span><br><span class="line"><span class="built_in">module</span>.exports.addX = addX</span><br></pre></td></tr></table></figure>

<p>上面代码通过 <code>module.exports</code> 输出变量x和函数addX。<br><code>require</code> 方法用于加载模块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> example = <span class="built_in">require</span>(<span class="string">'./example.js'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(example.x) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(example.addX(<span class="number">1</span>)) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>

<p>CommonJS模块的特点如下:</p>
<ul>
<li>CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作</li>
<li>所有代码都运行在模块作用域，不会污染全局作用域。</li>
<li>模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。</li>
<li>模块加载的顺序，按照其在代码中出现的顺序。</li>
</ul>
<h4 id="兼容多种模块规范-UMD"><a href="#兼容多种模块规范-UMD" class="headerlink" title="兼容多种模块规范 UMD"></a>兼容多种模块规范 UMD</h4><p>UMD 叫做通用模块定义规范（Universal Module Definition）。也是随着大前端的趋势所诞生，它可以通过运行时或者编译时让同一个代码模块在使用 CommonJs、CMD 甚至是 AMD 的项目中运行。未来同一个 JavaScript 包运行在浏览器端、服务区端甚至是 APP 端都只需要遵守同一个写法就行了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">name, definition</span>) </span>&#123; <span class="comment">// 检测上文环境是否为AMDCMD </span></span><br><span class="line">  <span class="keyword">var</span> hasDefine = <span class="keyword">typeof</span> define === <span class="string">'function'</span>, <span class="comment">// 检查上文环境是否为Node </span></span><br><span class="line">      hasExports = <span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">module</span>.exports</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasDefine) &#123; <span class="comment">// AMD环境CMD环境    </span></span><br><span class="line">    define(definition)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasExports) &#123;</span><br><span class="line">    <span class="comment">// 定义为通Node模块     </span></span><br><span class="line">    <span class="built_in">module</span>.exports = definition()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 将模块的执行结在window量中在器中thiswindow对象    </span></span><br><span class="line">    <span class="keyword">this</span>[name] = definition()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="string">'hello'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> hello</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript事件循环机制 EventLoop</title>
    <url>/2019/05/03/EventLoop/</url>
    <content><![CDATA[<blockquote>
<p>所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</p>
</blockquote>
<p>异步执行的运行机制如:</p>
<ol>
<li>所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。</li>
<li>主线程之外，还存在一个”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。</li>
<li>一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</li>
<li>主线程不断重复上面的第三步。<a id="more"></a>

</li>
</ol>
<h4 id="浏览器-Event-Loop"><a href="#浏览器-Event-Loop" class="headerlink" title="浏览器 Event Loop"></a>浏览器 Event Loop</h4><p><img data-src="http://www.ruanyifeng.com/blogimg/asset/2014/bg2014100802.png" alt="事件循环（Event Loop）"></p>
<p>不同的异步任务被分为两类：微任务（micro task）和宏任务（macro task）</p>
<p>以下事件属于宏任务：</p>
<ol>
<li>setInterval()</li>
<li>setTimeout()</li>
</ol>
<p>以下事件属于微任务:</p>
<ol>
<li>new Promise()</li>
<li>new MutaionObserver() <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver" target="_blank" rel="noopener">mdn</a></li>
</ol>
<p><strong>同一次事件循环中，微任务永远在宏任务之前执行。</strong></p>
<p><strong>在执行微队列microtask queue中任务的时候，如果又产生了microtask，那么会继续添加到队列的末尾，也会在这个周期执行，直到microtask queue为空停止。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  resolve(<span class="number">3</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 打印结果： 2 3 1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>) <span class="comment">// 注意，这里是同步执行的 <span class="doctag">TODO:</span> promise</span></span><br><span class="line">  resolve(<span class="number">5</span>)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">6</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// 打印结果： 1 4 7 5 2 3 6</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)                        <span class="comment">// 同步执行 1</span></span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)                      <span class="comment">// 宏任务 7</span></span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)                    <span class="comment">// 8</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)                      <span class="comment">// 同步执行 2</span></span><br><span class="line">  resolve(<span class="number">5</span>)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val)                    <span class="comment">// 微任务 4</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">6</span>)                    <span class="comment">// 微任务 5</span></span><br><span class="line">  &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">7</span>)                    <span class="comment">// 微任务 6</span></span><br><span class="line">    </span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">8</span>)                  <span class="comment">// 10</span></span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">9</span>)                      <span class="comment">// 9</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span>)                       <span class="comment">// 同步执行 3</span></span><br><span class="line"><span class="comment">// 打印结果：1 4 10 5 6 7 2 3 9 8</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>EventLoop</tag>
      </tags>
  </entry>
  <entry>
    <title>promise</title>
    <url>/2018/09/12/ES6%20Promise%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fun = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(data)</span><br><span class="line">    <span class="keyword">if</span> (success) &#123;</span><br><span class="line">      resolve(data) <span class="comment">// success resolve</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      reject(error) <span class="comment">// error  reject</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="keyword">await</span> fun()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>Axios 源码阅读解析</title>
    <url>/2019/06/21/Axios%20%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p>
</blockquote>
<p>Axios 的主要特性包括：</p>
<ul>
<li>从浏览器中创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">XMLHttpRequest</a></li>
<li>从 node.js 创建 <a href="https://nodejs.org/api/http.html" target="_blank" rel="noopener">http</a> 请求</li>
<li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a> Api</li>
<li>拦截请求和响应</li>
<li>转换请求数据和响应数据</li>
<li>取消请求</li>
<li>自动转换 JSON 数据</li>
<li>客户端支持防御 <a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery" target="_blank" rel="noopener">XSRF</a></li>
</ul>
<p><code>/lib</code> 下目录结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── &#x2F;adapters&#x2F;</span><br><span class="line">│  ├── http.js</span><br><span class="line">│  ├── README.md</span><br><span class="line">│  └── xhr.js</span><br><span class="line">├── axios.js</span><br><span class="line">├── &#x2F;cancel&#x2F;</span><br><span class="line">│  ├── Cancel.js</span><br><span class="line">│  ├── CancelToken.js</span><br><span class="line">│  └── isCancel.js</span><br><span class="line">├── &#x2F;core&#x2F;</span><br><span class="line">│  ├── Axios.js</span><br><span class="line">│  ├── createError.js</span><br><span class="line">│  ├── dispatchRequest.js</span><br><span class="line">│  ├── enhanceError.js</span><br><span class="line">│  ├── InterceptorManager.js</span><br><span class="line">│  ├── mergeConfig.js</span><br><span class="line">│  ├── README.md</span><br><span class="line">│  ├── settle.js</span><br><span class="line">│  └── transformData.js</span><br><span class="line">├── defaults.js</span><br><span class="line">├── &#x2F;helpers&#x2F;</span><br><span class="line">│  ├── bind.js</span><br><span class="line">│  ├── buildURL.js</span><br><span class="line">│  ├── combineURLs.js</span><br><span class="line">│  ├── cookies.js</span><br><span class="line">│  ├── deprecatedMethod.js</span><br><span class="line">│  ├── isAbsoluteURL.js</span><br><span class="line">│  ├── isURLSameOrigin.js</span><br><span class="line">│  ├── normalizeHeaderName.js</span><br><span class="line">│  ├── parseHeaders.js</span><br><span class="line">│  ├── README.md</span><br><span class="line">│  └── spread.js</span><br><span class="line">└── utils.js</span><br></pre></td></tr></table></figure>
<h4 id="工具方法"><a href="#工具方法" class="headerlink" title="工具方法"></a>工具方法</h4><p>先看 <code>/lib/utils.js</code> 工具方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  isArray: isArray,</span><br><span class="line">  isArrayBuffer: isArrayBuffer,</span><br><span class="line">  isBuffer: isBuffer,</span><br><span class="line">  isFormData: isFormData,</span><br><span class="line">  isArrayBufferView: isArrayBufferView,</span><br><span class="line">  isString: isString,</span><br><span class="line">  isNumber: isNumber,</span><br><span class="line">  isObject: isObject,</span><br><span class="line">  isUndefined: isUndefined,</span><br><span class="line">  isDate: isDate,</span><br><span class="line">  isFile: isFile,</span><br><span class="line">  isBlob: isBlob,</span><br><span class="line">  isFunction: isFunction,</span><br><span class="line">  isStream: isStream,</span><br><span class="line">  isURLSearchParams: isURLSearchParams,</span><br><span class="line">  isStandardBrowserEnv: isStandardBrowserEnv,</span><br><span class="line">  forEach: forEach,</span><br><span class="line">  merge: merge,</span><br><span class="line">  deepMerge: deepMerge,</span><br><span class="line">  extend: extend,</span><br><span class="line">  trim: trim</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>is 开头的方法都是判断是否为XX类型，重点看后面几个函数：</p>
<ul>
<li><code>forEach</code> 遍历数组或对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>obj &#123;Object|Array&#125; </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>fn &#123;Function&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach</span>(<span class="params">obj, fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判读obj是否为空</span></span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj === <span class="string">'undefined'</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果第一个参数不是对象类型，则转换为[obj]数组</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) obj = [obj]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isArray(obj)) &#123;</span><br><span class="line">    <span class="comment">// 数组: 循环遍历 fn(item, index, arr)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = obj.length; i &lt; l; i++) &#123;</span><br><span class="line">      fn.call(<span class="literal">null</span>, obj[i], i, obj)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 对象: 循环对象 fn(value, key, obj)</span></span><br><span class="line">    <span class="comment">// Iterate over object keys</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, key)) &#123;</span><br><span class="line">        fn.call(<span class="literal">null</span>, obj[key], key, obj);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>merge</code> 合并对象 类似 <code>Object.assign()</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>要合并的对象</span></span><br><span class="line"><span class="comment">* <span class="doctag">@returns <span class="type">&#123;Object&#125;</span> </span>返回合并后的结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = &#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">assignValue</span>(<span class="params">val, key</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 递归合并子对象</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> result[key] === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">'object'</span>) &#123;</span><br><span class="line">      result[key] = merge(result[key], val)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result[key] = val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 循环 arguments, 调用 assignValue</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="comment">// assignValue 的参数将会是 forEach 中的 value, key</span></span><br><span class="line">    forEach(<span class="built_in">arguments</span>[i], assignValue)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>deepMerge</code> 深度合并</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepMerge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = &#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">assignValue</span>(<span class="params">val, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> result[key] === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">'object'</span>) &#123;</span><br><span class="line">      result[key] = deepMerge(result[key], val)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">'object'</span>) &#123;</span><br><span class="line">      result[key] = deepMerge(&#123;&#125;, val)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result[key] = val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">    forEach(<span class="built_in">arguments</span>[i], assignValue)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>extend(a, b, thisArg)</code> 将 b 里面的属性和方法继承给 a , 并且将 b 里面的方法的执行上个下文都绑定到 thisArg</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">a, b, thisArg</span>) </span>&#123;</span><br><span class="line">  forEach(b, <span class="function"><span class="keyword">function</span> <span class="title">assignValue</span>(<span class="params">val, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (thisArg &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果val是函数</span></span><br><span class="line">      a[key] = bind(val, thisArg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      a[key] = val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>bind</code> 方法是在 <code>/helpers/bind.js</code>, 给 fn 指定 this, 返回一个函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">fn, thisArg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">wrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 好像直接传类数组也行，apply() 的第二个参数支持类数组</span></span><br><span class="line">    <span class="keyword">var</span> args = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">arguments</span>.length)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">      args[i] = <span class="built_in">arguments</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn.apply(thisArg, args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="再回过头来看-lib-axios-js"><a href="#再回过头来看-lib-axios-js" class="headerlink" title="再回过头来看 /lib/axios.js"></a>再回过头来看 <code>/lib/axios.js</code></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入工具函数</span></span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">var</span> bind = <span class="built_in">require</span>(<span class="string">'./helpers/bind'</span>)</span><br><span class="line"><span class="keyword">var</span> Axios = <span class="built_in">require</span>(<span class="string">'./core/Axios'</span>)</span><br><span class="line"><span class="keyword">var</span> mergeConfig = <span class="built_in">require</span>(<span class="string">'./core/mergeConfig'</span>)</span><br><span class="line"><span class="keyword">var</span> defaults = <span class="built_in">require</span>(<span class="string">'./defaults'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建 Axios 实例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>defaultConfig 默认配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Axios&#125;</span>  </span>返回Axios实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createInstance</span>(<span class="params">defaultConfig</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 实例化 Axios '/core/Axios.js'</span></span><br><span class="line">  <span class="keyword">var</span> context = <span class="keyword">new</span> Axios(defaultConfig)</span><br><span class="line">  <span class="comment">// 将 Axios.prototype.request 的执行上下文绑定到 context</span></span><br><span class="line">  <span class="keyword">var</span> instance = bind(Axios.prototype.request, context)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将 Axios.prototype 上的所有方法的执行上下文绑定到 context , 并且继承给 instance</span></span><br><span class="line">  utils.extend(instance, Axios.prototype, context)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将 context 继承给 instance</span></span><br><span class="line">  utils.extend(instance, context)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建默认的 instance</span></span><br><span class="line"><span class="keyword">var</span> axios = createInstance(defaults);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在axios上暴露 Axios</span></span><br><span class="line">axios.Axios = Axios;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Factory for creating new instances</span></span><br><span class="line">axios.create = <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">instanceConfig</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createInstance(mergeConfig(axios.defaults, instanceConfig));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Expose Cancel &amp; CancelToken</span></span><br><span class="line">axios.Cancel = <span class="built_in">require</span>(<span class="string">'./cancel/Cancel'</span>);</span><br><span class="line">axios.CancelToken = <span class="built_in">require</span>(<span class="string">'./cancel/CancelToken'</span>);</span><br><span class="line">axios.isCancel = <span class="built_in">require</span>(<span class="string">'./cancel/isCancel'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Expose all/spread</span></span><br><span class="line">axios.all = <span class="function"><span class="keyword">function</span> <span class="title">all</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all(promises);</span><br><span class="line">&#125;;</span><br><span class="line">axios.spread = <span class="built_in">require</span>(<span class="string">'./helpers/spread'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = axios</span><br></pre></td></tr></table></figure>

<h4 id="lib-Axios-js"><a href="#lib-Axios-js" class="headerlink" title="/lib/Axios.js"></a><code>/lib/Axios.js</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 工具函数</span></span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">'./../utils'</span>)</span><br><span class="line"><span class="comment">// buildURL(url, params) 返回一个带序列化参数的url</span></span><br><span class="line"><span class="keyword">var</span> buildURL = <span class="built_in">require</span>(<span class="string">'../helpers/buildURL'</span>)</span><br><span class="line"><span class="comment">// 拦截器相关</span></span><br><span class="line"><span class="keyword">var</span> InterceptorManager = <span class="built_in">require</span>(<span class="string">'./InterceptorManager'</span>)</span><br><span class="line"><span class="comment">// adapter 创建请求，返回promise</span></span><br><span class="line"><span class="keyword">var</span> dispatchRequest = <span class="built_in">require</span>(<span class="string">'./dispatchRequest'</span>)</span><br><span class="line"><span class="comment">// 合并config</span></span><br><span class="line"><span class="keyword">var</span> mergeConfig = <span class="built_in">require</span>(<span class="string">'./mergeConfig'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Axios</span>(<span class="params">instanceConfig</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.defaults = instanceConfig</span><br><span class="line">  <span class="comment">// 拦截器</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 添加请求拦截器</span></span><br><span class="line"><span class="comment">   * axios.interceptors.request.use(function (config) &#123;</span></span><br><span class="line"><span class="comment">   *   // 在发送请求之前做些什么</span></span><br><span class="line"><span class="comment">   *   return config</span></span><br><span class="line"><span class="comment">   *&#125;, function (error) &#123;</span></span><br><span class="line"><span class="comment">   *  // 对请求错误做些什么</span></span><br><span class="line"><span class="comment">   *  return Promise.reject(error)</span></span><br><span class="line"><span class="comment">   *&#125;);</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">this</span>.interceptors = &#123;</span><br><span class="line">    <span class="comment">// 请求拦截器</span></span><br><span class="line">    request: <span class="keyword">new</span> InterceptorManager(),</span><br><span class="line">    <span class="comment">// 响应拦截器</span></span><br><span class="line">    response: <span class="keyword">new</span> InterceptorManager()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Axios.prototype.request = <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Allow for axios('example/url'[, config]) a la fetch API</span></span><br><span class="line">  <span class="comment">// 这样就可以使用 axios('/api/userinfo', &#123;id: 1&#125;) 这种方式</span></span><br><span class="line">  <span class="comment">// arguments[1] 为第二个参数 config</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> config === <span class="string">'string'</span>) &#123;</span><br><span class="line">    config = <span class="built_in">arguments</span>[<span class="number">1</span>] || &#123;&#125;</span><br><span class="line">    config.url = <span class="built_in">arguments</span>[<span class="number">0</span>]</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    config = config || &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  config = mergeConfig(<span class="keyword">this</span>.defaults, config)</span><br><span class="line">  <span class="comment">// method 默认为 'get'</span></span><br><span class="line">  config.method = config.method ? config.method.toLowerCase() : <span class="string">'get'</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拦截器中间件 数组</span></span><br><span class="line">  <span class="keyword">var</span> chain = [dispatchRequest, <span class="literal">undefined</span>]</span><br><span class="line">  <span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve(config)</span><br><span class="line">  <span class="comment">//将请求方法插入 chain 数组的前面 unshift(成功的, 失败的)</span></span><br><span class="line">  <span class="keyword">this</span>.interceptors.request.forEach(<span class="function"><span class="keyword">function</span> <span class="title">unshiftRequestInterceptors</span>(<span class="params">interceptor</span>) </span>&#123;</span><br><span class="line">    chain.unshift(interceptor.fulfilled, interceptor.rejected)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 将请求方法插入 chain 数组的后面 push(成功的, 失败的)</span></span><br><span class="line">  <span class="keyword">this</span>.interceptors.response.forEach(<span class="function"><span class="keyword">function</span> <span class="title">pushResponseInterceptors</span>(<span class="params">interceptor</span>) </span>&#123;</span><br><span class="line">    chain.push(interceptor.fulfilled, interceptor.rejected)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 加了请求拦截器和相应拦截器 chain</span></span><br><span class="line">  <span class="comment">// chain = [ 请求拦截器的成功方法, 请求拦截器的失败方法, dispatchRequest, undefined, 响应拦截器的成功方法, 响应拦截器的失败方法 ]。</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 shift 方法把第一个元素从其中删除，并返回第一个元素</span></span><br><span class="line">  <span class="keyword">while</span> (chain.length) &#123;</span><br><span class="line">    promise = promise.then(chain.shift(), chain.shift())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 意思就是将 chainn 内的方法两两拿出来执行 成如下这样</span></span><br><span class="line">  <span class="comment">//  promise.then(请求拦截器的成功方法, 请求拦截器的失败方法)</span></span><br><span class="line">  <span class="comment">//         .then(dispatchRequest, undefined)</span></span><br><span class="line">  <span class="comment">//         .then(响应拦截器的成功方法, 响应拦截器的失败方法)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Axios.prototype.getUri = <span class="function"><span class="keyword">function</span> <span class="title">getUri</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 合并配置</span></span><br><span class="line">  config = mergeConfig(<span class="keyword">this</span>.defaults, config)</span><br><span class="line">  <span class="comment">// 返回 url</span></span><br><span class="line">  <span class="keyword">return</span> buildURL(config.url, config.params, config.paramsSerializer).replace(<span class="regexp">/^\?/</span>, <span class="string">''</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Provide aliases for supported request methods</span></span><br><span class="line"><span class="comment">// 给 Axios.prototype 上面增加 delete,get,head,options 方法</span></span><br><span class="line"><span class="comment">// 我们就可以用 axios.get(...), axios.delete(...) 等方法</span></span><br><span class="line">utils.forEach([<span class="string">'delete'</span>, <span class="string">'get'</span>, <span class="string">'head'</span>, <span class="string">'options'</span>], <span class="function"><span class="keyword">function</span> <span class="title">forEachMethodNoData</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line">  Axios.prototype[method] = <span class="function"><span class="keyword">function</span>(<span class="params">url, config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.request(utils.merge(config || &#123;&#125;, &#123;</span><br><span class="line">      method: method,</span><br><span class="line">      url: url</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// post put patch 要传data</span></span><br><span class="line">utils.forEach([<span class="string">'post'</span>, <span class="string">'put'</span>, <span class="string">'patch'</span>], <span class="function"><span class="keyword">function</span> <span class="title">forEachMethodWithData</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line">  Axios.prototype[method] = <span class="function"><span class="keyword">function</span>(<span class="params">url, data, config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.request(utils.merge(config || &#123;&#125;, &#123;</span><br><span class="line">      method: method,</span><br><span class="line">      url: url,</span><br><span class="line">      data: data</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Axios</span><br></pre></td></tr></table></figure>

<h4 id="拦截器-lib-core-InterceptorManager-js"><a href="#拦截器-lib-core-InterceptorManager-js" class="headerlink" title="拦截器 /lib/core/InterceptorManager.js"></a>拦截器 <code>/lib/core/InterceptorManager.js</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">'./../utils'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">InterceptorManager</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 存放方法的数组</span></span><br><span class="line">  <span class="keyword">this</span>.handlers = []</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加拦截方法</span></span><br><span class="line">InterceptorManager.prototype.use = <span class="function"><span class="keyword">function</span> <span class="title">use</span>(<span class="params">fulfilled, rejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.handlers.push(&#123;</span><br><span class="line">    fulfilled: fulfilled,</span><br><span class="line">    rejected: rejected</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.handlers.length - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 移除拦截方法</span></span><br><span class="line"><span class="comment">// id 是上面use方法返回的</span></span><br><span class="line">InterceptorManager.prototype.eject = <span class="function"><span class="keyword">function</span> <span class="title">eject</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.handlers[id]) &#123;</span><br><span class="line">    <span class="keyword">this</span>.handlers[id] = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// this.interceptors.response.forEach()</span></span><br><span class="line">InterceptorManager.prototype.forEach = <span class="function"><span class="keyword">function</span> <span class="title">forEach</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  utils.forEach(<span class="keyword">this</span>.handlers, <span class="function"><span class="keyword">function</span> <span class="title">forEachHandler</span>(<span class="params">h</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (h !== <span class="literal">null</span>) &#123;</span><br><span class="line">      fn(h)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = InterceptorManager</span><br></pre></td></tr></table></figure>

<h4 id="lib-core-dispatchRequest-js-调用请求"><a href="#lib-core-dispatchRequest-js-调用请求" class="headerlink" title="/lib/core/dispatchRequest.js 调用请求"></a><code>/lib/core/dispatchRequest.js</code> 调用请求</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">'./../utils'</span>)</span><br><span class="line"><span class="keyword">var</span> transformData = <span class="built_in">require</span>(<span class="string">'./transformData'</span>)</span><br><span class="line"><span class="keyword">var</span> isCancel = <span class="built_in">require</span>(<span class="string">'../cancel/isCancel'</span>)</span><br><span class="line"><span class="keyword">var</span> defaults = <span class="built_in">require</span>(<span class="string">'../defaults'</span>)</span><br><span class="line"><span class="keyword">var</span> isAbsoluteURL = <span class="built_in">require</span>(<span class="string">'./../helpers/isAbsoluteURL'</span>)</span><br><span class="line"><span class="keyword">var</span> combineURLs = <span class="built_in">require</span>(<span class="string">'./../helpers/combineURLs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 promise</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">dispatchRequest</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果不是绝对地址 则前面加上baseUrl</span></span><br><span class="line">  <span class="keyword">if</span> (config.baseURL &amp;&amp; !isAbsoluteURL(config.url)) &#123;</span><br><span class="line">    config.url = combineURLs(config.baseURL, config.url);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// headers 默认 &#123;&#125;</span></span><br><span class="line">  config.headers = config.headers || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转换请求数据</span></span><br><span class="line">  config.data = transformData(</span><br><span class="line">    config.data,</span><br><span class="line">    config.headers,</span><br><span class="line">    config.transformRequest</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 合并配置</span></span><br><span class="line">  config.headers = utils.merge(</span><br><span class="line">    config.headers.common || &#123;&#125;,</span><br><span class="line">    config.headers[config.method] || &#123;&#125;,</span><br><span class="line">    config.headers || &#123;&#125;</span><br><span class="line">  )</span><br><span class="line">  utils.forEach(</span><br><span class="line">    [<span class="string">'delete'</span>, <span class="string">'get'</span>, <span class="string">'head'</span>, <span class="string">'post'</span>, <span class="string">'put'</span>, <span class="string">'patch'</span>, <span class="string">'common'</span>],</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cleanHeaderConfig</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">delete</span> config.headers[method]</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// 请求</span></span><br><span class="line">  <span class="keyword">var</span> adapter = config.adapter || defaults.adapter</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> adapter(config).then(<span class="function"><span class="keyword">function</span> <span class="title">onAdapterResolution</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    throwIfCancellationRequested(config)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对返回的数据处理 再返回给用户</span></span><br><span class="line">    response.data = transformData(</span><br><span class="line">      response.data,</span><br><span class="line">      response.headers,</span><br><span class="line">      config.transformResponse</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> <span class="title">onAdapterRejection</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isCancel(reason)) &#123;</span><br><span class="line">      throwIfCancellationRequested(config)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Transform response data</span></span><br><span class="line">      <span class="keyword">if</span> (reason &amp;&amp; reason.response) &#123;</span><br><span class="line">        reason.response.data = transformData(</span><br><span class="line">          reason.response.data,</span><br><span class="line">          reason.response.headers,</span><br><span class="line">          config.transformResponse</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(reason)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="lib-defaults-js-createInstance-defaults-传入的默认配置"><a href="#lib-defaults-js-createInstance-defaults-传入的默认配置" class="headerlink" title="/lib/defaults.js createInstance(defaults)传入的默认配置"></a><code>/lib/defaults.js</code> createInstance(defaults)传入的默认配置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">var</span> normalizeHeaderName = <span class="built_in">require</span>(<span class="string">'./helpers/normalizeHeaderName'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认的 Content-Type</span></span><br><span class="line"><span class="keyword">var</span> DEFAULT_CONTENT_TYPE = &#123;</span><br><span class="line">  <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setContentTypeIfUnset</span>(<span class="params">headers, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!utils.isUndefined(headers) &amp;&amp; utils.isUndefined(headers[<span class="string">'Content-Type'</span>])) &#123;</span><br><span class="line">    headers[<span class="string">'Content-Type'</span>] = value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDefaultAdapter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> adapter;</span><br><span class="line">  <span class="comment">// node 环境下 根据 process 判断是否为node环境 调用 './adapters/http.js'</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> process !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">Object</span>.prototype.toString.call(process) === <span class="string">'[object process]'</span>) &#123;</span><br><span class="line">    adapter = <span class="built_in">require</span>(<span class="string">'./adapters/http'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="comment">// 浏览器环境下 调用 '././adapters/xhr.js'</span></span><br><span class="line">    adapter = <span class="built_in">require</span>(<span class="string">'./adapters/xhr'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> adapter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整个默认配置</span></span><br><span class="line"><span class="keyword">var</span> defaults = &#123;</span><br><span class="line">  adapter: getDefaultAdapter(),</span><br><span class="line"></span><br><span class="line">  transformRequest: [<span class="function"><span class="keyword">function</span> <span class="title">transformRequest</span>(<span class="params">data, headers</span>) </span>&#123;</span><br><span class="line">    normalizeHeaderName(headers, <span class="string">'Accept'</span>);</span><br><span class="line">    normalizeHeaderName(headers, <span class="string">'Content-Type'</span>);</span><br><span class="line">    <span class="keyword">if</span> (utils.isFormData(data) ||</span><br><span class="line">      utils.isArrayBuffer(data) ||</span><br><span class="line">      utils.isBuffer(data) ||</span><br><span class="line">      utils.isStream(data) ||</span><br><span class="line">      utils.isFile(data) ||</span><br><span class="line">      utils.isBlob(data)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (utils.isArrayBufferView(data)) &#123;</span><br><span class="line">      <span class="keyword">return</span> data.buffer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (utils.isURLSearchParams(data)) &#123;</span><br><span class="line">      setContentTypeIfUnset(headers, <span class="string">'application/x-www-form-urlencoded;charset=utf-8'</span>);</span><br><span class="line">      <span class="keyword">return</span> data.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (utils.isObject(data)) &#123;</span><br><span class="line">      setContentTypeIfUnset(headers, <span class="string">'application/json;charset=utf-8'</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  transformResponse: [<span class="function"><span class="keyword">function</span> <span class="title">transformResponse</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">'string'</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        data = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123; <span class="comment">/* Ignore */</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 超时时间</span></span><br><span class="line">  timeout: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">  xsrfCookieName: <span class="string">'XSRF-TOKEN'</span>,</span><br><span class="line">  xsrfHeaderName: <span class="string">'X-XSRF-TOKEN'</span>,</span><br><span class="line"></span><br><span class="line">  maxContentLength: <span class="number">-1</span>,</span><br><span class="line"></span><br><span class="line">  validateStatus: <span class="function"><span class="keyword">function</span> <span class="title">validateStatus</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">defaults.headers = &#123;</span><br><span class="line">  common: &#123;</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'application/json, text/plain, */*'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">utils.forEach([<span class="string">'delete'</span>, <span class="string">'get'</span>, <span class="string">'head'</span>], <span class="function"><span class="keyword">function</span> <span class="title">forEachMethodNoData</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line">  defaults.headers[method] = &#123;&#125;;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">utils.forEach([<span class="string">'post'</span>, <span class="string">'put'</span>, <span class="string">'patch'</span>], <span class="function"><span class="keyword">function</span> <span class="title">forEachMethodWithData</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line">  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = defaults</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>源码阅读</category>
      </categories>
      <tags>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 有用的代码片段(JavaScript编程黑科技)</title>
    <url>/2018/02/20/JS/</url>
    <content><![CDATA[<p>收集有用的js代码片段</p>
<h4 id="浮点数取整"><a href="#浮点数取整" class="headerlink" title="浮点数取整"></a>浮点数取整</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">123.4567</span></span><br><span class="line">x &gt;&gt; <span class="number">0</span> <span class="comment">// 123</span></span><br><span class="line">~~x <span class="comment">// 123</span></span><br><span class="line">x | <span class="number">0</span> <span class="comment">// 123</span></span><br><span class="line"><span class="built_in">Math</span>.floor(x) <span class="comment">//123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">-12.53</span>) <span class="comment">// -13</span></span><br><span class="line"><span class="number">12.53</span> | <span class="number">0</span> <span class="comment">// -12</span></span><br></pre></td></tr></table></figure>

<h4 id="16-进制颜色代码生成"><a href="#16-进制颜色代码生成" class="headerlink" title="16 进制颜色代码生成"></a>16 进制颜色代码生成</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">'#'</span> + (<span class="string">'00000'</span> + ((<span class="built_in">Math</span>.random() * <span class="number">0x1000000</span>) &lt;&lt; <span class="number">0</span>).toString(<span class="number">16</span>)).slice(<span class="number">-6</span>)</span><br></pre></td></tr></table></figure>

<h4 id="驼峰命名转下划线"><a href="#驼峰命名转下划线" class="headerlink" title="驼峰命名转下划线"></a>驼峰命名转下划线</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">'componentMapModelRegistry'</span></span><br><span class="line">str</span><br><span class="line">  .match(<span class="regexp">/^[a-z][a-z0-9]+|[A-Z][a-z0-9]*/g</span>)</span><br><span class="line">  .join(<span class="string">'_'</span>)</span><br><span class="line">  .toLowerCase()</span><br><span class="line"><span class="comment">// component_map_model_registry</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="url-查询参数转-json-格式"><a href="#url-查询参数转-json-格式" class="headerlink" title="url 查询参数转 json 格式"></a>url 查询参数转 json 格式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> query = <span class="function">(<span class="params">search = <span class="string">''</span></span>) =&gt;</span></span><br><span class="line">  (<span class="function">(<span class="params">querystring = <span class="string">''</span></span>) =&gt;</span></span><br><span class="line">    (<span class="function"><span class="params">q</span> =&gt;</span> (</span><br><span class="line">      querystring</span><br><span class="line">        .split(<span class="string">'&amp;'</span>)</span><br><span class="line">        .forEach(<span class="function"><span class="params">item</span> =&gt;</span> (<span class="function"><span class="params">kv</span> =&gt;</span> kv[<span class="number">0</span>] &amp;&amp; (q[kv[<span class="number">0</span>]] = kv[<span class="number">1</span>]))(item.split(<span class="string">'='</span>))),</span><br><span class="line">      q</span><br><span class="line">    ))(&#123;&#125;))(search.split(<span class="string">'?'</span>)[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5实现</span></span><br><span class="line"><span class="keyword">var</span> query = <span class="function"><span class="keyword">function</span>(<span class="params">search</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (search === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">    search = <span class="string">''</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params">querystring</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (querystring === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">      querystring = <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params">q</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        querystring.split(<span class="string">'&amp;'</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params">kv</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> kv[<span class="number">0</span>] &amp;&amp; (q[kv[<span class="number">0</span>]] = kv[<span class="number">1</span>])</span><br><span class="line">          &#125;)(item.split(<span class="string">'='</span>))</span><br><span class="line">        &#125;),</span><br><span class="line">        q</span><br><span class="line">      )</span><br><span class="line">    &#125;)(&#123;&#125;)</span><br><span class="line">  &#125;)(search.split(<span class="string">'?'</span>)[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">query(<span class="string">'?key1=value1&amp;key2=value2'</span>) <span class="comment">// es6.html:14 &#123;key1: "value1", key2: "value2"&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="获取-URL-参数"><a href="#获取-URL-参数" class="headerlink" title="获取 URL 参数"></a>获取 URL 参数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryString</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^|&amp;)'</span> + key + <span class="string">'=([^&amp;]*)(&amp;|$)'</span>)</span><br><span class="line">  <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg)</span><br><span class="line">  <span class="keyword">if</span> (r != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">unescape</span>(r[<span class="number">2</span>])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="n维数组展开成一维数组-扁平化数组"><a href="#n维数组展开成一维数组-扁平化数组" class="headerlink" title="n维数组展开成一维数组(扁平化数组)"></a>n维数组展开成一维数组(扁平化数组)</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], [<span class="string">'4'</span>, <span class="number">5</span>, [<span class="string">'6'</span>,<span class="number">7</span>,[<span class="number">8</span>]]], [<span class="number">9</span>], <span class="number">10</span>]</span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="comment">// 限制：数组项不能出现`,`，同时数组项全部变成了字符数字</span></span><br><span class="line">arr.toString().split(<span class="string">','</span>); <span class="comment">// ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="comment">// 转换后数组项全部变成数字了</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">'['</span> + arr + <span class="string">']'</span>); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(<span class="string">`[<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(arr).replace(<span class="regexp">/\[|]/g</span>, <span class="string">''</span>)&#125;</span>]`</span>); <span class="comment">// [1, 2, 3, "4", 5, "6", 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法四</span></span><br><span class="line"><span class="keyword">const</span></span><br><span class="line">flatten = <span class="function">(<span class="params">ary</span>) =&gt;</span> ary.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.concat(<span class="built_in">Array</span>.isArray(b) ? flatten(b) : b), [])</span><br><span class="line">flatten(arr) <span class="comment">// [1, 2, 3, "4", 5, "6", 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法五</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(a) ? [].concat(...a.map(flatten)) : a</span><br><span class="line">&#125;</span><br><span class="line">flatten(arr)  <span class="comment">// [1, 2, 3, "4", 5, "6", 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure>

<h4 id="统计文字个数-不记符号"><a href="#统计文字个数-不记符号" class="headerlink" title="统计文字个数(不记符号)"></a>统计文字个数(不记符号)</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wordCount</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> pattern = <span class="regexp">/[a-zA-Z0-9_\u0392-\u03c9]+|[\u4E00-\u9FFF\u3400-\u4dbf\uf900-\ufaff\u3040-\u309f\uac00-\ud7af]+/g</span>;</span><br><span class="line"> <span class="keyword">var</span> m = data.match(pattern);</span><br><span class="line"> <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">if</span>( m === <span class="literal">null</span> ) <span class="keyword">return</span> count;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; m.length; i++) &#123;</span><br><span class="line">   <span class="keyword">if</span> (m[i].charCodeAt(<span class="number">0</span>) &gt;= <span class="number">0x4E00</span>) &#123;</span><br><span class="line">     count += m[i].length;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     count += <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">'呵呵！'</span></span><br><span class="line">wordCount(text) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h4 id="测试质数"><a href="#测试质数" class="headerlink" title="测试质数"></a>测试质数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> !(<span class="regexp">/^.?$|^(..+?)\1+$/</span>).test(<span class="string">'1'</span>.repeat(n))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="统计字符串中相同字符出现的次数"><a href="#统计字符串中相同字符出现的次数" class="headerlink" title="统计字符串中相同字符出现的次数"></a>统计字符串中相同字符出现的次数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcdaabc'</span></span><br><span class="line"><span class="keyword">var</span> info = str.split(<span class="string">''</span>).reduce(<span class="function">(<span class="params">p, k</span>) =&gt;</span> (p[k]++ || (p[k] = <span class="number">1</span>), p), &#123;&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(info)  <span class="comment">// &#123; a: 3, b: 2, c: 2, d: 1 &#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="使用-x-indexOf-‘y’-来简化-x-indexOf-‘y’-gt-1"><a href="#使用-x-indexOf-‘y’-来简化-x-indexOf-‘y’-gt-1" class="headerlink" title="使用 ~x.indexOf(‘y’)来简化 x.indexOf(‘y’)&gt;-1"></a>使用 ~x.indexOf(‘y’)来简化 x.indexOf(‘y’)&gt;-1</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'hello world'</span></span><br><span class="line"><span class="keyword">if</span> (str.indexOf(<span class="string">'lo'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (~str.indexOf(<span class="string">'lo'</span>)) &#123;</span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="匿名函数自执行写法-IIFE"><a href="#匿名函数自执行写法-IIFE" class="headerlink" title="匿名函数自执行写法(IIFE)"></a>匿名函数自执行写法(IIFE)</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;() );</span><br><span class="line">( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; )();</span><br><span class="line">[ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;() ];</span><br><span class="line">~ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line">! <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line">+ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line">- <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="keyword">delete</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="keyword">void</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="number">1</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="number">1</span> ^ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="number">1</span> &gt; <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br></pre></td></tr></table></figure>

<h4 id="两个整数交换数值"><a href="#两个整数交换数值" class="headerlink" title="两个整数交换数值"></a>两个整数交换数值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">20</span>, b = <span class="number">30</span>;</span><br><span class="line">a ^= b;</span><br><span class="line">b ^= a;</span><br><span class="line">a ^= b;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line">[a, b] = [b, a]</span><br></pre></td></tr></table></figure>
<h4 id="身份证验证"><a href="#身份证验证" class="headerlink" title="身份证验证"></a>身份证验证</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chechCHNCardId</span>(<span class="params">sNo</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reg =  <span class="regexp">/^[0-9]&#123;17&#125;[X0-9]$/</span></span><br><span class="line"> <span class="keyword">if</span> (!reg.test(sNo,)) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> sNo = sNo.toString();</span><br><span class="line"> <span class="keyword">var</span> a, b, c;</span><br><span class="line"> a = <span class="built_in">parseInt</span>(sNo.substr(<span class="number">0</span>, <span class="number">1</span>)) * <span class="number">7</span> + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">1</span>, <span class="number">1</span>)) * <span class="number">9</span> + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">2</span>, <span class="number">1</span>)) * <span class="number">10</span>;</span><br><span class="line"> a = a + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">3</span>, <span class="number">1</span>)) * <span class="number">5</span> + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">4</span>, <span class="number">1</span>)) * <span class="number">8</span> + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">5</span>, <span class="number">1</span>)) * <span class="number">4</span>;</span><br><span class="line"> a = a + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">6</span>, <span class="number">1</span>)) * <span class="number">2</span> + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">7</span>, <span class="number">1</span>)) * <span class="number">1</span> + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">8</span>, <span class="number">1</span>)) * <span class="number">6</span>;</span><br><span class="line"> a = a + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">9</span>, <span class="number">1</span>)) * <span class="number">3</span> + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">10</span>, <span class="number">1</span>)) * <span class="number">7</span> + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">11</span>, <span class="number">1</span>)) * <span class="number">9</span>;</span><br><span class="line"> a = a + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">12</span>, <span class="number">1</span>)) * <span class="number">10</span> + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">13</span>, <span class="number">1</span>)) * <span class="number">5</span> + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">14</span>, <span class="number">1</span>)) * <span class="number">8</span>;</span><br><span class="line"> a = a + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">15</span>, <span class="number">1</span>)) * <span class="number">4</span> + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">16</span>, <span class="number">1</span>)) * <span class="number">2</span>;r</span><br><span class="line"> b = a % <span class="number">11</span>;</span><br><span class="line"> <span class="keyword">if</span> (b == <span class="number">2</span>) &#123;</span><br><span class="line">   c = sNo.substr(<span class="number">17</span>, <span class="number">1</span>).toUpperCase();</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   c = <span class="built_in">parseInt</span>(sNo.substr(<span class="number">17</span>, <span class="number">1</span>));</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">switch</span> (b) &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">     <span class="keyword">if</span> (c != <span class="number">1</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">     <span class="keyword">if</span> (c != <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">     <span class="keyword">if</span> (c != <span class="string">"X"</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">     <span class="keyword">if</span> (c != <span class="number">9</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">     <span class="keyword">if</span> (c != <span class="number">8</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">     <span class="keyword">if</span> (c != <span class="number">7</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">     <span class="keyword">if</span> (c != <span class="number">6</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">     <span class="keyword">if</span> (c != <span class="number">5</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">     <span class="keyword">if</span> (c != <span class="number">4</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">     <span class="keyword">if</span> (c != <span class="number">3</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">     <span class="keyword">if</span> (c != <span class="number">2</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>黑科技</tag>
        <tag>trick</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL语句</title>
    <url>/2018/07/22/SQL%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<ol>
<li>查询表里重复次数最多的<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> userid, <span class="keyword">count</span>( * ) <span class="keyword">AS</span> <span class="keyword">count</span> <span class="keyword">FROM</span> t_order_m <span class="keyword">GROUP</span> <span class="keyword">BY</span> userid <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">count</span> <span class="keyword">desc</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>2.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	<span class="keyword">CASE</span> ode.areaid</span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">	<span class="string">'重庆'</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span></span><br><span class="line">	<span class="string">'南江'</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span></span><br><span class="line">	<span class="string">'宣汉'</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">4</span> <span class="keyword">THEN</span></span><br><span class="line">	<span class="string">'邻水'</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">5</span> <span class="keyword">THEN</span></span><br><span class="line">	<span class="string">'其他'</span></span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">	<span class="string">'未知'</span></span><br><span class="line"><span class="keyword">END</span>,</span><br><span class="line"> <span class="keyword">COUNT</span>(<span class="number">1</span>) 交易笔数,</span><br><span class="line"> <span class="keyword">SUM</span>(of.total) / <span class="number">100</span> 应付总金额,</span><br><span class="line"> <span class="keyword">SUM</span>(of.cash) / <span class="number">100</span> 实付总金额,</span><br><span class="line"> <span class="keyword">SUM</span>(of.coupon) / <span class="number">100</span> 优惠总金额</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	t_order_fictitious <span class="keyword">of</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> t_org_department_equipment ode <span class="keyword">ON</span> of.equipmentno = ode.equipmentno</span><br><span class="line"><span class="keyword">OR</span> of.id = ode.equipmentno</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	of.type = <span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span> of.ispay = <span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span> of.paytime &gt;= <span class="string">'2018-07-31'</span></span><br><span class="line"><span class="keyword">AND</span> of.paytime &lt; <span class="string">'2018-08-01'</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">	ode.areaid</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&lt;!-- 替换回车换行为空字符串 --&gt;</span><br><span class="line"><span class="keyword">REPLACE</span>(<span class="keyword">REPLACE</span>(<span class="string">`desc`</span>, <span class="built_in">CHAR</span>(<span class="number">10</span>),<span class="string">''</span>), <span class="built_in">CHAR</span>(<span class="number">13</span>),<span class="string">''</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>koa2 源码阅读解析</title>
    <url>/2019/07/01/Koa%20%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><code>Koa</code> 是一个新的 web 框架，由 <code>Express</code> 幕后的原班人马打造， 致力于成为 web 应用和 API 开发领域中的一个更小、更富有表现力、更健壮的基石。 通过利用 <code>async/await</code> 函数，丢弃回调函数，并有力地增强错误处理。 <code>Koa</code> 并没有捆绑任何中间件， 而是提供了一套优雅的方法，帮助快速而愉快地编写服务端应用程序。</p>
<p><img data-src="http://cdn.cqyyy.cn/pic/20190714231335.png" alt=""></p>
<a id="more"></a>

<h4 id="koa-源码结构"><a href="#koa-源码结构" class="headerlink" title="koa 源码结构"></a>koa 源码结构</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── application.js</span><br><span class="line">├── context.js</span><br><span class="line">├── request.js</span><br><span class="line">└── response.js</span><br></pre></td></tr></table></figure>

<p><code>koa2</code> 的源码目录结构的lib文件夹，lib文件夹下放着四个 <code>koa2</code> 的核心文件：<code>application.js</code>、<code>context.js</code>、<code>request.js</code>、<code>response.js</code></p>
<h4 id="application-js"><a href="#application-js" class="headerlink" title="application.js"></a><code>application.js</code></h4><p><code>Koa</code> 的入口文件，暴露应用 <code>Application</code> 类，这个 <code>class</code> 继承自node的核心库 <code>events</code>, 这样就会赋予框架事件监听和事件触发的能力。application还暴露了一些常用的api，比如toJSON、listen、use等等。</p>
<p>listen的实现原理其实就是对http.createServer进行了一个封装，重点是这个函数中传入的callback，它里面包含了中间件的合并，上下文的处理，对res的特殊处理。</p>
<p>use是收集中间件，将多个中间件放入一个缓存队列中，然后通过koa-compose这个插件进行递归组合调用这一些列的中间件。</p>
<h4 id="context-js"><a href="#context-js" class="headerlink" title="context.js"></a><code>context.js</code></h4><p>这部分就是koa的应用上下文ctx,其实就一个简单的对象暴露，里面的重点在delegate，这个就是代理，这个就是为了开发者方便而设计的，比如我们要访问ctx.repsponse.status但是我们通过delegate，可以直接访问ctx.status访问到它。</p>
<h4 id="request-js"><a href="#request-js" class="headerlink" title="request.js"></a><code>request.js</code></h4><h4 id="response-js"><a href="#response-js" class="headerlink" title="response.js"></a><code>response.js</code></h4>]]></content>
      <categories>
        <category>源码阅读</category>
      </categories>
      <tags>
        <tag>koa2</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB安装配置</title>
    <url>/2017/11/20/MongoDB/</url>
    <content><![CDATA[<p>非关系型数据库MongoDb，与Node.js搭配最佳。记录MongoDB的安装和配置过程如下(windows)：</p>
<ol>
<li><p>下载MongoDB。 <a href="https://www.mongodb.com/download-center" target="_blank" rel="noopener" title="down center">mongodb down center</a> version3.4</p>
</li>
<li><p>安装的过程比较简单，可以默认安装，默认是安装 <code>C:\Program Files\</code> 目录下 MongoDB</p>
</li>
<li><p>配置mongodb数据库的数据文件和日志文件，需要手动创建：</p>
<ul>
<li><p>在 <code>C:\Program Files\MongoDB\Server\3.4</code> 目录下创建文件夹 <code>data</code> &amp; <code>logs</code>, 在 <code>logs</code> 下新建文件 MongoDB.log 作为日志文件。</p>
</li>
<li><p>以管理员身份运行cmd, 进入 <code>C:\Program Files\MongoDB\Server\3.4\bin</code> 输入命令： <code>mongod -dbpath &quot;C:\Program Files\MongoDB\Server\3.4\data&quot;</code> 执行完出现 … on port 27017 说明成功，此时已可以连接数据库。</p>
<a id="more"></a></li>
<li><p>以管理员身份运行cmd, 进入 <code>C:\Program Files\MongoDB\Server\3.4\bin</code> 输入命令：  <code>mongod -dbpath &quot;C:\Program Files\MongoDB\Server\3.4\data&quot; -logpath &quot;C:\Program Files\MongoDB\Server\3.4\logs\MongoDB.log&quot; -install -serviceName &quot;MongoDB&quot;</code> 分别为指定数据库data路径，日志路径，将mongodb作为Windows服务。</p>
</li>
</ul>
</li>
<li><p>输入net start mongodb，mongodb的服务被启动。</p>
</li>
</ol>
<ol start="5">
<li>输入 mongo 可以进入mongoDB shell <code>show dbs</code></li>
</ol>
<table>
<thead>
<tr>
<th>name</th>
<th>size</th>
</tr>
</thead>
<tbody><tr>
<td>local</td>
<td>0.000GB</td>
</tr>
<tr>
<td>admin</td>
<td>0.000GB</td>
</tr>
</tbody></table>
<ol start="6">
<li>完成上述步骤已经可以使用数据库，MongoDB默认是不需要输入用户名和密码，客户就可以登录的。出于安全性的考虑，我们还是要为其设置用户名和密码。</li>
</ol>
<ul>
<li>另起一个终端，运行下列命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.createUser(</span><br><span class="line">   &#123;</span><br><span class="line">     user: <span class="string">"adminUser"</span>,</span><br><span class="line">     <span class="built_in">pwd</span>: <span class="string">"adminPass"</span>,</span><br><span class="line">     roles: [ &#123; role: <span class="string">"userAdminAnyDatabase"</span>, db: <span class="string">"admin"</span> &#125; ]</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>Mongodb 用户验证登陆</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo --port 27017</span><br><span class="line">use admin</span><br><span class="line">db.auth(<span class="string">"adminUser"</span>, <span class="string">"adminPass"</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>创建普通用户</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use foo</span><br><span class="line">db.createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    user: <span class="string">"simpleUser"</span>,</span><br><span class="line">    <span class="built_in">pwd</span>: <span class="string">"simplePass"</span>,</span><br><span class="line">    roles: [ &#123; role: <span class="string">"readWrite"</span>, db: <span class="string">"foo"</span> &#125;,</span><br><span class="line">             &#123; role: <span class="string">"read"</span>, db: <span class="string">"bar"</span> &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>注意：use foo表示用户在 foo 库中创建，就一定要 foo 库验证身份，即用户的信息跟随随数据库。比如上述 simpleUser 虽然有 bar 库的读取权限，但是一定要先在 foo 库进行身份验证，直接访问会提示验证失败。<br>还有一点需要注意，如果 admin 库没有任何用户的话，即使在其他数据库中创建了用户，启用身份验证，默认的连接方式依然会有超级权限</p>
<ol start="7">
<li>生产中常用 URI 形式对数据库进行连接</li>
</ol>
<p><code>mongodb://your.db.ip.address:27017/foo</code></p>
<p><code>mongodb://simpleUser:simplePass@your.db.ip.address:27017/foo</code></p>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>svn自动更新，commit触发update</title>
    <url>/2018/06/20/SVN%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<ol>
<li><p>找到SVN Server中的仓库（Repositories）文件夹的位置，在相应的项目文件夹中找到hooks文件夹。</p>
</li>
<li><p>在该文件夹中添加一个post-commit.bat文件；当有commit动作发生时（提交到SVN Server时）就会执行这个post-commit.bat文件。</p>
</li>
<li><p>post-commit.bat里的内容如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"C:\Program Files\VisualSVN Server\bin\svn.exe"</span> </span><br><span class="line">update <span class="string">"C:\Hongfan2018"</span> </span><br><span class="line">--quiet --username <span class="string">"用户名"</span> --password <span class="string">"密码"</span></span><br></pre></td></tr></table></figure>
<p>svn 安装地址 <code>update</code> 项目部署地址  <code>--quiet --username</code> 用户名 <code>--password</code> 密码</p>
</li>
<li><p><code>win+R</code> 运行 <code>services.msc</code> 找到 <code>visual svn server</code> 服务，右键属性 -&gt; 登陆面板 -&gt; 设置桌面交互或者管理员权限。</p>
</li>
<li><p>提交即可自动更新。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title>使用axios笔记</title>
    <url>/2017/06/07/axios/</url>
    <content><![CDATA[<p>vue2.0中官方推荐的HTTP请求插件：axios. <a href="https://github.com/mzabriskie/axios/" target="_blank" rel="noopener">官方文档</a></p>
<h5 id="添加一个请求拦截器"><a href="#添加一个请求拦截器" class="headerlink" title="添加一个请求拦截器"></a>添加一个请求拦截器</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//在请求发出之前进行一些操作</span></span><br><span class="line">  <span class="comment">//console.log(config)</span></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//Do something with request error</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="添加一个响应拦截器"><a href="#添加一个响应拦截器" class="headerlink" title="添加一个响应拦截器"></a>添加一个响应拦截器</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">  	<span class="comment">//在这里对返回的数据进行处理</span></span><br><span class="line">  	<span class="comment">// if(res.data.name=="qhx")&#123;</span></span><br><span class="line">  	<span class="comment">// 	return 123;</span></span><br><span class="line">  	<span class="comment">// &#125;</span></span><br><span class="line">  	<span class="keyword">return</span> res;</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  	<span class="comment">//Do something with response error</span></span><br><span class="line">  	<span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="发送网络请求"><a href="#发送网络请求" class="headerlink" title="发送网络请求"></a>发送网络请求</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">	method:<span class="string">"post"</span>,</span><br><span class="line">	headers: &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>&#125;,</span><br><span class="line">	url:<span class="string">"http://192.168.2.231:807/SwsWeb.ashx"</span>,</span><br><span class="line">	data:&#123;</span><br><span class="line">		methodName:<span class="string">"p_costManage.GetHJForScheId"</span>,</span><br><span class="line">           parameters:<span class="string">"2045"</span>,</span><br><span class="line">           u_login:<span class="string">"admin"</span>,</span><br><span class="line">           u_pass:<span class="string">"admin"</span>,</span><br><span class="line">           login_key:<span class="string">""</span>,</span><br><span class="line">           no_login_key:<span class="string">"1"</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">	transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">	    <span class="keyword">let</span> ret = <span class="string">''</span></span><br><span class="line">	    <span class="keyword">for</span> (<span class="keyword">let</span> it <span class="keyword">in</span> data) &#123;</span><br><span class="line">	      ret += <span class="built_in">encodeURIComponent</span>(it) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(data[it]) + <span class="string">'&amp;'</span></span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">return</span> ret</span><br><span class="line">	 &#125;],</span><br><span class="line">&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(response)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>值得注意的是：<code>transformRequest</code> 在官方文档中的描述：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// `transformRequest` allows changes to the request data before it is sent to the server</span></span><br><span class="line"> <span class="comment">// This is only applicable for request methods 'PUT', 'POST', and 'PATCH'</span></span><br><span class="line"> <span class="comment">// The last function in the array must return a string or an instance of Buffer, ArrayBuffer,</span></span><br><span class="line"> <span class="comment">// FormData or Stream</span></span><br><span class="line">transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// Do whatever you want to transform the data</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> data;</span><br><span class="line"> &#125;],</span><br><span class="line"></span><br><span class="line"> <span class="comment">// `transformResponse` allows changes to the response data to be made before</span></span><br><span class="line"> <span class="comment">// it is passed to then/catch</span></span><br><span class="line"> transformResponse: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// Do whatever you want to transform the data</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> data;</span><br><span class="line"> &#125;],</span><br><span class="line"></span><br><span class="line"> <span class="comment">// `data` is the data to be sent as the request body</span></span><br><span class="line"> <span class="comment">// Only applicable for request methods 'PUT', 'POST', and 'PATCH'</span></span><br><span class="line"> <span class="comment">// When no `transformRequest` is set, must be of one of the following types:</span></span><br><span class="line"> <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line"> <span class="comment">// - Browser only: FormData, File, Blob</span></span><br><span class="line"> <span class="comment">// - Node only: Stream, Buffer</span></span><br><span class="line"> data: &#123;</span><br><span class="line">   firstName: <span class="string">'Fred'</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>
<p><code>transformRequest</code> 允许在发送请求对 <code>data</code> 进行处理。<br>开始没理解到，后来明白了，必须要对 <code>data</code> 进行 <code>encodeURIComponent()</code></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>axios</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>canvas粒子背景效果</title>
    <url>/2017/05/28/canvas/</url>
    <content><![CDATA[<p>HTML5 canvas粒子背景效果</p>
<p><img data-src="http://cdn.cqyyy.cn/pic/20190528152159.gif" alt=""></p>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">			html&#123;</span><br><span class="line">				height: 100%</span><br><span class="line">			&#125;</span><br><span class="line">	        body&#123;</span><br><span class="line">	        	margin: 0;</span><br><span class="line">	        	height: 100%;</span><br><span class="line"><span class="css">	            <span class="selector-tag">background</span>: <span class="selector-id">#F5F7F9</span>;</span></span><br><span class="line">	        &#125;</span><br><span class="line">	        canvas&#123;</span><br><span class="line">	        	display: block;</span><br><span class="line">	        	width: 100%;</span><br><span class="line">	        	height: 100%;</span><br><span class="line">	        	position: fixed;</span><br><span class="line">	        	top: 0;</span><br><span class="line">	        	left: 0;</span><br><span class="line">	        	z-index: -1;</span><br><span class="line">	        &#125;</span><br><span class="line"><span class="css">	        <span class="selector-class">.content</span>&#123;</span></span><br><span class="line">	        	width: 960px;</span><br><span class="line">	        	height: 100%;</span><br><span class="line"><span class="css">	        	<span class="comment">/*background: #fff;*/</span></span></span><br><span class="line">	        	margin: 0 auto;</span><br><span class="line">	        	text-align: center;</span><br><span class="line">	        &#125;</span><br><span class="line"><span class="css">	        <span class="selector-class">.content</span> <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">				width: 240px;</span><br><span class="line">				height: 600px;</span><br><span class="line"><span class="css">				<span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">				float: left;</span><br><span class="line">	        &#125;</span><br><span class="line"><span class="css">	        <span class="selector-class">.content</span> <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">	        	width: 700px;</span><br><span class="line">				min-height: 100%;</span><br><span class="line"><span class="css">				<span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">				float: right;</span><br><span class="line">	        &#125;</span><br><span class="line">	        </span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- &lt;div class="content"&gt;</span></span><br><span class="line"><span class="comment">			&lt;div class="left"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">			&lt;div class="right"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">		&lt;/div&gt; --&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//创建对象</span></span></span><br><span class="line"><span class="actionscript">				<span class="comment">//以一个圆为对象</span></span></span><br><span class="line"><span class="actionscript">				<span class="comment">//设置随机的 x，y坐标，r半径，_mx，_my移动的距离</span></span></span><br><span class="line"><span class="actionscript">				<span class="comment">//this.r是创建圆的半径，参数越大半径越大</span></span></span><br><span class="line"><span class="actionscript">				<span class="comment">//this._mx,this._my是移动的距离，参数越大移动</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">constructor</span>(x, y) &#123;</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">this</span>.x = x;</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">this</span>.y = y;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">this</span>.r = <span class="built_in">Math</span>.random() * <span class="number">11</span> ;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">this</span>._mx = <span class="built_in">Math</span>.random() ;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">this</span>._my = <span class="built_in">Math</span>.random() ;</span></span><br><span class="line"></span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">				<span class="comment">//canvas 画圆和画直线</span></span></span><br><span class="line"><span class="actionscript">				<span class="comment">//画圆就是正常的用canvas画一个圆</span></span></span><br><span class="line"><span class="actionscript">				<span class="comment">//画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理</span></span></span><br><span class="line">				drawCircle(ctx) &#123;</span><br><span class="line">				    ctx.beginPath();</span><br><span class="line"><span class="actionscript">				    <span class="comment">//arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。</span></span></span><br><span class="line"><span class="actionscript">				    ctx.arc(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.r, <span class="number">0</span>, <span class="number">360</span>)</span></span><br><span class="line">				    ctx.closePath();</span><br><span class="line"><span class="actionscript">				    ctx.fillStyle = <span class="string">'rgba(204, 204, 204, 0.3)'</span>;</span></span><br><span class="line">				    ctx.fill();</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				drawLine(ctx, _circle) &#123;</span><br><span class="line"><span class="javascript">				    <span class="keyword">let</span> dx = <span class="keyword">this</span>.x - _circle.x;</span></span><br><span class="line"><span class="javascript">				    <span class="keyword">let</span> dy = <span class="keyword">this</span>.y - _circle.y;</span></span><br><span class="line"><span class="javascript">				    <span class="keyword">let</span> d = <span class="built_in">Math</span>.sqrt(dx * dx + dy * dy)</span></span><br><span class="line">				    if (d &lt; 210) &#123;</span><br><span class="line">				        ctx.beginPath();</span><br><span class="line"><span class="actionscript">				        <span class="comment">//开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：</span></span></span><br><span class="line"><span class="actionscript">				        ctx.moveTo(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);   <span class="comment">//起始点</span></span></span><br><span class="line"><span class="actionscript">				        ctx.lineTo(_circle.x, _circle.y);   <span class="comment">//终点</span></span></span><br><span class="line">				        ctx.closePath();</span><br><span class="line"><span class="actionscript">				        ctx.strokeStyle = <span class="string">'rgba(204, 204, 204, 0.3)'</span>;</span></span><br><span class="line">				        ctx.stroke();</span><br><span class="line">				    &#125;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line"><span class="actionscript">				<span class="comment">// 圆圈移动</span></span></span><br><span class="line"><span class="actionscript">				<span class="comment">// 圆圈移动的距离必须在屏幕范围内</span></span></span><br><span class="line">				move(w, h) &#123;</span><br><span class="line"><span class="actionscript">				    <span class="keyword">this</span>._mx = (<span class="keyword">this</span>.x &lt; w &amp;&amp; <span class="keyword">this</span>.x &gt; <span class="number">0</span>) ? <span class="keyword">this</span>._mx : (-<span class="keyword">this</span>._mx);</span></span><br><span class="line"><span class="actionscript">				    <span class="keyword">this</span>._my = (<span class="keyword">this</span>.y &lt; h &amp;&amp; <span class="keyword">this</span>.y &gt; <span class="number">0</span>) ? <span class="keyword">this</span>._my : (-<span class="keyword">this</span>._my);</span></span><br><span class="line"><span class="actionscript">				    <span class="keyword">this</span>.x += <span class="keyword">this</span>._mx / <span class="number">2</span>;</span></span><br><span class="line"><span class="actionscript">				    <span class="keyword">this</span>.y += <span class="keyword">this</span>._my / <span class="number">2</span>;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">				<span class="comment">//鼠标点画圆闪烁变动</span></span></span><br><span class="line"><span class="actionscript">			<span class="class"><span class="keyword">class</span> <span class="title">currentCirle</span> <span class="keyword">extends</span> <span class="title">Circle</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">constructor</span>(x, y) &#123;</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">super</span>(x, y)</span></span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">				drawCircle(ctx) &#123;</span><br><span class="line">				    ctx.beginPath();</span><br><span class="line"><span class="actionscript">				    <span class="comment">//注释内容为鼠标焦点的地方圆圈半径变化</span></span></span><br><span class="line"><span class="actionscript">				    <span class="comment">//this.r = (this.r &lt; 14 &amp;&amp; this.r &gt; 1) ? this.r + (Math.random() * 2 - 1) : 2;</span></span></span><br><span class="line"><span class="actionscript">				    <span class="keyword">this</span>.r = <span class="number">8</span>;</span></span><br><span class="line"><span class="actionscript">				    ctx.arc(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.r, <span class="number">0</span>, <span class="number">360</span>);</span></span><br><span class="line">				    ctx.closePath();</span><br><span class="line"><span class="actionscript">				    <span class="comment">//ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'</span></span></span><br><span class="line"><span class="actionscript">				    ctx.fillStyle = <span class="string">'rgba(204, 204, 204, 0.3)'</span></span></span><br><span class="line">				    ctx.fill();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">				<span class="comment">//更新页面用requestAnimationFrame替代setTimeout</span></span></span><br><span class="line"><span class="javascript">			<span class="built_in">window</span>.requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame || <span class="built_in">window</span>.mozRequestAnimationFrame || <span class="built_in">window</span>.webkitRequestAnimationFrame || <span class="built_in">window</span>.msRequestAnimationFrame;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">			<span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span></span><br><span class="line"><span class="javascript">			<span class="keyword">let</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"><span class="javascript">			<span class="keyword">let</span> w = canvas.width = canvas.offsetWidth;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">let</span> h = canvas.height = canvas.offsetHeight;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">let</span> circles = [];</span></span><br><span class="line"><span class="javascript">			<span class="keyword">let</span> current_circle = <span class="keyword">new</span> currentCirle(<span class="number">0</span>, <span class="number">0</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">			<span class="keyword">let</span> draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">				ctx.clearRect(0, 0, w, h);</span><br><span class="line"><span class="javascript">				<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; circles.length; i++) &#123;</span></span><br><span class="line">					circles[i].move(w, h);</span><br><span class="line">					circles[i].drawCircle(ctx);</span><br><span class="line"><span class="javascript">					<span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; circles.length; j++) &#123;</span></span><br><span class="line">						circles[i].drawLine(ctx, circles[j])</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				if (current_circle.x) &#123;</span><br><span class="line">					current_circle.drawCircle(ctx);</span><br><span class="line"><span class="actionscript">					<span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">1</span>; k &lt; circles.length; k++) &#123;</span></span><br><span class="line">						current_circle.drawLine(ctx, circles[k])</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				requestAnimationFrame(draw)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">			<span class="keyword">let</span> init = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span></span><br><span class="line"><span class="javascript">					circles.push(<span class="keyword">new</span> Circle(<span class="built_in">Math</span>.random()*w, <span class="built_in">Math</span>.random()*h));</span></span><br><span class="line">				&#125;</span><br><span class="line">				draw();</span><br><span class="line">			&#125;</span><br><span class="line"><span class="javascript">			<span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, init(<span class="number">70</span>));</span></span><br><span class="line"><span class="javascript">			<span class="built_in">window</span>.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">				e = e || <span class="built_in">window</span>.event;</span></span><br><span class="line">				current_circle.x = e.clientX;</span><br><span class="line">				current_circle.y = e.clientY;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="javascript">			<span class="built_in">window</span>.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">				current_circle.x = <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">				current_circle.y = <span class="literal">null</span>;</span></span><br><span class="line">			&#125;;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>canvas</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>vue自定义指令ClickOutside</title>
    <url>/2018/01/26/clickoutside/</url>
    <content><![CDATA[<p><a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">vue 自定义指令文档</a><br>点击元素外部的事件，一是点击元素本身是不会关闭的，二是点击元素以外的所有区域都要关闭。点击所有区域，可以在 document 上绑定 click 事件来实现，同时只要过滤出是否点击的是目标元素内部的元素即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.directive(<span class="string">'clickoutside'</span>, &#123;</span><br><span class="line">  bind(el, binding, vnode) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">documentHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (el.contains(e.target)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (binding.expression) &#123;</span><br><span class="line">        binding.value(e)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    el.__vueClickOutside__ = documentHandler</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, documentHandler)</span><br><span class="line">  &#125;,</span><br><span class="line">  unbind(el, binding) &#123;</span><br><span class="line">    <span class="built_in">document</span>.removeEventListener(<span class="string">'click'</span>, el.__vueClickOutside__)</span><br><span class="line">    <span class="keyword">delete</span> el.__vueClickOutside__</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>vue</tag>
        <tag>directive</tag>
      </tags>
  </entry>
  <entry>
    <title>crontab语法格式规则</title>
    <url>/2019/02/23/crontab%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<h4 id="crontab-的语法规则格式"><a href="#crontab-的语法规则格式" class="headerlink" title="crontab 的语法规则格式"></a>crontab 的语法规则格式</h4><p>例如： 0 * * * * /bin/sh （每分钟、每小时、每天、每周、每月、每年定时执行 规则）</p>
<table>
<thead>
<tr>
<th>代表意义</th>
<th>分钟</th>
<th>小时</th>
<th>日期</th>
<th>月份</th>
<th>周</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>数字范围</td>
<td>0~59</td>
<td>0~23</td>
<td>1~31</td>
<td>1~12</td>
<td>0~7</td>
<td>要执行的命令</td>
</tr>
</tbody></table>
<p>周的数字为 0 或 7 时，都代表“星期天”的意思</p>
<p>另外，还有一些辅助的字符，大概有下面这些：</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td>*(星号)</td>
<td>代表任何时刻都接受的意思。举例来说，范例一内那个日、月、周都是*，就代表着不论何月、何日的礼拜几的 12：00 都执行后续命令的意思</td>
</tr>
<tr>
<td>,(逗号)</td>
<td>代表分隔时段的意思。举例来说，如果要执行的工作是 3：00 与 6：00 时，就会是：0 3,6 * * * command 时间还是有五列，不过第二列是 3,6 ，代表 3 与 6 都适用</td>
</tr>
<tr>
<td>-(减号)</td>
<td>代表一段时间范围内，举例来说，8 点到 12 点之间的每小时的 20 分都进行一项工作：20 8-12 * * * command 仔细看到第二列变成 8-12.代表 8,9,10,11,12 都适用的意思</td>
</tr>
<tr>
<td>/n(斜线)</td>
<td>那个n代表数字，即是每隔n单位间隔的意思，例如每五分钟进行一次，则：<em>/5 * * * * command用</em>与/5来搭配，也可以写成0-59/5，意思相同</td>
</tr>
<tr>
<td><a id="more"></a></td>
<td></td>
</tr>
<tr>
<td>#### 例子</td>
<td></td>
</tr>
</tbody></table>
<ol>
<li><p>每分钟定时执行一次规则：<br>每1分钟执行： <em>/1 * * * *或者</em> * * * *<br>每5分钟执行： */5 * * * *</p>
</li>
<li><p>每小时定时执行一次规则：<br>每小时执行： 0 * * * *或者0 */1 * * *<br>每天上午7点执行：0 7 * * *<br>每天上午7点10分执行：10 7 * * *</p>
</li>
<li><p>每天定时执行一次规则：<br>每天执行 0 0 * * *</p>
</li>
<li><p>每周定时执行一次规则：<br>每周执行 0 0 * * 0</p>
</li>
<li><p>每月定时执行一次规则：<br>每月执行 0 0 1 * *</p>
</li>
<li><p>每年定时执行一次规则：<br>每年执行 0 0 1 1 *</p>
</li>
<li><p>其他例子<br> 5 * * * * 指定每小时的第5分钟执行一次ls命令</p>
<p> 30 5 * * * ls 指定每天的 5:30 执行ls命令</p>
<p> 30 7 8 * * ls 指定每月8号的7：30分执行ls命令</p>
<p> 30 5 8 6 * ls 指定每年的6月8日5：30执行ls命令</p>
<p> 30 6 * * 0 ls 指定每星期日的6:30执行ls命令[注：0表示星期天，1表示星期1，以此类推，也可以用英文来表示，sun表示星期天，mon表示星期一等。]</p>
<p> 30 3 10,20 * * ls 每月10号及20号的3：30执行ls命令[注：“，”用来连接多个不连续的时段]</p>
<p> 25 8-11 * * * ls 每天8-11点的第25分钟执行ls命令[注：“-”用来连接连续的时段]</p>
<p> */15 * * * * ls 每15分钟执行一次ls命令 [即每个小时的第0 15 30 45 60分钟执行ls命令]</p>
<p> 30 6 */10 * * ls 每个月中，每隔10天6:30执行一次ls命令[即每月的1、11、21、31日是的6：30执行一次ls命令。]</p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>css变量</title>
    <url>/2019/04/17/css%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<p>在任何语言中，变量的有一点作用都是一样的，那就是可以降低维护成本，附带还有更高性能，文件更高压缩率的好处。</p>
<p>随着CSS预编译工具Sass/Less/Stylus的关注和逐渐流行，CSS工作组迅速跟进CSS变量的规范制定，并且，很多浏览器已经跟进，目前，在部分项目中已经可以直接使用了。</p>
<h4 id="CSS变量语法和用法和特性"><a href="#CSS变量语法和用法和特性" class="headerlink" title="CSS变量语法和用法和特性"></a>CSS变量语法和用法和特性</h4><p>CSS中原生的变量定义语法是：<code>--*</code>，变量使用语法是：<code>var(--*)</code>，其中*表示我们的变量名称。关于命名这个东西，各种语言都有些显示，例如CSS选择器不能是数字开头，JS中的变量是不能直接数值的，但是，在CSS变量中，这些限制通通没有，例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">--1</span>: <span class="number">#369</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>但是，不能包含$，[，^，(，%等字符，普通字符局限在只要是“数字[0-9]”“字母[a-zA-Z]”“下划线_”和“短横线-”这些组合，但是可以是中文，日文或者韩文，例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  --深蓝: #369;</span><br><span class="line">  <span class="selector-tag">background-color</span>: <span class="selector-tag">var</span>(<span class="selector-tag">--</span>深蓝);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>变量名大小写敏感，–header-color和–Header-Color是两个不同变量。</p>
<h4 id="var-函数"><a href="#var-函数" class="headerlink" title="var() 函数"></a><code>var()</code> 函数</h4><p><code>var()</code> 函数用于读取变量。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--foo);</span><br><span class="line">  <span class="attribute">text-decoration-color</span>: <span class="built_in">var</span>(--bar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>var()函数还可以使用第二个参数，表示变量的默认值。如果该变量不存在，就会使用这个默认值。</p>
<h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>同一个 CSS 变量，可以在多个选择器内声明。读取的时候，优先级最高的声明生效。这与 CSS 的”层叠”（cascade）规则是一致的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-pseudo">:root</span> &#123; <span class="attribute">--color</span>: blue; &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">div</span> &#123; <span class="attribute">--color</span>: green; &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#alert</span> &#123; <span class="attribute">--color</span>: red; &#125;</span></span><br><span class="line"><span class="css">  * &#123; <span class="attribute">color</span>: <span class="built_in">var</span>(--color); &#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>蓝色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>绿色<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"alert"</span>&gt;</span>红色<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="JavaScript-操作"><a href="#JavaScript-操作" class="headerlink" title="JavaScript 操作"></a>JavaScript 操作</h4><p>JavaScript 也可以检测浏览器是否支持 CSS 变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isSupported =</span><br><span class="line">  <span class="built_in">window</span>.CSS &amp;&amp;</span><br><span class="line">  <span class="built_in">window</span>.CSS.supports &amp;&amp;</span><br><span class="line">  <span class="built_in">window</span>.CSS.supports(<span class="string">'--a'</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isSupported) &#123;</span><br><span class="line">  <span class="comment">/* supported */</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">/* not supported */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JavaScript 操作 CSS 变量的写法如下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置变量</span></span><br><span class="line"><span class="built_in">document</span>.body.style.setProperty(<span class="string">'--primary'</span>, <span class="string">'#7F583F'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取变量</span></span><br><span class="line"><span class="built_in">document</span>.body.style.getPropertyValue(<span class="string">'--primary'</span>).trim()</span><br><span class="line"><span class="comment">// '#7F583F'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除变量</span></span><br><span class="line"><span class="built_in">document</span>.body.style.removeProperty(<span class="string">'--primary'</span>)</span><br></pre></td></tr></table></figure>
<p>那些对 CSS 无用的信息，也可以放入 CSS 变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">--foo: <span class="keyword">if</span>(x &gt; <span class="number">5</span>) <span class="keyword">this</span>.width = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>上面代码中，<code>--foo</code>的值在 CSS 里面是无效语句，但是可以被 JavaScript 读取。这意味着，可以把样式设置写在 CSS 变量中，让 JavaScript 读取。</p>
<p>所以，CSS 变量提供了 JavaScript 与 CSS 通信的一种途径。</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM Class Style 基本操作</title>
    <url>/2018/02/07/dom-class-style/</url>
    <content><![CDATA[<p>DOM元素的 <code>class</code> 基础操作， <code>style</code> 的获取和设置。</p>
<h4 id="hasClass"><a href="#hasClass" class="headerlink" title="hasClass"></a>hasClass</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">el, cls</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!el || !cls) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">if</span> (cls.indexOf(<span class="string">' '</span>) !== <span class="number">-1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'className should not contain space.'</span>)</span><br><span class="line">  <span class="keyword">if</span> (el.classList) &#123;</span><br><span class="line">    <span class="keyword">return</span> el.classList.contains(cls);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="string">' '</span> + el.className + <span class="string">' '</span>).indexOf(<span class="string">' '</span> + cls + <span class="string">' '</span>) &gt; <span class="number">-1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="addClass"><a href="#addClass" class="headerlink" title="addClass"></a>addClass</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">el, cls</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!el) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">var</span> curClass = el.className</span><br><span class="line">  <span class="keyword">var</span> classes = (cls || <span class="string">''</span>).split(<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = classes.length; i &lt; j; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> clsName = classes[i]</span><br><span class="line">    <span class="keyword">if</span> (!clsName) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (el.classList) &#123;</span><br><span class="line">      el.classList.add(clsName)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasClass(el, clsName)) &#123;</span><br><span class="line">      curClass += <span class="string">' '</span> + clsName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!el.classList) &#123;</span><br><span class="line">    el.className = curClass</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="removeClass"><a href="#removeClass" class="headerlink" title="removeClass"></a>removeClass</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> trim = <span class="function"><span class="keyword">function</span> (<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (string || <span class="string">''</span>).replace(<span class="regexp">/^[\s\uFEFF]+|[\s\uFEFF]+$/g</span>, <span class="string">''</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">el, cls</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!el || !cls) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">var</span> classes = cls.split(<span class="string">' '</span>)</span><br><span class="line">  <span class="keyword">var</span> curClass = <span class="string">' '</span> + el.className + <span class="string">' '</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = classes.length; i &lt; j; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> clsName = classes[i]</span><br><span class="line">    <span class="keyword">if</span> (!clsName) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (el.classList) &#123;</span><br><span class="line">      el.classList.remove(clsName)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasClass(el, clsName)) &#123;</span><br><span class="line">      curClass = curClass.replace(<span class="string">' '</span> + clsName + <span class="string">' '</span>, <span class="string">' '</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!el.classList) &#123;</span><br><span class="line">    el.className = trim(curClass)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="getStyle"><a href="#getStyle" class="headerlink" title="getStyle"></a>getStyle</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ieVersion = <span class="built_in">Number</span>(<span class="built_in">document</span>.documentMode)</span><br><span class="line"><span class="keyword">const</span> getStyle = ieVersion &lt; <span class="number">9</span> ? <span class="function"><span class="keyword">function</span>(<span class="params">element, styleName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!element || !styleName) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  styleName = camelCase(styleName)</span><br><span class="line">  <span class="keyword">if</span> (styleName === <span class="string">'float'</span>) &#123;</span><br><span class="line">    styleName = <span class="string">'styleFloat'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (styleName) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'opacity'</span>:</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> element.filters.item(<span class="string">'alpha'</span>).opacity / <span class="number">100</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> (element.style[styleName] || element.currentStyle ? element.currentStyle[styleName] : <span class="literal">null</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> element.style[styleName]</span><br><span class="line">  &#125;</span><br><span class="line">&#125; : <span class="function"><span class="keyword">function</span>(<span class="params">element, styleName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!element || !styleName) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  styleName = camelCase(styleName)</span><br><span class="line">  <span class="keyword">if</span> (styleName === <span class="string">'float'</span>) &#123;</span><br><span class="line">    styleName = <span class="string">'cssFloat'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> computed = <span class="built_in">document</span>.defaultView.getComputedStyle(element, <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> element.style[styleName] || computed ? computed[styleName] : <span class="literal">null</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> element.style[styleName]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="setStyle"><a href="#setStyle" class="headerlink" title="setStyle"></a>setStyle</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ieVersion = <span class="built_in">Number</span>(<span class="built_in">document</span>.documentMode)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setStyle</span>(<span class="params">element, styleName, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!element || !styleName) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> styleName === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> styleName) &#123;</span><br><span class="line">      <span class="keyword">if</span> (styleName.hasOwnProperty(prop)) &#123;</span><br><span class="line">        setStyle(element, prop, styleName[prop])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (styleName === <span class="string">'opacity'</span> &amp;&amp; ieVersion &lt; <span class="number">9</span>) &#123;</span><br><span class="line">      element.style.filter = <span class="built_in">isNaN</span>(value) ? <span class="string">''</span> : <span class="string">'alpha(opacity='</span> + value * <span class="number">100</span> + <span class="string">')'</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element.style[styleName] = value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>dom</tag>
        <tag>class</tag>
      </tags>
  </entry>
  <entry>
    <title>es6学习笔记2(类Class)</title>
    <url>/2017/09/14/es6-1/</url>
    <content><![CDATA[<h4 id="class"><a href="#class" class="headerlink" title="class"></a>class</h4><p>ps: class 不存在变量提升。<br>ES6 引入了class（类），让javascript的面向对象编程变得更加容易清晰和容易理解。在<code>es6</code>以前生成实例对象的传统方法是通过构造函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Point.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">//'(1,2)'</span></span><br></pre></td></tr></table></figure>
<p>基本上，ES6 的class可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用 ES6 的class改写，就是下面这样。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>上面代码定义了一个“类”，可以看到里面有一个<code>constructor</code>方法，这就是构造方法，而this关键字则代表实例对象。<br>注意：定义“类”的方法的时候，前面不需要加上function这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> Point <span class="comment">// "function"</span></span><br><span class="line">Point === Point.prototype.constructor <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h4 id="类的-prototype-属性和-proto-属性"><a href="#类的-prototype-属性和-proto-属性" class="headerlink" title="类的 prototype 属性和 proto 属性"></a>类的 prototype 属性和 <strong>proto</strong> 属性</h4><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构造方法，实例化的时候将会被调用，如果不指定，那么会有一个不带参数的默认构造函数.</span></span><br><span class="line">    <span class="keyword">constructor</span>(name,color) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// toString 是原型对象上的属性</span></span><br><span class="line">    toString() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'name:'</span> + <span class="keyword">this</span>.name + <span class="string">',color:'</span> + <span class="keyword">this</span>.color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> animal = <span class="keyword">new</span> Animal(<span class="string">'dog'</span>,<span class="string">'white'</span>);</span><br><span class="line">animal.toString();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animal.hasOwnProperty(<span class="string">'name'</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(animal.hasOwnProperty(<span class="string">'toString'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(animal.__proto__.hasOwnProperty(<span class="string">'toString'</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(action) &#123;</span><br><span class="line">        <span class="comment">// 子类必须要在constructor中指定super 方法，否则在新建实例的时候会报错.</span></span><br><span class="line">        <span class="comment">// 如果没有置顶consructor,默认带super方法的constructor将会被添加、</span></span><br><span class="line">        <span class="keyword">super</span>(<span class="string">'cat'</span>,<span class="string">'white'</span>);</span><br><span class="line">        <span class="keyword">this</span>.action = action;</span><br><span class="line">    &#125;</span><br><span class="line">    toString() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">super</span>.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat(<span class="string">'catch'</span>)</span><br><span class="line">cat.toString();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例cat 是 Cat 和 Animal 的实例，和Es5完全一致。</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>一个实例化对象会有一个 <code>__proto__</code> 指向构造函数的 <code>prototype</code> 属性。在 class 中。同时具有 <code>__proto__</code> 和 <code>prototype</code> 两个属性，存在两条继承链。</p>
<ul>
<li>子类的 <code>__proto__</code> 属性，表示构造函数的继承，总是指向父类。</li>
<li>子类的 <code>prototype</code> 的 <code>__proto__</code> 属性表示方法的继承，总是指向父类的 <code>prototype</code> 属性。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Cat.__proto__ === Animal); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Cat.prototype.__proto__ === Animal.prototype); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
第一条 Cat.<strong>proto</strong> === Animal 这条原型链。完成构造函数继承的实质如下：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    construcotr() &#123;</span><br><span class="line">        <span class="keyword">return</span> Animal.__proto__.call(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
第二条对原型链 Cat.prototype.<strong>proto</strong> === Animal.prototype 完成方法的继承，实质如下：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Cat.prototype.__proto__ = Animal.prototype</span><br></pre></td></tr></table></figure>
另外还有还有三种特殊情况:</li>
</ul>
<ol>
<li><p>A继承Object，A的<strong>prototype</strong> 指向父类Object. A的 prototype.<strong>proto</strong> 指向父类Object的prototype。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(A.__proto__ === <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(A.prototype.__proto__ === <span class="built_in">Object</span>.prototype);</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数是一种特殊的对象，所有函数都是 Function 的实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Cat.__proto__ === <span class="built_in">Function</span>.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(Cat.prototype.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*由于Cat不存在任何继承，就相当于一个普通函数，由于函数都是Function 的实例，所以 *Cat.__proto__指向 Function.prototype. 第二条继承链指向父类（Function.prototype） 的*prototype属性，所以 Cat.prototype.__proto__ === Object.prototype. Cat调用后会返回*Object实例，所以 A.prototype.__proto__ 指向构造函数（Object）的prototype。</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure></li>
<li><p>Cat是一个普通函数，所以继承 Function.prototype .第二条继承链不继承任何方法，所以 Cat.prototype.<strong>proto</strong> == null.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">null</span> </span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(Cat.__proto__ === <span class="built_in">Function</span>.prototype); <span class="comment">// true;</span></span><br><span class="line"><span class="built_in">console</span>.log(Cat.prototype.__proto__ === <span class="literal">null</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>es6学习笔记1(基础)</title>
    <url>/2017/09/14/es6/</url>
    <content><![CDATA[<p>ECMAScript 6（简称ES6）是JavaScript语言的下一代标准。因为当前版本的ES6是在2015年发布的，所以又称ECMAScript 2015。</p>
<p>也就是说，ES6就是ES2015。</p>
<p>虽然目前并不是所有浏览器都能兼容ES6全部特性，但越来越多的程序员在实际项目当中已经开始使用ES6了。所以就算现在不打算使用ES6，但为了看懂别人的也该懂点ES6的语法了…</p>
<p>在正式理解ES6语法之前，得先了解下Babel。</p>
<p><a href="https://babeljs.io/" target="_blank" rel="noopener" title="babel">babel</a></p>
<p>Babel是一个广泛使用的ES6转码器：</p>
<p><img data-src="http://upload-images.jianshu.io/upload_images/1504317-d020f21868e8e84c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<a id="more"></a>

<h4 id="最常用的ES6特性"><a href="#最常用的ES6特性" class="headerlink" title="最常用的ES6特性"></a>最常用的ES6特性</h4><p><code>let, const, class, extends, super, arrow functions, template string, destructuring, default, rest arguments</code>这些是ES6最常用的几个语法</p>
<h4 id="let-const"><a href="#let-const" class="headerlink" title="let, const"></a>let, const</h4><p>这两个的用途与var类似，都是用来声明变量的，但在实际运用中他俩都有各自的特殊用途。<br>首先来看下面这个例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'zach'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'obama'</span></span><br><span class="line">    <span class="built_in">console</span>.log(name)  <span class="comment">//obama</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name)  <span class="comment">//obama</span></span><br></pre></td></tr></table></figure>
<p>使用<code>var</code>两次输出都是obama，这是因为ES5只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。第一种场景就是你现在看到的内层变量覆盖外层变量。而<code>let</code>则实际上为JavaScript新增了块级作用域。用它所声明的变量，只在<code>let</code>命令所在的代码块内有效。</p>
<p>另外一个<code>var</code>带来的不合理场景就是用来计数的循环变量泄露为全局变量，看下面的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，变量<code>i</code>是<code>var</code>声明的，在全局范围内都有效。所以每一次循环，新的<code>i</code>值都会覆盖旧值，导致最后输出的是最后一轮的<code>i</code>的值。而使用<code>let</code>则不会出现这个问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>
<p>再来看一个更常见的例子，了解下如果不用ES6，而用闭包如何解决这个问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> clickBoxs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.clickBox'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; clickBoxs.length; i++)&#123;</span><br><span class="line">    clickBoxs[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本来希望的是点击不同的clickBox，显示不同的i，但事实是无论点击哪个<code>clickBox</code>，输出的都是5。下面来看下，如何用闭包搞定它。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iteratorFactory</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> onclick;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> clickBoxs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.clickBox'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; clickBoxs.length; i++)&#123;</span><br><span class="line">    clickBoxs[i].onclick = iteratorFactory(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>const</code>也用来声明变量，但是声明的是常量。一旦声明，常量的值就不能改变。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="built_in">Math</span>.PI</span><br><span class="line"></span><br><span class="line">PI = <span class="number">23</span> <span class="comment">//Module build failed: SyntaxError: /es6/app.js: "PI" is read-only</span></span><br></pre></td></tr></table></figure>

<p>当尝试去改变用const声明的常量时，浏览器就会报错。<br>const有一个很好的应用场景，就是当引用第三方库的时声明的变量，用const来声明可以避免未来不小心重命名而导致出现bug：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> monent = <span class="built_in">require</span>(<span class="string">'moment'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="class-extends-super"><a href="#class-extends-super" class="headerlink" title="class, extends, super"></a>class, extends, super</h4><p>这三个特性涉及了ES5中最令人头疼的的几个部分：原型、构造函数，继承…你还在为它们复杂难懂的语法而烦恼吗？你还在为指针到底指向哪里而纠结万分吗？</p>
<p>ES6提供了更接近传统语言的写法，引入了Class（类）这个概念。新的class写法让对象原型的写法更加清晰、更像面向对象编程的语法，也更加通俗易懂。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = <span class="string">'animal'</span></span><br><span class="line">    &#125;</span><br><span class="line">    says(say)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.type + <span class="string">' says '</span> + say)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> Animal()</span><br><span class="line">animal.says(<span class="string">'hello'</span>) <span class="comment">//animal says hello</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.type = <span class="string">'cat'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cat = <span class="keyword">new</span> Cat()</span><br><span class="line">cat.says(<span class="string">'hello'</span>) <span class="comment">//cat says hello</span></span><br></pre></td></tr></table></figure>

<p>上面代码首先用<code>class</code>定义了一个“类”，可以看到里面有一个<code>constructor</code>方法，这就是构造方法，而this关键字则代表实例对象。简单地说，<code>constructor</code>内定义的方法和属性是实例对象自己的，而<code>constructor</code>外定义的方法和属性则是所有实例对象可以共享的。</p>
<p><code>Class</code>之间可以通过<code>extends</code>关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。上面定义了一个<code>Cat</code>类，该类通过extends关键字，继承了<code>Animal</code>类的所有属性和方法。</p>
<p><code>super</code>关键字，它指代父类的实例（即父类的<code>this</code>对象）。子类必须在<code>constructor</code>方法中调用<code>super</code>方法，否则新建实例时会报错。这是因为子类没有自己的<code>this</code>对象，而是继承父类的<code>this</code>对象，然后对其进行加工。如果不调用<code>super</code>方法，子类就得不到<code>this</code>对象。</p>
<p>ES6的继承机制，实质是先创造父类的实例对象<code>this</code>（所以必须先调用<code>super</code>方法），然后再用子类的构造函数修改<code>this</code>。</p>
<p>P.S 如果你写<code>react</code>的话，就会发现以上三个东西在最新版React中出现得很多。创建的每个<code>component</code>都是一个继承<code>React.Component</code>的类。详见react文档</p>
<h4 id="arrow-function"><a href="#arrow-function" class="headerlink" title="arrow function"></a>arrow function</h4><p>这个恐怕是ES6最最常用的一个新特性了，用它来写function比原来的写法要简洁清晰很多:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123; <span class="keyword">return</span> i + <span class="number">1</span>; &#125; <span class="comment">//ES5</span></span><br><span class="line"></span><br><span class="line">(i) =&gt; i + <span class="number">1</span> <span class="comment">//ES6</span></span><br></pre></td></tr></table></figure>
<p>简直是简单的不像话对吧…<br>如果方程比较复杂，则需要用{}把代码包起来：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; </span><br><span class="line">    x++;</span><br><span class="line">    y--;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">(x, y) =&gt; &#123;x++; y--; <span class="keyword">return</span> x+y&#125;</span><br></pre></td></tr></table></figure>

<p>除了看上去更简洁以外，arrow function还有一项超级无敌的功能！<br>长期以来，JavaScript语言的<code>this</code>对象一直是一个令人头痛的问题，在对象方法中使用<code>this</code>，必须非常小心。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = <span class="string">'animal'</span></span><br><span class="line">    &#125;</span><br><span class="line">    says(say)&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.type + <span class="string">' says '</span> + say)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> animal = <span class="keyword">new</span> Animal()</span><br><span class="line"> animal.says(<span class="string">'hi'</span>)  <span class="comment">//undefined says hi</span></span><br></pre></td></tr></table></figure>
<p>运行上面的代码会报错，这是因为setTimeout中的this指向的是全局对象。所以为了让它能够正确的运行，传统的解决方法有两种：</p>
<ol>
<li>第一种是将this传给self,再用self来指代this<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    says(say)&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(self.type + <span class="string">' says '</span> + say)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">2. 第二种方法是用bind(this),即</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line">says(say)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.type + <span class="string">' says '</span> + say)</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>), <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
但现在有了箭头函数，就不需要这么麻烦了：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = <span class="string">'animal'</span></span><br><span class="line">    &#125;</span><br><span class="line">    says(say)&#123;</span><br><span class="line">        setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.type + <span class="string">' says '</span> + say)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> animal = <span class="keyword">new</span> Animal()</span><br><span class="line">animal.says(<span class="string">'hi'</span>)  <span class="comment">//animal says hi</span></span><br></pre></td></tr></table></figure>
<p>当使用箭头函数时，函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象。<br>并不是因为箭头函数内部有绑定<code>this</code>的机制，实际原因是箭头函数根本没有自己的<code>this</code>，它的<code>this</code>是继承外面的，因此内部的<code>this</code>就是外层代码块的<code>this</code>。</p>
<h4 id="template-string"><a href="#template-string" class="headerlink" title="template string"></a>template string</h4><p>这个东西也是非常有用，当要插入大段的html内容到文档中时，传统的写法非常麻烦，所以之前通常会引用一些模板工具库，比如mustache等等。</p>
<p>大家可以先看下面一段代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#result"</span>).append(</span><br><span class="line">    <span class="string">"There are &lt;b&gt;"</span> + basket.count + <span class="string">"&lt;/b&gt; "</span> +</span><br><span class="line">    <span class="string">"items in your basket, "</span> +</span><br><span class="line">    <span class="string">"&lt;em&gt;"</span> + basket.onSale +</span><br><span class="line">    <span class="string">"&lt;/em&gt; are on sale!"</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>要用一堆的’+’号来连接文本与变量，而使用ES6的新特性模板字符串``后，可以直接这么来写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#result"</span>).append(<span class="string">`</span></span><br><span class="line"><span class="string">  There are &lt;b&gt;<span class="subst">$&#123;basket.count&#125;</span>&lt;/b&gt; items</span></span><br><span class="line"><span class="string">   in your basket, &lt;em&gt;<span class="subst">$&#123;basket.onSale&#125;</span>&lt;/em&gt;</span></span><br><span class="line"><span class="string">  are on sale!</span></span><br><span class="line"><span class="string">`</span>);</span><br></pre></td></tr></table></figure>
<p>用反引号（`）来标识起始，用<code>${}</code>来引用变量，而且所有的空格和缩进都会被保留在输出之中，是不是非常爽？！</p>
<p>React Router从第1.0.3版开始也使用ES6语法了，比如这个例子：</p>
<p><code>&lt;Link to={</code>/taco/${taco.name}<code>}&gt;{taco.name}&lt;/Link&gt;</code></p>
<h4 id="destructuring"><a href="#destructuring" class="headerlink" title="destructuring"></a>destructuring</h4><p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>
<p>看下面的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cat = <span class="string">'ken'</span></span><br><span class="line"><span class="keyword">let</span> dog = <span class="string">'lili'</span></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;<span class="attr">cat</span>: cat, <span class="attr">dog</span>: dog&#125;</span><br><span class="line"><span class="built_in">console</span>.log(zoo)  <span class="comment">//Object &#123;cat: "ken", dog: "lili"&#125;</span></span><br></pre></td></tr></table></figure>
<p>用ES6完全可以像下面这么写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cat = <span class="string">'ken'</span></span><br><span class="line"><span class="keyword">let</span> dog = <span class="string">'lili'</span></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;cat, dog&#125;</span><br><span class="line"><span class="built_in">console</span>.log(zoo)  <span class="comment">//Object &#123;cat: "ken", dog: "lili"&#125;</span></span><br></pre></td></tr></table></figure>
<p>反过来可以这么写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dog = &#123;<span class="attr">type</span>: <span class="string">'animal'</span>, <span class="attr">many</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; type, many&#125; = dog</span><br><span class="line"><span class="built_in">console</span>.log(type, many)   <span class="comment">//animal 2</span></span><br></pre></td></tr></table></figure>
<h4 id="default-rest"><a href="#default-rest" class="headerlink" title="default, rest"></a>default, rest</h4><p>default很简单，意思就是默认值。可以看下面的例子，调用<code>animal()</code>方法时忘了传参数，传统的做法就是加上这一句<code>type = type || &#39;cat&#39;</code>来指定默认值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animal</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">    type = type || <span class="string">'cat'</span>  </span><br><span class="line">    <span class="built_in">console</span>.log(type)</span><br><span class="line">&#125;</span><br><span class="line">animal()</span><br></pre></td></tr></table></figure>
<p>如果用ES6可以直接这么写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animal</span>(<span class="params">type = <span class="string">'cat'</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(type)</span><br><span class="line">&#125;</span><br><span class="line">animal()</span><br></pre></td></tr></table></figure>
<p>最后一个rest语法也很简单，直接看例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animals</span>(<span class="params">...types</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(types)</span><br><span class="line">&#125;</span><br><span class="line">animals(<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'fish'</span>) <span class="comment">//["cat", "dog", "fish"]</span></span><br></pre></td></tr></table></figure>
<p>而如果不用ES6的话，则得使用ES5的<code>arguments</code>。</p>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>Git分支的常用操作</title>
    <url>/2018/01/24/git-branch/</url>
    <content><![CDATA[<p>常用的git分支操作</p>
<h4 id="远程仓库有master和dev分支"><a href="#远程仓库有master和dev分支" class="headerlink" title="远程仓库有master和dev分支"></a>远程仓库有master和dev分支</h4><ol>
<li>克隆代码</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/xxxxx.git</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看所有分支</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --all</span><br><span class="line"><span class="comment"># 默认有了dev和master分支，所以会看到如下三个分支</span></span><br><span class="line"><span class="comment"># master[本地主分支] origin/master[远程主分支] origin/dev[远程开发分支]</span></span><br><span class="line"><span class="comment"># 新克隆下来的代码默认master和origin/master是关联的，也就是他们的代码保持同步</span></span><br><span class="line"><span class="comment"># 但是origin/dev分支在本地没有任何的关联，所以我们无法在那里开发</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建本地关联origin/dev的分支</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b dev origin/dev  </span><br><span class="line"><span class="comment"># 本地没有dev分支 要加参数 -b</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>切换到dev分支进行开发</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout dev  <span class="comment"># 这个是切换到dev分支，然后就是常规的开发</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="远程仓库只有master分支"><a href="#远程仓库只有master分支" class="headerlink" title="远程仓库只有master分支"></a>远程仓库只有master分支</h4><ol>
<li>克隆代码</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/xxxxx.git</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看所有分支</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --all</span><br><span class="line"><span class="comment"># 默认只有master分支，所以会看到如下两个分支</span></span><br><span class="line"><span class="comment"># master[本地主分支] origin/master[远程主分支]</span></span><br><span class="line"><span class="comment"># 新克隆下来的代码默认master和origin/master是关联的，也就是他们的代码保持同步</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建本地新的dev分支</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch dev  <span class="comment"># 创建本地分支</span></span><br><span class="line">git branch  <span class="comment"># 查看分支</span></span><br><span class="line"><span class="comment"># 这是会看到master和dev，而且master上会有一个星号</span></span><br><span class="line"><span class="comment"># 这个时候dev是一个本地分支，远程仓库不知道它的存在</span></span><br><span class="line"><span class="comment"># 本地分支可以不同步到远程仓库，我们可以在dev开发，然后merge到master，使用master同步代码，当然也可以同步</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>同步dev分支的代码到远程服务器</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin dev:dev  <span class="comment"># 这样远程仓库也有一个dev分支了</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>在dev分支开发代码</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">it checkout dev  <span class="comment"># 切换到dev分支进行开发</span></span><br><span class="line"><span class="comment"># 开发代码之后，有两个选择</span></span><br><span class="line"><span class="comment"># 第一个：如果功能开发完成了，可以合并主分支</span></span><br><span class="line">git checkout master  <span class="comment"># 切换到主分支</span></span><br><span class="line">git merge dev  <span class="comment"># 把dev分支的更改和master合并</span></span><br><span class="line">git push  <span class="comment"># 提交主分支代码远程</span></span><br><span class="line">git checkout dev  <span class="comment"># 切换到dev远程分支</span></span><br><span class="line">git push  <span class="comment"># 提交dev分支到远程</span></span><br><span class="line"><span class="comment"># 第二个：如果功能没有完成，可以直接推送</span></span><br><span class="line">git push  <span class="comment"># 提交到dev远程分支</span></span><br><span class="line"><span class="comment"># 注意：在分支切换之前最好先commit全部的改变，除非你真的知道自己在做什么</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>删除分支</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin :dev  <span class="comment"># 删除远程dev分支，(push一个空的分支)</span></span><br><span class="line"><span class="comment"># 下面两条是删除本地分支</span></span><br><span class="line">git checkout master  <span class="comment"># 切换到master分支</span></span><br><span class="line">git branch -d dev  <span class="comment"># 删除本地dev分支</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>branch</tag>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Qhx</title>
    <url>/2017/03/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>html5game</title>
    <url>/2017/06/30/html5game/</url>
    <content><![CDATA[<p>需求：实现一个微信公众号营销活动H5接金币小游戏，类似于大富翁。 <a href="http://qhxing.site/game/game.html" target="_blank" rel="noopener">演示地址</a></p>
<p>启动页：<br><img data-src="http://cdn.cqyyy.cn/pic/20190528152933.jpg" alt=""></p>
<a id="more"></a>

<p>游戏中：</p>


<h4 id="分析与设计"><a href="#分析与设计" class="headerlink" title="分析与设计"></a>分析与设计</h4><ol>
<li>10w+ pv  兼容性</li>
<li>产生随机掉落的金币炸弹宝石</li>
<li>下落动画随时间加快</li>
<li>玩家控制人物左右移动</li>
<li>物体与人物的碰撞检测</li>
<li>物体下落到屏幕下方后一定要移除 </li>
<li>计时器、随机数、touch等…</li>
</ol>
<p><img data-src="http://cdn.cqyyy.cn/pic/20190528152952.jpg" alt=""></p>
<h4 id="选择实现动画的方式"><a href="#选择实现动画的方式" class="headerlink" title="选择实现动画的方式"></a>选择实现动画的方式</h4><ol>
<li><p>css动画 top++ </p>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> fallDown&#123;</span><br><span class="line">    0%   &#123;<span class="attribute">top</span>:<span class="number">0</span>&#125;</span><br><span class="line">    100% &#123;<span class="attribute">top</span>:<span class="number">100%</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.elem</span>&#123;</span><br><span class="line">    <span class="attribute">animation</span>: fallDown <span class="number">3s</span> linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 不知道为什么这种方式在手机上偶尔会出现卡顿，掉帧的感觉。而且不便于控制动画。</p>
</li>
<li><p>jquery+Velocity.js</p>
<p> Velocity 是一个简单易用、高性能、功能丰富的轻量级JS动画库。<a href="http://www.mrfront.com/docs/velocity.js/index.html/" target="_blank" rel="noopener" title="velocity">中文文档</a></p>
<p> 兼容性好，流畅，可使用硬件加速。</p>
<p> 使用：</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$element.velocity(&#123;</span><br><span class="line">    width: <span class="string">"500px"</span>,        <span class="comment">// 动画属性 宽度到 "500px" 的动画</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="comment">/* Velocity 动画配置项的默认值 */</span></span><br><span class="line">    duration: <span class="number">400</span>,         <span class="comment">// 动画执行时间</span></span><br><span class="line">    easing: <span class="string">"swing"</span>,       <span class="comment">// 缓动效果</span></span><br><span class="line">    queue: <span class="string">""</span>,             <span class="comment">// 队列</span></span><br><span class="line">    begin: <span class="literal">undefined</span>,      <span class="comment">// 动画开始时的回调函数</span></span><br><span class="line">    progress: <span class="literal">undefined</span>,   <span class="comment">// 动画执行中的回调函数（该函数会随着动画执行被不断触发）</span></span><br><span class="line">    complete: <span class="literal">undefined</span>,   <span class="comment">// 动画结束时的回调函数</span></span><br><span class="line">    display: <span class="literal">undefined</span>,    <span class="comment">// 动画结束时设置元素的 css display 属性</span></span><br><span class="line">    visibility: <span class="literal">undefined</span>, <span class="comment">// 动画结束时设置元素的 css visibility 属性</span></span><br><span class="line">    loop: <span class="literal">false</span>,           <span class="comment">// 循环</span></span><br><span class="line">    delay: <span class="literal">false</span>,          <span class="comment">// 延迟</span></span><br><span class="line">    mobileHA: <span class="literal">true</span>         <span class="comment">// 移动端硬件加速（默认开启）</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p> 而且提供了动画开始、执行中，执行完成的回调函数。</p>
</li>
</ol>
<h4 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h4><p><img data-src="http://cdn.cqyyy.cn/pic/20190528153015.jpg" alt=""></p>
<p>如图所示，碰不上的情况只有四种，其他情况都是发生了碰撞。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> t_1 = div1.offsetTop, </span><br><span class="line">    l_1 = div1.offsetLeft,</span><br><span class="line">    r_1 = div1.offsetLeft + div1.offsetWidth,</span><br><span class="line">    b_1 = div1.offsetTop + div1.offsetHeight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t_0 = div2.offsetTop,</span><br><span class="line">    l_0 = div2.offsetLeft;</span><br><span class="line">    r_0 = div2.offsetLeft + div2.offsetWidth,</span><br><span class="line">    b_0 = div2.offsetTop + div2.offsetHeight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(b_1&lt;t_0 || l_1&gt;r_0 || t_1&gt;b_0 || r_1&lt;l_0)&#123;</span><br><span class="line">    <span class="comment">//未发生碰撞</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//发生碰撞</span></span><br><span class="line">    <span class="comment">//foo() 积分 + 或 -</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="产生随机掉落物体"><a href="#产生随机掉落物体" class="headerlink" title="产生随机掉落物体"></a>产生随机掉落物体</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> factory = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dropTimer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> left = <span class="built_in">Math</span>.random()*(win_width<span class="number">-1.9</span>*rootsizePx); <span class="comment">//距离左边的宽度</span></span><br><span class="line">        <span class="keyword">var</span> delay = <span class="built_in">Math</span>.random()*<span class="number">2000</span>; <span class="comment">//延迟</span></span><br><span class="line">        <span class="keyword">var</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*dropConfig.length); </span><br><span class="line">        <span class="keyword">var</span> imgObj = dropConfig[index]; <span class="comment">// 从物体数组里随机选择一个</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(duration&gt;<span class="number">2000</span>)&#123;</span><br><span class="line">            duration -= <span class="number">20</span>   <span class="comment">//动画执行时间</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> htmlStr = <span class="string">'&lt;img src="'</span>+imgObj.path+<span class="string">'" data-score="'</span>+imgObj.score+<span class="string">'" data-delay="'</span>+delay+<span class="string">'" data-duration="'</span>+duration+<span class="string">'" class="dropDown" style="left:'</span>+left+<span class="string">'px;width:'</span>+imgObj.width+<span class="string">'"/&gt;'</span>;</span><br><span class="line"></span><br><span class="line">        $(<span class="string">"#game"</span>).append(htmlStr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用动画函数</span></span><br><span class="line"></span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="touch-时间绑定"><a href="#touch-时间绑定" class="headerlink" title="touch 时间绑定"></a>touch 时间绑定</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> touchstartFoo = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">    evt.preventDefault();</span><br><span class="line">    $(<span class="string">"#npc"</span>).css(<span class="string">"left"</span>,evt.touches[<span class="number">0</span>].pageX - $(<span class="string">"#npc"</span>)[<span class="number">0</span>].offsetWidth/<span class="number">2</span> + <span class="string">'px'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> touchmoveFoo = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">   evt.preventDefault();</span><br><span class="line">   $(<span class="string">"#npc"</span>).css(<span class="string">"left"</span>,evt.touches[<span class="number">0</span>].pageX - $(<span class="string">"#npc"</span>)[<span class="number">0</span>].offsetWidth/<span class="number">2</span> + <span class="string">'px'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> touchendFoo = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindEvents = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">"#game"</span>).addEventListener(<span class="string">'touchstart'</span>, touchstartFoo, <span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">"#game"</span>).addEventListener(<span class="string">'touchmove'</span>, touchmoveFoo, <span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">"#game"</span>).addEventListener(<span class="string">'touchend'</span>, touchendFoo, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="http://cdn.cqyyy.cn/pic/20190528153034.png" alt=""><br>在微信中，下拉网页会出现上面的情况，如果不想看见这个东西，可以使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'touchstart'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    event.preventDefault()</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>html5</tag>
        <tag>javascript</tag>
        <tag>velocity</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5移动端自适应meta：flexible.js</title>
    <url>/2017/06/20/html5meta/</url>
    <content><![CDATA[<p>根据屏幕分辨率自动设置 <code>meta</code> 标签，在 <code>&lt;html&gt;</code> 上设置基准字体大小。这就是 <code>rem</code> 中的 <code>r</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">win, lib</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer,</span><br><span class="line">        doc     = win.document,</span><br><span class="line">        docElem = doc.documentElement,</span><br><span class="line"></span><br><span class="line">        vpMeta   = doc.querySelector(<span class="string">'meta[name="viewport"]'</span>),</span><br><span class="line">        flexMeta = doc.querySelector(<span class="string">'meta[name="flexible"]'</span>),</span><br><span class="line"> </span><br><span class="line">        dpr   = <span class="number">0</span>,</span><br><span class="line">        scale = <span class="number">0</span>,</span><br><span class="line"> </span><br><span class="line">        flexible = lib.flexible || (lib.flexible = &#123;&#125;);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 设置了 viewport meta</span></span><br><span class="line">    <span class="keyword">if</span> (vpMeta) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">"将根据已有的meta标签来设置缩放比例"</span>);</span><br><span class="line">        <span class="keyword">var</span> initial = vpMeta.getAttribute(<span class="string">"content"</span>).match(<span class="regexp">/initial\-scale=([\d\.]+)/</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (initial) &#123;</span><br><span class="line">            scale = <span class="built_in">parseFloat</span>(initial[<span class="number">1</span>]); <span class="comment">// 已设置的 initialScale</span></span><br><span class="line">            dpr = <span class="built_in">parseInt</span>(<span class="number">1</span> / scale);      <span class="comment">// 设备像素比 devicePixelRatio</span></span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    &lt;!-- more --&gt;</span><br><span class="line">    <span class="comment">// 设置了 flexible Meta</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (flexMeta) &#123;</span><br><span class="line">        <span class="keyword">var</span> flexMetaContent = flexMeta.getAttribute(<span class="string">"content"</span>);</span><br><span class="line">        <span class="keyword">if</span> (flexMetaContent) &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">var</span> initial = flexMetaContent.match(<span class="regexp">/initial\-dpr=([\d\.]+)/</span>),</span><br><span class="line">                maximum = flexMetaContent.match(<span class="regexp">/maximum\-dpr=([\d\.]+)/</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (initial) &#123;</span><br><span class="line">                dpr = <span class="built_in">parseFloat</span>(initial[<span class="number">1</span>]);</span><br><span class="line">                scale = <span class="built_in">parseFloat</span>((<span class="number">1</span> / dpr).toFixed(<span class="number">2</span>));</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (maximum) &#123;</span><br><span class="line">                dpr = <span class="built_in">parseFloat</span>(maximum[<span class="number">1</span>]);</span><br><span class="line">                scale = <span class="built_in">parseFloat</span>((<span class="number">1</span> / dpr).toFixed(<span class="number">2</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// viewport 或 flexible</span></span><br><span class="line">    <span class="comment">// meta 均未设置</span></span><br><span class="line">    <span class="keyword">if</span> (!dpr &amp;&amp; !scale) &#123;</span><br><span class="line">        <span class="comment">// QST</span></span><br><span class="line">        <span class="comment">// 这里的 第一句有什么用 ?</span></span><br><span class="line">        <span class="comment">// 和 Android 有毛关系 ?</span></span><br><span class="line">        <span class="keyword">var</span> u = (win.navigator.appVersion.match(<span class="regexp">/android/gi</span>), win.navigator.appVersion.match(<span class="regexp">/iphone/gi</span>)),</span><br><span class="line">            _dpr = win.devicePixelRatio;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 所以这里似乎是将所有 Android 设备都设置为 1 了</span></span><br><span class="line">        dpr = u ? ( (_dpr &gt;= <span class="number">3</span> &amp;&amp; (!dpr || dpr &gt;= <span class="number">3</span>))</span><br><span class="line">                        ? <span class="number">3</span></span><br><span class="line">                        : (_dpr &gt;= <span class="number">2</span> &amp;&amp; (!dpr || dpr &gt;= <span class="number">2</span>))</span><br><span class="line">                            ? <span class="number">2</span></span><br><span class="line">                            : <span class="number">1</span></span><br><span class="line">                  )</span><br><span class="line">                : <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">        scale = <span class="number">1</span> / dpr;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    docElem.setAttribute(<span class="string">"data-dpr"</span>, dpr);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 插入 viewport meta</span></span><br><span class="line">    <span class="keyword">if</span> (!vpMeta) &#123;</span><br><span class="line">        vpMeta = doc.createElement(<span class="string">"meta"</span>);</span><br><span class="line">         </span><br><span class="line">        vpMeta.setAttribute(<span class="string">"name"</span>, <span class="string">"viewport"</span>);</span><br><span class="line">        vpMeta.setAttribute(<span class="string">"content"</span>,</span><br><span class="line">            <span class="string">"initial-scale="</span> + scale + <span class="string">", maximum-scale="</span> + scale + <span class="string">", minimum-scale="</span> + scale + <span class="string">", user-scalable=no"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (docElem.firstElementChild) &#123;</span><br><span class="line">            docElem.firstElementChild.appendChild(vpMeta)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> div = doc.createElement(<span class="string">"div"</span>);</span><br><span class="line">            div.appendChild(vpMeta);</span><br><span class="line">            doc.write(div.innerHTML);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setFontSize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> winWidth = docElem.getBoundingClientRect().width;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (winWidth / dpr &gt; <span class="number">540</span>) &#123;</span><br><span class="line">            (winWidth = <span class="number">540</span> * dpr);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 根节点 fontSize 根据宽度决定</span></span><br><span class="line">        <span class="keyword">var</span> baseSize = winWidth / <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line">        docElem.style.fontSize = baseSize + <span class="string">"px"</span>;</span><br><span class="line">        flexible.rem = win.rem = baseSize;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 调整窗口时重置</span></span><br><span class="line">    win.addEventListener(<span class="string">"resize"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(setFontSize, <span class="number">300</span>);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line"> </span><br><span class="line">     </span><br><span class="line">    <span class="comment">// orientationchange 时也需要重算下吧</span></span><br><span class="line">    win.addEventListener(<span class="string">"orientationchange"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(setFontSize, <span class="number">300</span>);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// pageshow</span></span><br><span class="line">    <span class="comment">// keyword: 倒退 缓存相关</span></span><br><span class="line">    win.addEventListener(<span class="string">"pageshow"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e.persisted) &#123;</span><br><span class="line">            clearTimeout(timer);</span><br><span class="line">            timer = setTimeout(setFontSize, <span class="number">300</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 设置基准字体</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"complete"</span> === doc.readyState) &#123;</span><br><span class="line">        doc.body.style.fontSize = <span class="number">12</span> * dpr + <span class="string">"px"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        doc.addEventListener(<span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            doc.body.style.fontSize = <span class="number">12</span> * dpr + <span class="string">"px"</span>;</span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    setFontSize();</span><br><span class="line"> </span><br><span class="line">    flexible.dpr = win.dpr = dpr;</span><br><span class="line"> </span><br><span class="line">    flexible.refreshRem = setFontSize;</span><br><span class="line"> </span><br><span class="line">    flexible.rem2px = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c = <span class="built_in">parseFloat</span>(d) * <span class="keyword">this</span>.rem;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"string"</span> == <span class="keyword">typeof</span> d &amp;&amp; d.match(<span class="regexp">/rem$/</span>)) &#123;</span><br><span class="line">            c += <span class="string">"px"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    flexible.px2rem = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c = <span class="built_in">parseFloat</span>(d) / <span class="keyword">this</span>.rem;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"string"</span> == <span class="keyword">typeof</span> d &amp;&amp; d.match(<span class="regexp">/px$/</span>)) &#123;</span><br><span class="line">            c += <span class="string">"rem"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="built_in">window</span>.lib || (<span class="built_in">window</span>.lib = &#123;&#125;));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>html5</category>
      </categories>
      <tags>
        <tag>html5</tag>
        <tag>javascript</tag>
        <tag>metainfo</tag>
      </tags>
  </entry>
  <entry>
    <title>ios 网页滚动时卡顿</title>
    <url>/2018/12/02/ios%20scroll/</url>
    <content><![CDATA[<p>ios系统微信浏览器、safari浏览器中h5页面上拉下滑导致悬浮层脱离窗口的解决方法</p>
<p>很大原因是因为设置了 </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>删除面的css.</p>
<p>再加上：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">  <span class="attribute">-webkit-overflow-scrolling</span>: touch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>-webkit-overflow-scrolling</code>: 属性控制元素在移动设备上是否使用滚动回弹效果.</p>
<ol>
<li><code>auto</code><br>使用普通滚动, 当手指从触摸屏上移开，滚动会立即停止。</li>
<li><code>touch</code><br>具有回弹效果的滚动，开启硬件加速。</li>
</ol>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 原型及原型链</title>
    <url>/2019/05/12/javascript%20%E5%8E%9F%E5%9E%8B%E5%8F%8A%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<p><img data-src="http://cdn.cqyyy.cn/pic/20190723165723.png" alt=""></p>
<a id="more"></a>

<h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><p>JS是面对对象的编程语言，只不过它实现面对对象的思路是基于原型 <code>prototype</code>,而不是类。这种思路也叫对象关联（Object Link Other Object），即在对象上直接映射那种真实世界的关系（如继承）</p>
<h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><p>在JS中，对象创建的方法有很多种：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">'z'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'z'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Foo()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'z'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Foo()</span><br></pre></td></tr></table></figure>
<p>ES6通过引入 <code>class</code>, <code>extends</code> 等关键字，以一种语法糖的形式把构造函数包装成类的概念，更便于理解。是希望开发者不再花精力去关注原型以及原型链，也充分说明原型的设计意图和类是一样的。</p>
<h4 id="原型及原型链"><a href="#原型及原型链" class="headerlink" title="原型及原型链"></a>原型及原型链</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'z'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Foo()</span><br><span class="line"></span><br><span class="line">obj.__proto__ === Foo.prototype <span class="comment">// true</span></span><br><span class="line">obj.__proto__.constructor === Foo</span><br><span class="line">obj.constructor === Foo <span class="comment">// true 构造函数</span></span><br><span class="line">Foo.prototype.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>: <span class="string">'z'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(a)</span><br><span class="line"></span><br><span class="line">obj.__proto__  === a <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript位运算</title>
    <url>/2019/04/22/javascript%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h4 id="按位与-amp"><a href="#按位与-amp" class="headerlink" title="按位与 (&amp;)"></a>按位与 (&amp;)</h4><p>知道 <code>&amp;&amp;</code> 运算符，两个为真才为真，<code>&amp;</code> 类似，作用于二进制数，两个数为1时，返回1。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例如： 1 &amp; 3 = 1，过程如下：</span></span><br><span class="line"><span class="comment">//    0 0 1</span></span><br><span class="line"><span class="comment">//    0 1 1</span></span><br><span class="line"><span class="comment">//   ————————</span></span><br><span class="line"><span class="comment">//    0 0 1</span></span><br></pre></td></tr></table></figure>
<p>判断奇数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((n % <span class="number">2</span>) === <span class="number">1</span>) <span class="comment">// 是奇数</span></span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) <span class="comment">// 是奇数</span></span><br></pre></td></tr></table></figure>

<h4 id="按位或"><a href="#按位或" class="headerlink" title="按位或 (|)"></a>按位或 (|)</h4><p><code>|</code> 和 <code>||</code> 类似，只要两个数中有一个数为1，结果就为1，其他则为0。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例如： 1 | 3 = 3，过程如下：</span></span><br><span class="line"><span class="comment">//    0 0 1</span></span><br><span class="line"><span class="comment">//    0 1 1</span></span><br><span class="line"><span class="comment">//   ————————</span></span><br><span class="line"><span class="comment">//    0 1 1</span></span><br></pre></td></tr></table></figure>
<p>向下取整：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.floor(<span class="number">2.8</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="number">2.8</span> | <span class="number">0</span> <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>原理：其实浮点数是不支持位运算的，所以会先把1.1转成整数1再进行位运算，就好像是对浮点数向下求整。所以1|0的结果就是1。</p>
<h4 id="按位非"><a href="#按位非" class="headerlink" title="按位非 (~)"></a>按位非 (~)</h4><p>按位非就是求二进制的反码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">~<span class="number">1</span> <span class="comment">//-2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 00000000000000000000000000000001</span></span><br><span class="line"><span class="comment">// —————————————————————————————————</span></span><br><span class="line"><span class="comment">// 11111111111111111111111111111110</span></span><br></pre></td></tr></table></figure>
<p>js中的数字默认是有符号的。有符号的32位二进制的最高位也就是第一位数字代表着正负，1代表负数，0代表整数。<br>负数的二进制转化为十进制：符号位不变，其他位取反加1。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (str.indexOf(<span class="string">'a'</span>) &gt;= <span class="number">0</span>) &#123;<span class="comment">//...&#125;</span></span><br><span class="line"><span class="keyword">if</span> (~str.indexOf(<span class="string">'a'</span>)) &#123;<span class="comment">//...&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="按位异或"><a href="#按位异或" class="headerlink" title="按位异或 (^)"></a>按位异或 (^)</h4><p>按位异或是两个数中只有一个1时返回1，其他情况返回0。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> ^ <span class="number">3</span> = <span class="number">2</span></span><br><span class="line"><span class="comment">//   0 0 0 1</span></span><br><span class="line"><span class="comment">//   0 0 1 1</span></span><br><span class="line"><span class="comment">// ———————————</span></span><br><span class="line"><span class="comment">//   0 0 1 0</span></span><br></pre></td></tr></table></figure>
<p>一个数异或自己 = 0，一个数异或 0 等于本身，<a href="https://leetcode-cn.com/problems/single-number/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/single-number/</a></p>
<h4 id="有符号左移-lt-lt"><a href="#有符号左移-lt-lt" class="headerlink" title="有符号左移 (&lt;&lt;)"></a>有符号左移 (&lt;&lt;)</h4><p>有符号左移会将32位二进制数的所有位向左移动指定位数<br>A &lt;&lt; B，表示把A转化为二进制后向左移动B位（在末尾添加B个0）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> &lt;&lt; <span class="number">5</span> = <span class="number">64</span></span><br><span class="line"><span class="comment">//   10 后面加 5 个 0， 10 00000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2的4次方</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &lt;&lt; <span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>

<h4 id="有符号右移-gt-gt"><a href="#有符号右移-gt-gt" class="headerlink" title="有符号右移 (&gt;&gt;)"></a>有符号右移 (&gt;&gt;)</h4><p>有符号右移会将32位二进制数的所有位向右移动指定位数。<br>A &gt;&gt; B，表示把A转化为二进制后向右移动B位（删除末尾的B位）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">64</span> &gt;&gt; <span class="number">5</span> = <span class="number">2</span></span><br><span class="line"><span class="comment">// 64的二进制 1000000</span></span><br><span class="line"><span class="comment">// 去掉5个0： 10， 十进制为 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求一个数的1/2 (偶数)</span></span><br><span class="line"><span class="number">64</span> &gt;&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="无符号右移-gt-gt-gt"><a href="#无符号右移-gt-gt-gt" class="headerlink" title="无符号右移 (&gt;&gt;&gt;)"></a>无符号右移 (&gt;&gt;&gt;)</h4><p>正数的无符号右移与有符号右移结果是一样的。负数的无符号右移会把符号位也一起移动，而且无符号右移会把负数的二进制码当成正数的二进制码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">64</span> &gt;&gt;&gt; <span class="number">5</span> = <span class="number">2</span></span><br><span class="line"><span class="number">-64</span> &gt;&gt;&gt; <span class="number">5</span> = <span class="number">134217726</span></span><br><span class="line"><span class="comment">// -64表示为 -1000000</span></span><br><span class="line"><span class="comment">// 11111111111111111111111111000000</span></span><br><span class="line"><span class="number">-1</span> &gt;&gt;&gt; <span class="number">0</span> = <span class="number">4294967295</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>baidu-doc百度云文档服务</title>
    <url>/2017/09/02/baidu-doc/</url>
    <content><![CDATA[<h4 id="百度云文档服务，在线查看各种文档，移动端友好。"><a href="#百度云文档服务，在线查看各种文档，移动端友好。" class="headerlink" title="百度云文档服务，在线查看各种文档，移动端友好。"></a>百度云文档服务，在线查看各种文档，移动端友好。</h4><p><img data-src="http://cdn.cqyyy.cn/pic/20190528152517.jpg" alt=""><br><img data-src="http://cdn.cqyyy.cn/pic/20190528152516.jpg" alt=""></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>baidu-doc<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    *&#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"reader"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://static.bcedocument.com/reader/v2/doc_reader_v2.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> option = &#123;</span></span><br><span class="line"><span class="actionscript">        docId: <span class="string">"*************"</span>,</span></span><br><span class="line"><span class="actionscript">        token: <span class="string">"TOKEN"</span>,</span></span><br><span class="line"><span class="actionscript">        host: <span class="string">"BCEDOC"</span>,</span></span><br><span class="line"><span class="actionscript">        width: <span class="number">610</span>, <span class="comment">// 文档容器宽度</span></span></span><br><span class="line"><span class="actionscript">        pn: <span class="number">1</span>, <span class="comment">// 定位到第几页，可选</span></span></span><br><span class="line"><span class="actionscript">        ready: <span class="function"><span class="keyword">function</span> <span class="params">(handler)</span> </span>&#123; <span class="comment">// 设置字体大小和颜色, 背景颜色（可设置白天黑夜模式）</span></span></span><br><span class="line">            handler.setFontSize(2);</span><br><span class="line"><span class="actionscript">            handler.setBackgroundColor(<span class="string">"#fff"</span>);</span></span><br><span class="line"><span class="actionscript">            handler.setFontColor(<span class="string">"#000"</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        flip: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123; <span class="comment">// 翻页时回调函数, 可供客户进行统计等</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data.pn);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        fontSize: <span class="string">"big"</span>,</span></span><br><span class="line">        toolbarConf: &#123;</span><br><span class="line"><span class="actionscript">            page: <span class="literal">true</span>, <span class="comment">// 上下翻页箭头图标</span></span></span><br><span class="line"><span class="actionscript">            pagenum: <span class="literal">true</span>, <span class="comment">// 几分之几页</span></span></span><br><span class="line"><span class="actionscript">            full: <span class="literal">true</span>, <span class="comment">// 是否显示全屏图标,点击后全屏</span></span></span><br><span class="line"><span class="actionscript">            copy: <span class="literal">true</span>, <span class="comment">// 是否可以复制文档内容</span></span></span><br><span class="line"><span class="actionscript">            zoom:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">            position: <span class="string">"center"</span>,<span class="comment">// 设置 toolbar中翻页和放大图标的位置(值有left/center)</span></span></span><br><span class="line"><span class="actionscript">        &#125; <span class="comment">//文档顶部工具条配置对象,必选</span></span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Document(<span class="string">"reader"</span>, option);</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>html5</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>ios网页时间NAN</title>
    <url>/2018/10/01/ios%E7%BD%91%E9%A1%B5%E6%97%B6%E9%97%B4NAN/</url>
    <content><![CDATA[<p>使用如下方法计算时间，在Android上正常，在IOS上却<code>NAN</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2018-10-28 23:59:59"</span>).getTime()</span><br></pre></td></tr></table></figure>

<p>解决办法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="string">"2018-10-28 23:59:59"</span></span><br><span class="line"><span class="keyword">var</span> formatDate = date.replace(<span class="regexp">/-/g</span>, <span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(formatDate).getTime()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>wechat H5</tag>
      </tags>
  </entry>
  <entry>
    <title>纯前端方式用js-xlsx导入和导出Excel</title>
    <url>/2018/02/05/js-xlsx/</url>
    <content><![CDATA[<p><code>js-xlsx</code> 导入和导出Excel <code>.xlsx</code> 文件</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>npm install xlsx --save</code></p>
<h4 id="导出Excel"><a href="#导出Excel" class="headerlink" title="导出Excel"></a>导出Excel</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> XLSX <span class="keyword">from</span> <span class="string">'xlsx'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s2ab = <span class="function"><span class="params">s</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(s.length)</span><br><span class="line">  <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buf)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i !== s.length; ++i) &#123;</span><br><span class="line">    view[i] = s.charCodeAt(i) &amp; <span class="number">0xff</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> buf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getCharCol = <span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> s = <span class="string">''</span></span><br><span class="line">  <span class="keyword">let</span> m = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    m = n % <span class="number">26</span> + <span class="number">1</span></span><br><span class="line">    s = <span class="built_in">String</span>.fromCharCode(m + <span class="number">64</span>) + s</span><br><span class="line">    n = (n - m) / <span class="number">26</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> downloadExl = <span class="function">(<span class="params">json, downName, type</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> keyMap = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> json[<span class="number">0</span>]) &#123;</span><br><span class="line">    keyMap.push(k)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> tmpdata = []</span><br><span class="line">  json</span><br><span class="line">    .map(<span class="function">(<span class="params">v, i</span>) =&gt;</span></span><br><span class="line">      keyMap.map(<span class="function">(<span class="params">k, j</span>) =&gt;</span></span><br><span class="line">        <span class="built_in">Object</span>.assign(</span><br><span class="line">          &#123;&#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            v: v[k],</span><br><span class="line">            position:</span><br><span class="line">              (j &gt; <span class="number">25</span> ? getCharCol(j) : <span class="built_in">String</span>.fromCharCode(<span class="number">65</span> + j)) + (i + <span class="number">1</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">    .reduce(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> prev.concat(next))</span><br><span class="line">    .forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">      tmpdata[v.position] = &#123;</span><br><span class="line">        v: v.v</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="keyword">let</span> outputPos = <span class="built_in">Object</span>.keys(tmpdata)</span><br><span class="line">  <span class="keyword">let</span> tmpWB = &#123;</span><br><span class="line">    SheetNames: [<span class="string">'mySheet'</span>],</span><br><span class="line">    Sheets: &#123;</span><br><span class="line">      mySheet: <span class="built_in">Object</span>.assign(&#123;&#125;, tmpdata, &#123;</span><br><span class="line">        <span class="string">'!ref'</span>: outputPos[<span class="number">0</span>] + <span class="string">':'</span> + outputPos[outputPos.length - <span class="number">1</span>]</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> tmpDown = <span class="keyword">new</span> Blob(</span><br><span class="line">    [</span><br><span class="line">      s2ab(</span><br><span class="line">        XLSX.write(tmpWB, &#123;</span><br><span class="line">          bookType: type === <span class="literal">undefined</span> ? <span class="string">'xlsx'</span> : type,</span><br><span class="line">          bookSST: <span class="literal">false</span>,</span><br><span class="line">          type: <span class="string">'binary'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      )</span><br><span class="line">    ],</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">let</span> href = URL.createObjectURL(tmpDown)</span><br><span class="line">  <span class="keyword">let</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">  link.href = href</span><br><span class="line">  link.download = downName + <span class="string">'.xlsx'</span></span><br><span class="line">  link.click()</span><br><span class="line"></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    URL.revokeObjectURL(tmpDown)</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> exportExcel = <span class="function">(<span class="params">json, fileName</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!json[<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> data = [&#123;&#125;]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> json[<span class="number">0</span>]) &#123;</span><br><span class="line">    data[<span class="number">0</span>][k] = k</span><br><span class="line">  &#125;</span><br><span class="line">  data = data.concat(json)</span><br><span class="line">  downloadExl(data, fileName)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> exportExcel</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="导入获取json"><a href="#导入获取json" class="headerlink" title="导入获取json"></a>导入获取json</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> fixdata = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> o = <span class="string">''</span></span><br><span class="line">  <span class="keyword">let</span> l = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> w = <span class="number">10240</span></span><br><span class="line">  <span class="keyword">for</span> (; l &lt; data.byteLength / w; ++l) &#123;</span><br><span class="line">    o += <span class="built_in">String</span>.fromCharCode.apply(</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(data.slice(l * w, l * w + w))</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  o += <span class="built_in">String</span>.fromCharCode.apply(<span class="literal">null</span>, <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(data.slice(l * w)))</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> importExcel = <span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> wb</span><br><span class="line">  <span class="keyword">var</span> rABS = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">  <span class="keyword">if</span> (rABS) &#123;</span><br><span class="line">    reader.readAsArrayBuffer(file)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reader.readAsBinaryString(file)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> data = e.target.result</span><br><span class="line">      <span class="keyword">if</span> (rABS) &#123;</span><br><span class="line">        wb = XLSX.read(btoa(fixdata(data)), &#123;</span><br><span class="line">          type: <span class="string">'base64'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        wb = XLSX.read(data, &#123;</span><br><span class="line">          type: <span class="string">'binary'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> json = XLSX.utils.sheet_to_json(wb.Sheets[wb.SheetNames[<span class="number">0</span>]])</span><br><span class="line">      resolve(json)</span><br><span class="line">    &#125;</span><br><span class="line">    reader.onerror = reject</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> importExcel</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>excel</tag>
        <tag>js-xlsx</tag>
      </tags>
  </entry>
  <entry>
    <title>jssdk微信分享出现的奇怪问题</title>
    <url>/2020/07/01/jssdk%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E5%87%BA%E7%8E%B0%E7%9A%84%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>做一个宣传H5，有微信分享功能。</p>
<p>前端开发采用技术：vue vue-router vant</p>
<p>电脑上开发测试一切正常，分享正常</p>
<p>Android ok</p>
<p>苹果上微信分享死活不行， 99%的情况下分享不起。有时刷新一下可以。</p>
<p>调试：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">  debug: <span class="literal">true</span>,</span><br><span class="line">  appId: appId,</span><br><span class="line">  timestamp: timestamp,</span><br><span class="line">  nonceStr: nonceStr,</span><br><span class="line">  signature: signature,</span><br><span class="line">  jsApiList: [</span><br><span class="line">    <span class="string">"updateTimelineShareData"</span>,</span><br><span class="line">    <span class="string">"updateAppMessageShareData"</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">wx.error(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error)</span><br><span class="line">  <span class="keyword">this</span>.$toast(<span class="built_in">JSON</span>.stringify(error))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在苹果手机上报错：</p>
<p><code>wxconfig</code> 大多数时候提示 <code>invalid signature</code>.</p>
<p><code>{&quot;errMsg&quot;:&quot;updateTimelineShareData:fail, the permission value is offline verifying&quot;}</code><br><code>{&quot;errMsg&quot;:&quot;updateAppMessageShareData:fail, the permission value is offline verifying&quot;}</code></p>
<p>解决方案：</p>
<p>实际上签名数据没有错误，是 <code>vue-router</code> 跳转页面的锅。</p>
<p>修改上一个页面 <code>this.$router.push({name: xxxx})</code> 为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">location.href = <span class="string">'full url'</span></span><br></pre></td></tr></table></figure>
<p>问题解决。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>javascript发布订阅EventEmitter</title>
    <url>/2019/07/13/jsvascript%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>阅读 <code>vue1.0</code> 源码时看到的发布订阅代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> slice = [].slice</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Emitter</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._ctx = ctx || <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> EmitterProto = Emitter.prototype</span><br><span class="line"></span><br><span class="line">EmitterProto.on = <span class="function"><span class="keyword">function</span> (<span class="params">event, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._cbs = <span class="keyword">this</span>._cbs || &#123;&#125;</span><br><span class="line">  ;(<span class="keyword">this</span>._cbs[event] = <span class="keyword">this</span>._cbs[event] || []).push(fn)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EmitterProto.once = <span class="function"><span class="keyword">function</span> (<span class="params">event, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">this</span>._cbs = <span class="keyword">this</span>._cbs || &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">on</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    self.off(event, on)</span><br><span class="line">    fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  on.fn = fn</span><br><span class="line">  <span class="keyword">this</span>.on(event, on)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EmitterProto.off = <span class="function"><span class="keyword">function</span> (<span class="params">event, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._cbs = <span class="keyword">this</span>._cbs || &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// all</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">arguments</span>.length) &#123;</span><br><span class="line">    <span class="keyword">this</span>._cbs = &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// specific event</span></span><br><span class="line">  <span class="keyword">var</span> callbacks = <span class="keyword">this</span>._cbs[event]</span><br><span class="line">  <span class="keyword">if</span> (!callbacks) <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove all handlers</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>._cbs[event]</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove specific handler</span></span><br><span class="line">  <span class="keyword">var</span> cb</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; callbacks.length; i++) &#123;</span><br><span class="line">    cb = callbacks[i]</span><br><span class="line">    <span class="keyword">if</span> (cb === fn || cb.fn === fn) &#123;</span><br><span class="line">      callbacks.splice(i, <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  The internal, faster emit with fixed amount of arguments</span></span><br><span class="line"><span class="comment"> *  using Function.call</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">EmitterProto.emit = <span class="function"><span class="keyword">function</span> (<span class="params">event, a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._cbs = <span class="keyword">this</span>._cbs || &#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> callbacks = <span class="keyword">this</span>._cbs[event]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (callbacks) &#123;</span><br><span class="line">    callbacks = callbacks.slice(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = callbacks.length; i &lt; len; i++) &#123;</span><br><span class="line">      callbacks[i].call(<span class="keyword">this</span>._ctx, a, b, c)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  The external emit using Function.apply</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">EmitterProto.applyEmit = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._cbs = <span class="keyword">this</span>._cbs || &#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> callbacks = <span class="keyword">this</span>._cbs[event]</span><br><span class="line">  <span class="keyword">var</span> args</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (callbacks) &#123;</span><br><span class="line">    callbacks = callbacks.slice(<span class="number">0</span>)</span><br><span class="line">    args = slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = callbacks.length; i &lt; len; i++) &#123;</span><br><span class="line">      callbacks[i].apply(<span class="keyword">this</span>._ctx, args)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>js运算符的优先级</title>
    <url>/2019/09/30/js%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    <content><![CDATA[<p>运算符的优先级决定了表达式中运算执行的先后顺序，优先级高的运算符最先被执行。</p>
<p>example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> &gt; <span class="number">2</span> &amp;&amp; <span class="number">2</span> &gt; <span class="number">1</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span> &gt; <span class="number">2</span> &gt; <span class="number">1</span> <span class="comment">// 因为 3 &gt; 2 是 true，并且 true &gt; 1 is false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.getName() <span class="comment">//2</span></span><br><span class="line">getName() <span class="comment">// 4</span></span><br><span class="line">Foo().getName() <span class="comment">// 1</span></span><br><span class="line">getName() <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">new</span> Foo.getName() <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">new</span> Foo().getName() <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> Foo().getName() <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<p>输出： 2-4-1-1-2-3-3</p>
<p>优先级表：</p>
<table>
<thead>
<tr>
<th>优先级</th>
<th>运算类型</th>
<th>关联性</th>
<th>运算符</th>
</tr>
</thead>
<tbody><tr>
<td>20</td>
<td>圆括号</td>
<td>n/a（不相关）</td>
<td>( … )</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>收藏几个漂亮的loading效果</title>
    <url>/2017/06/14/loading/</url>
    <content><![CDATA[<p> <a href="https://qhx0807.github.io/loading/" target="_blank" rel="noopener">demo地址</a></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs生成二维码&amp;图像拼接</title>
    <url>/2019/07/21/nodejs%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81&amp;%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>场景背景：平台上有几百个商户，每个商户有一个收款二维码，以前都是员工在后台挨个点击下载二维码，然后给UI做成收款码物料。<br>前段时间需要紧急给商户更换二维码，这种重复性的劳动效率太低，于是写个脚本批量生成二维码。</p>
<h4 id="生成二维码"><a href="#生成二维码" class="headerlink" title="生成二维码"></a>生成二维码</h4><p>每个二维码的链接类似，只是参数有变化。 生成二维码库： <a href="https://github.com/alexeyten/qr-image" target="_blank" rel="noopener">qr-image</a></p>
<p>使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> qr = <span class="built_in">require</span>(<span class="string">'qr-image'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> qrImg = qr.image(text, &#123; <span class="attr">ec_level</span>: <span class="string">'H'</span>, <span class="attr">size</span>: <span class="number">10</span>, <span class="attr">type</span>: <span class="string">'png'</span>, <span class="attr">margin</span>: <span class="number">1</span> &#125;)</span><br><span class="line">qrImg.pipe(fs.createWriteStream(<span class="string">'./output/'</span> + item.name + <span class="string">'.png'</span>))</span><br></pre></td></tr></table></figure>
<p>配置项：</p>
<ul>
<li><code>ec_level</code> 二维码质量 L, M, Q, H, 默认 M</li>
<li><code>type</code> 图片格式 <code>png</code>, <code>svg</code>, <code>pdf</code>, <code>eps</code></li>
<li><code>size</code> png/svg 格式下图片大小</li>
<li><code>margin</code> 图片白边</li>
</ul>
<h4 id="GraphicsMagick-环境安装"><a href="#GraphicsMagick-环境安装" class="headerlink" title="GraphicsMagick 环境安装"></a>GraphicsMagick 环境安装</h4><p><code>GraphicsMagick</code> 是一个短小精悍的的图片处理工具和库集合。</p>
<p>下载地址：<a href="https://sourceforge.net/projects/graphicsmagick/files/" target="_blank" rel="noopener">GraphicsMagick</a>，我的电脑是windows系统，下载 graphicsmagick-binaries文件然后安装。</p>
<p><code>gm</code>: GraphicsMagick for node. <a href="http://aheckmann.github.io/gm/" target="_blank" rel="noopener">Github</a>，<a href="http://aheckmann.github.io/gm/" target="_blank" rel="noopener">官方文档</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> gm = <span class="built_in">require</span>(<span class="string">'gm'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// resize and remove EXIF profile data</span></span><br><span class="line">gm(<span class="string">'./test.png'</span>)</span><br><span class="line">  .resize(<span class="number">240</span>, <span class="number">240</span>)</span><br><span class="line">  .noProfile()</span><br><span class="line">  .write(<span class="string">'./dist/resize.png'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) <span class="built_in">console</span>.log(<span class="string">'done'</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>检测网页过期(PC端)</title>
    <url>/2017/09/12/outtime/</url>
    <content><![CDATA[<p>用于检测用户长时间未操作，页面过期，监听鼠标键盘事件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">var</span> x, y;</span><br><span class="line"><span class="keyword">var</span> outTime=<span class="number">5</span>; <span class="comment">//5分钟时间</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.setInterval(go, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">if</span> (count == outTime*<span class="number">60</span>) &#123;</span><br><span class="line">        alert(<span class="string">"长时间未进行操作!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x1 = event.clientX;</span><br><span class="line">    <span class="keyword">var</span> y1 = event.clientY;</span><br><span class="line">    <span class="keyword">if</span> (x != x1 || y != y1) &#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x = x1;</span><br><span class="line">    y = y1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>html5</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>python根据商户自动生成收款码</title>
    <url>/2019/09/22/python%E6%A0%B9%E6%8D%AE%E5%95%86%E6%88%B7%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%94%B6%E6%AC%BE%E7%A0%81/</url>
    <content><![CDATA[<p>记录 <code>pillow</code> 操作图片的一些笔记</p>
<h4 id="图片上添加文字"><a href="#图片上添加文字" class="headerlink" title="图片上添加文字"></a>图片上添加文字</h4><p>需要下载一款支持中文的字体，如微软雅黑</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">font_size = <span class="number">55</span></span><br><span class="line">font = ImageFont.truetype(<span class="string">'./base/font.ttf'</span>, size=font_size)</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text_to_img</span><span class="params">(text)</span>:</span></span><br><span class="line">    target = Image.open(<span class="string">'./base/02.jpg'</span>)</span><br><span class="line">    draw = ImageDraw.Draw(target)</span><br><span class="line">    text_width = font.getsize(text) <span class="comment"># 获取文字宽度</span></span><br><span class="line">    x = int((<span class="number">1217</span> - text_width[<span class="number">0</span>]) / <span class="number">2</span>)</span><br><span class="line">    draw.text(xy=(x, <span class="number">19</span>), text=text, font=font, fill=<span class="string">'black'</span>)</span><br><span class="line">    <span class="keyword">return</span> target</span><br></pre></td></tr></table></figure>

<p>为了让文字居中，获取文字宽度</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">text_width = font.getsize(text)</span><br></pre></td></tr></table></figure>


<h4 id="从json文件中读取数据"><a href="#从json文件中读取数据" class="headerlink" title="从json文件中读取数据"></a>从json文件中读取数据</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> d:</span><br><span class="line">    data = json.load(d)</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure>

<h4 id="生成二维码-并放置到图片中"><a href="#生成二维码-并放置到图片中" class="headerlink" title="生成二维码 并放置到图片中"></a>生成二维码 并放置到图片中</h4><p><code>python-qrcode</code> </p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> qrcode</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">qrcode_to_img</span><span class="params">(diviceid, city)</span>:</span></span><br><span class="line">    target = Image.open(<span class="string">'./base/03.jpg'</span>)</span><br><span class="line">    url = code_url.format(diviceid, city)</span><br><span class="line">    qr = qrcode.QRCode(</span><br><span class="line">        version=<span class="number">10</span>,</span><br><span class="line">        error_correction=qrcode.constants.ERROR_CORRECT_M,</span><br><span class="line">        box_size=<span class="number">11</span>,</span><br><span class="line">        border=<span class="number">2</span></span><br><span class="line">    )</span><br><span class="line">    qr.add_data(url)</span><br><span class="line">    qr.make(fit=<span class="literal">True</span>)</span><br><span class="line">    img = qr.make_image(fill_color=<span class="string">"black"</span>, back_color=<span class="string">"white"</span>)</span><br><span class="line">    img = img.resize((<span class="number">668</span>, <span class="number">668</span>))</span><br><span class="line">    target.paste(img, (<span class="number">274</span>, <span class="number">0</span>, img.width + <span class="number">274</span>, img.height))</span><br><span class="line">    <span class="keyword">return</span> target</span><br></pre></td></tr></table></figure>

<h4 id="将图片拼接起来"><a href="#将图片拼接起来" class="headerlink" title="将图片拼接起来"></a>将图片拼接起来</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combine_img</span><span class="params">(name, diviceid, city)</span>:</span></span><br><span class="line">    target = Image.new(<span class="string">'RGB'</span>, (<span class="number">1217</span>, <span class="number">1797</span>), <span class="string">'white'</span>)</span><br><span class="line">    img1 = Image.open(<span class="string">'./base/01.jpg'</span>)</span><br><span class="line">    img2 = text_to_img(name)</span><br><span class="line">    img3 = qrcode_to_img(diviceid, city)</span><br><span class="line">    img4 = Image.open(<span class="string">'./base/04.jpg'</span>)</span><br><span class="line">    target.paste(img1, (<span class="number">0</span>, <span class="number">0</span>, img1.width, img1.height))</span><br><span class="line">    target.paste(img2, (<span class="number">0</span>, img1.height, img2.width, img2.height + img1.height))</span><br><span class="line">    target.paste(img3, (<span class="number">0</span>, img1.height + img2.height, img3.width, img1.height + img2.height + img3.height))</span><br><span class="line">    target.paste(img4, (<span class="number">0</span>, img1.height + img2.height + img3.height, img4.width, img1.height + img2.height + img3.height + img4.height))</span><br><span class="line">    target.save(<span class="string">'./img/'</span> + name + <span class="string">'.jpg'</span>)</span><br><span class="line">    print(name + <span class="string">'：图片保存成功'</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>react hooks模拟类组件的生命周期函数</title>
    <url>/2019/11/02/react%20hooks%E6%A8%A1%E6%8B%9F%E7%B1%BB%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p>
<h4 id="模拟整个生命周期中只运行一次的方法"><a href="#模拟整个生命周期中只运行一次的方法" class="headerlink" title="模拟整个生命周期中只运行一次的方法"></a>模拟整个生命周期中只运行一次的方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">useMemo(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// execute only once</span></span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure>

<h4 id="模拟-shouldComponentUpdate"><a href="#模拟-shouldComponentUpdate" class="headerlink" title="模拟 shouldComponentUpdate"></a>模拟 <code>shouldComponentUpdate</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> areEqual = <span class="function">(<span class="params">prevProps, nextProps</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 返回结果和shouldComponentUpdate正好相反</span></span><br><span class="line">  <span class="comment">// 访问不了state</span></span><br><span class="line">&#125;</span><br><span class="line">React.memo(Foo, areEqual)</span><br></pre></td></tr></table></figure>

<h4 id="模拟-componentDidMount"><a href="#模拟-componentDidMount" class="headerlink" title="模拟 componentDidMount"></a>模拟 <code>componentDidMount</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这里在mount时执行一次</span></span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure>

<h4 id="模拟-componentDidUnmount"><a href="#模拟-componentDidUnmount" class="headerlink" title="模拟 componentDidUnmount"></a>模拟 <code>componentDidUnmount</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这里在mount时执行一次</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这里在unmount时执行一次</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure>

<h4 id="模拟-componentDidUpdate"><a href="#模拟-componentDidUpdate" class="headerlink" title="模拟 componentDidUpdate"></a>模拟 <code>componentDidUpdate</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mounted = useRef()</span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!mounted.current) &#123;</span><br><span class="line">    mounted.current = <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 这里只在update是执行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>hoots</tag>
      </tags>
  </entry>
  <entry>
    <title>thiskjs中jwt鉴权，session保存用户信息</title>
    <url>/2018/11/20/thiskjs%E4%B8%ADjwt%E9%89%B4%E6%9D%83/</url>
    <content><![CDATA[<p>JWT 在 ThinkJS 中的实践, 使用 <code>think-session-jwt</code><br>thinkjs 中提供了session 扩展，可以很方便的读写 <code>session</code> </p>
<h4 id="修改-Adapter-配置文件-src-config-adapter-js"><a href="#修改-Adapter-配置文件-src-config-adapter-js" class="headerlink" title="修改 Adapter 配置文件 src/config/adapter.js"></a>修改 Adapter 配置文件 <code>src/config/adapter.js</code></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> JWTSession = <span class="built_in">require</span>(<span class="string">'think-session-jwt'</span>)</span><br><span class="line"></span><br><span class="line">exports.session = &#123;</span><br><span class="line">  type: <span class="string">'jwt'</span>,</span><br><span class="line">  common: &#123;</span><br><span class="line">    cookie: &#123;</span><br><span class="line">      name: <span class="string">'thinkjs'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  jwt: &#123;</span><br><span class="line">    handle: JWTSession,</span><br><span class="line">    secret: <span class="string">'where amazing happens'</span>, <span class="comment">// secret is reqired</span></span><br><span class="line">    tokenType: <span class="string">'header'</span>, <span class="comment">// ['query', 'body', 'header', 'cookie'], 'cookie' is default</span></span><br><span class="line">    tokenName: <span class="string">'authorization'</span>, <span class="comment">// 'jwt' is default</span></span><br><span class="line">    sign: &#123; <span class="attr">expiresIn</span>: <span class="number">60</span> * <span class="number">60</span> * <span class="number">12</span> &#125;,</span><br><span class="line">    verify: &#123;&#125;,</span><br><span class="line">    verifyCallback: <span class="function"><span class="params">any</span> =&gt;</span> &#123;&#125; <span class="comment">// 验证失败的回调函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="用户登录种下-session-src-controller-login-js"><a href="#用户登录种下-session-src-controller-login-js" class="headerlink" title="用户登录种下 session src/controller/login.js"></a>用户登录种下 session <code>src/controller/login.js</code></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> indexAction () &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = <span class="keyword">this</span>.post()</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">this</span>.model(<span class="string">'user'</span>)</span><br><span class="line">    <span class="keyword">const</span> userInfo = <span class="keyword">await</span> user.where(&#123; <span class="attr">name</span>: username &#125;).find()</span><br><span class="line">    <span class="keyword">if</span> (think.isEmpty(userInfo)) <span class="keyword">return</span> <span class="keyword">this</span>.fail(<span class="string">'用户不存在'</span>)</span><br><span class="line">    <span class="keyword">if</span> (userInfo.password !== password) <span class="keyword">return</span> <span class="keyword">this</span>.fail(<span class="string">'密码不正确'</span>)</span><br><span class="line">    <span class="keyword">delete</span> userInfo.password</span><br><span class="line">    <span class="keyword">const</span> token = <span class="keyword">await</span> <span class="keyword">this</span>.session(<span class="string">'userInfo'</span>, userInfo)</span><br><span class="line">    <span class="keyword">this</span>.success(&#123;<span class="attr">token</span>: token, ...userInfo &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在其他-Action-中使用"><a href="#在其他-Action-中使用" class="headerlink" title="在其他 Action 中使用"></a>在其他 Action 中使用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userInfo = <span class="keyword">await</span> <span class="keyword">this</span>.session(<span class="string">'userInfo'</span>)</span><br><span class="line"><span class="keyword">if</span> (userInfo) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>thinkjs</tag>
        <tag>node</tag>
        <tag>jwt</tag>
      </tags>
  </entry>
  <entry>
    <title>timeago.js 使用笔记&amp;源码阅读分析</title>
    <url>/2017/06/09/timeago/</url>
    <content><![CDATA[<blockquote>
<p>timeago.js <a href="https://github.com/mzabriskie/axios/" target="_blank" rel="noopener">官方文档</a> 是一个非常简洁、轻量级、不到 2kb 的很简洁的 Javascript 库，用来将 datetime 时间转化成类似于*** 时间前的描述字符串，例如：“3小时前”。</p>
</blockquote>
<p>支持自动实时更新</p>
<h5 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/timeago.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> timeago <span class="keyword">from</span> <span class="string">'timeago.js'</span>;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">var</span> timeago = <span class="built_in">require</span>(<span class="string">"timeago.js"</span>);</span><br></pre></td></tr></table></figure>

<h5 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"need_to_be_rendered"</span> <span class="attr">data-timeago</span>=<span class="string">"2016-06-30 09:20:00"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timeagoInstance = timeago();</span><br><span class="line">timeagoInstance.render(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.need_to_be_rendered'</span>), <span class="string">'zh_CN'</span>);</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h5 id="其他使用方式"><a href="#其他使用方式" class="headerlink" title="其他使用方式"></a>其他使用方式</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timeago = timeago();</span><br><span class="line">timeago.format(<span class="string">'2017-06-09s'</span>)</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">timeago().format(<span class="built_in">Date</span>.now() - <span class="number">11</span> * <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>); <span class="comment">// will get '11 hours ago'</span></span><br></pre></td></tr></table></figure>

<h5 id="源码-250lins"><a href="#源码-250lins" class="headerlink" title="源码(250lins)"></a>源码(250lins)</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2016 hustcc</span></span><br><span class="line"><span class="comment"> * License: MIT</span></span><br><span class="line"><span class="comment"> * Version: v3.0.0</span></span><br><span class="line"><span class="comment"> * https://github.com/hustcc/timeago.js</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="comment">/* jshint expr: true */</span></span><br><span class="line">!<span class="function"><span class="keyword">function</span> (<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">'object'</span> &amp;&amp; <span class="built_in">module</span>.exports) &#123;</span><br><span class="line">    <span class="built_in">module</span>.exports = factory(root); <span class="comment">// nodejs support</span></span><br><span class="line">    <span class="built_in">module</span>.exports[<span class="string">'default'</span>] = <span class="built_in">module</span>.exports; <span class="comment">// es6 support</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    root.timeago = factory(root);</span><br><span class="line">&#125;(<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> ? <span class="built_in">window</span> : <span class="keyword">this</span>,</span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> indexMapEn = <span class="string">'second_minute_hour_day_week_month_year'</span>.split(<span class="string">'_'</span>),</span><br><span class="line">    indexMapZh = <span class="string">'秒_分钟_小时_天_周_月_年'</span>.split(<span class="string">'_'</span>),</span><br><span class="line">    <span class="comment">// build-in locales: en &amp; zh_CN</span></span><br><span class="line">    locales = &#123;</span><br><span class="line">      <span class="string">'en'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">number, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index === <span class="number">0</span>) <span class="keyword">return</span> [<span class="string">'just now'</span>, <span class="string">'right now'</span>];</span><br><span class="line">        <span class="keyword">var</span> unit = indexMapEn[<span class="built_in">parseInt</span>(index / <span class="number">2</span>)];</span><br><span class="line">        <span class="keyword">if</span> (number &gt; <span class="number">1</span>) unit += <span class="string">'s'</span>;</span><br><span class="line">        <span class="keyword">return</span> [number + <span class="string">' '</span> + unit + <span class="string">' ago'</span>, <span class="string">'in '</span> + number + <span class="string">' '</span> + unit];</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">'zh_CN'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">number, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index === <span class="number">0</span>) <span class="keyword">return</span> [<span class="string">'刚刚'</span>, <span class="string">'片刻后'</span>];</span><br><span class="line">        <span class="keyword">var</span> unit = indexMapZh[<span class="built_in">parseInt</span>(index / <span class="number">2</span>)];</span><br><span class="line">        <span class="keyword">return</span> [number + unit + <span class="string">'前'</span>, number + unit + <span class="string">'后'</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// second, minute, hour, day, week, month, year(365 days)</span></span><br><span class="line">    SEC_ARRAY = [<span class="number">60</span>, <span class="number">60</span>, <span class="number">24</span>, <span class="number">7</span>, <span class="number">365</span>/<span class="number">7</span>/<span class="number">12</span>, <span class="number">12</span>],</span><br><span class="line">    SEC_ARRAY_LEN = <span class="number">6</span>,</span><br><span class="line">    ATTR_DATETIME = <span class="string">'datetime'</span>,</span><br><span class="line">    ATTR_DATA_TID = <span class="string">'data-tid'</span>,</span><br><span class="line">    timers = &#123;&#125;; <span class="comment">// real-time render timers</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// format Date / string / timestamp to Date instance.</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">toDate</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (input <span class="keyword">instanceof</span> <span class="built_in">Date</span>) <span class="keyword">return</span> input;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(input)) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(toInt(input));</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^\d+$/</span>.test(input)) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(toInt(input));</span><br><span class="line">    input = (input || <span class="string">''</span>).trim().replace(<span class="regexp">/\.\d+/</span>, <span class="string">''</span>) <span class="comment">// remove milliseconds</span></span><br><span class="line">      .replace(<span class="regexp">/-/</span>, <span class="string">'/'</span>).replace(<span class="regexp">/-/</span>, <span class="string">'/'</span>)</span><br><span class="line">      .replace(<span class="regexp">/(\d)T(\d)/</span>, <span class="string">'$1 $2'</span>).replace(<span class="regexp">/Z/</span>, <span class="string">' UTC'</span>) <span class="comment">// 2017-2-5T3:57:52Z -&gt; 2017-2-5 3:57:52UTC</span></span><br><span class="line">      .replace(<span class="regexp">/([\+\-]\d\d)\:?(\d\d)/</span>, <span class="string">' $1$2'</span>); <span class="comment">// -04:00 -&gt; -0400</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(input);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// change f into int, remove decimal. Just for code compression</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">toInt</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(f);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// format the diff second to *** time ago, with setting locale</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">formatDiff</span>(<span class="params">diff, locale, defaultLocale</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// if locale is not exist, use defaultLocale.</span></span><br><span class="line">    <span class="comment">// if defaultLocale is not exist, use build-in `en`.</span></span><br><span class="line">    <span class="comment">// be sure of no error when locale is not exist.</span></span><br><span class="line">    locale = locales[locale] ? locale : (locales[defaultLocale] ? defaultLocale : <span class="string">'en'</span>);</span><br><span class="line">    <span class="comment">// if (! locales[locale]) locale = defaultLocale;</span></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">      agoin = diff &lt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>, <span class="comment">// timein or timeago</span></span><br><span class="line">      total_sec = diff = <span class="built_in">Math</span>.abs(diff);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; diff &gt;= SEC_ARRAY[i] &amp;&amp; i &lt; SEC_ARRAY_LEN; i++) &#123;</span><br><span class="line">      diff /= SEC_ARRAY[i];</span><br><span class="line">    &#125;</span><br><span class="line">    diff = toInt(diff);</span><br><span class="line">    i *= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (diff &gt; (i === <span class="number">0</span> ? <span class="number">9</span> : <span class="number">1</span>)) i += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> locales[locale](diff, i, total_sec)[agoin].replace(<span class="string">'%s'</span>, diff);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// calculate the diff second between date to be formated an now date.</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">diffSec</span>(<span class="params">date, nowDate</span>) </span>&#123;</span><br><span class="line">    nowDate = nowDate ? toDate(nowDate) : <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">return</span> (nowDate - toDate(date)) / <span class="number">1000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * nextInterval: calculate the next interval time.</span></span><br><span class="line"><span class="comment">   * - diff: the diff sec between now and date to be formated.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * What's the meaning?</span></span><br><span class="line"><span class="comment">   * diff = 61 then return 59</span></span><br><span class="line"><span class="comment">   * diff = 3601 (an hour + 1 second), then return 3599</span></span><br><span class="line"><span class="comment">   * make the interval with high performace.</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">nextInterval</span>(<span class="params">diff</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rst = <span class="number">1</span>, i = <span class="number">0</span>, d = <span class="built_in">Math</span>.abs(diff);</span><br><span class="line">    <span class="keyword">for</span> (; diff &gt;= SEC_ARRAY[i] &amp;&amp; i &lt; SEC_ARRAY_LEN; i++) &#123;</span><br><span class="line">      diff /= SEC_ARRAY[i];</span><br><span class="line">      rst *= SEC_ARRAY[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// return leftSec(d, rst);</span></span><br><span class="line">    d = d % rst;</span><br><span class="line">    d = d ? rst - d : rst;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.ceil(d);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// get the datetime attribute, jQuery and DOM</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getDateAttr</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node.dataset.timeago) <span class="keyword">return</span> node.dataset.timeago; <span class="comment">// data-timeago supported</span></span><br><span class="line">    <span class="keyword">return</span> getAttr(node, ATTR_DATETIME);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getAttr</span>(<span class="params">node, name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node.getAttribute) <span class="keyword">return</span> node.getAttribute(name); <span class="comment">// native</span></span><br><span class="line">    <span class="keyword">if</span>(node.attr) <span class="keyword">return</span> node.attr(name); <span class="comment">// jquery</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setTidAttr</span>(<span class="params">node, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node.setAttribute) <span class="keyword">return</span> node.setAttribute(ATTR_DATA_TID, val); <span class="comment">// native</span></span><br><span class="line">    <span class="keyword">if</span>(node.attr) <span class="keyword">return</span> node.attr(ATTR_DATA_TID, val); <span class="comment">// jquery</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getTidFromNode</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getAttr(node, ATTR_DATA_TID);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * timeago: the function to get `timeago` instance.</span></span><br><span class="line"><span class="comment">   * - nowDate: the relative date, default is new Date().</span></span><br><span class="line"><span class="comment">   * - defaultLocale: the default locale, default is en. if your set it, then the `locale` parameter of format is not needed of you.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * How to use it?</span></span><br><span class="line"><span class="comment">   * var timeagoLib = require('timeago.js');</span></span><br><span class="line"><span class="comment">   * var timeago = timeagoLib(); // all use default.</span></span><br><span class="line"><span class="comment">   * var timeago = timeagoLib('2016-09-10'); // the relative date is 2016-09-10, so the 2016-09-11 will be 1 day ago.</span></span><br><span class="line"><span class="comment">   * var timeago = timeagoLib(null, 'zh_CN'); // set default locale is `zh_CN`.</span></span><br><span class="line"><span class="comment">   * var timeago = timeagoLib('2016-09-10', 'zh_CN'); // the relative date is 2016-09-10, and locale is zh_CN, so the 2016-09-11 will be 1天前.</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Timeago</span>(<span class="params">nowDate, defaultLocale</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.nowDate = nowDate;</span><br><span class="line">    <span class="comment">// if do not set the defaultLocale, set it with `en`</span></span><br><span class="line">    <span class="keyword">this</span>.defaultLocale = defaultLocale || <span class="string">'en'</span>; <span class="comment">// use default build-in locale</span></span><br><span class="line">    <span class="comment">// for dev test</span></span><br><span class="line">    <span class="comment">// this.nextInterval = nextInterval;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// what the timer will do</span></span><br><span class="line">  Timeago.prototype.doRender = <span class="function"><span class="keyword">function</span>(<span class="params">node, date, locale</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> diff = diffSec(date, <span class="keyword">this</span>.nowDate),</span><br><span class="line">      self = <span class="keyword">this</span>,</span><br><span class="line">      tid;</span><br><span class="line">    <span class="comment">// delete previously assigned timeout's id to node</span></span><br><span class="line">    node.innerHTML = formatDiff(diff, locale, <span class="keyword">this</span>.defaultLocale);</span><br><span class="line">    <span class="comment">// waiting %s seconds, do the next render</span></span><br><span class="line">    timers[tid = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      self.doRender(node, date, locale);</span><br><span class="line">      <span class="keyword">delete</span> timers[tid];</span><br><span class="line">    &#125;, <span class="built_in">Math</span>.min(nextInterval(diff) * <span class="number">1000</span>, <span class="number">0x7FFFFFFF</span>))] = <span class="number">0</span>; <span class="comment">// there is no need to save node in object.</span></span><br><span class="line">    <span class="comment">// set attribute date-tid</span></span><br><span class="line">    setTidAttr(node, tid);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * format: format the date to *** time ago, with setting or default locale</span></span><br><span class="line"><span class="comment">   * - date: the date / string / timestamp to be formated</span></span><br><span class="line"><span class="comment">   * - locale: the formated string's locale name, e.g. en / zh_CN</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * How to use it?</span></span><br><span class="line"><span class="comment">   * var timeago = require('timeago.js')();</span></span><br><span class="line"><span class="comment">   * timeago.format(new Date(), 'pl'); // Date instance</span></span><br><span class="line"><span class="comment">   * timeago.format('2016-09-10', 'fr'); // formated date string</span></span><br><span class="line"><span class="comment">   * timeago.format(1473473400269); // timestamp with ms</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  Timeago.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params">date, locale</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> formatDiff(diffSec(date, <span class="keyword">this</span>.nowDate), locale, <span class="keyword">this</span>.defaultLocale);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * render: render the DOM real-time.</span></span><br><span class="line"><span class="comment">   * - nodes: which nodes will be rendered.</span></span><br><span class="line"><span class="comment">   * - locale: the locale name used to format date.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * How to use it?</span></span><br><span class="line"><span class="comment">   * var timeago = require('timeago.js')();</span></span><br><span class="line"><span class="comment">   * // 1. javascript selector</span></span><br><span class="line"><span class="comment">   * timeago.render(document.querySelectorAll('.need_to_be_rendered'));</span></span><br><span class="line"><span class="comment">   * // 2. use jQuery selector</span></span><br><span class="line"><span class="comment">   * timeago.render($('.need_to_be_rendered'), 'pl');</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * Notice: please be sure the dom has attribute `datetime`.</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  Timeago.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params">nodes, locale</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nodes.length === <span class="literal">undefined</span>) nodes = [nodes];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = nodes.length; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">this</span>.doRender(nodes[i], getDateAttr(nodes[i]), locale); <span class="comment">// render item</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * setLocale: set the default locale name.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * How to use it?</span></span><br><span class="line"><span class="comment">   * var timeago = require('timeago.js')();</span></span><br><span class="line"><span class="comment">   * timeago.setLocale('fr');</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  Timeago.prototype.setLocale = <span class="function"><span class="keyword">function</span>(<span class="params">locale</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.defaultLocale = locale;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * timeago: the function to get `timeago` instance.</span></span><br><span class="line"><span class="comment">   * - nowDate: the relative date, default is new Date().</span></span><br><span class="line"><span class="comment">   * - defaultLocale: the default locale, default is en. if your set it, then the `locale` parameter of format is not needed of you.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * How to use it?</span></span><br><span class="line"><span class="comment">   * var timeagoFactory = require('timeago.js');</span></span><br><span class="line"><span class="comment">   * var timeago = timeagoFactory(); // all use default.</span></span><br><span class="line"><span class="comment">   * var timeago = timeagoFactory('2016-09-10'); // the relative date is 2016-09-10, so the 2016-09-11 will be 1 day ago.</span></span><br><span class="line"><span class="comment">   * var timeago = timeagoFactory(null, 'zh_CN'); // set default locale is `zh_CN`.</span></span><br><span class="line"><span class="comment">   * var timeago = timeagoFactory('2016-09-10', 'zh_CN'); // the relative date is 2016-09-10, and locale is zh_CN, so the 2016-09-11 will be 1天前.</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">timeagoFactory</span>(<span class="params">nowDate, defaultLocale</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Timeago(nowDate, defaultLocale);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * register: register a new language locale</span></span><br><span class="line"><span class="comment">   * - locale: locale name, e.g. en / zh_CN, notice the standard.</span></span><br><span class="line"><span class="comment">   * - localeFunc: the locale process function</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * How to use it?</span></span><br><span class="line"><span class="comment">   * var timeagoFactory = require('timeago.js');</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * timeagoFactory.register('the locale name', the_locale_func);</span></span><br><span class="line"><span class="comment">   * // or</span></span><br><span class="line"><span class="comment">   * timeagoFactory.register('pl', require('timeago.js/locales/pl'));</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">  timeagoFactory.register = <span class="function"><span class="keyword">function</span>(<span class="params">locale, localeFunc</span>) </span>&#123;</span><br><span class="line">    locales[locale] = localeFunc;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * cancel: cancels one or all the timers which are doing real-time render.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * How to use it?</span></span><br><span class="line"><span class="comment">   * For canceling all the timers:</span></span><br><span class="line"><span class="comment">   * var timeagoFactory = require('timeago.js');</span></span><br><span class="line"><span class="comment">   * var timeago = timeagoFactory();</span></span><br><span class="line"><span class="comment">   * timeago.render(document.querySelectorAll('.need_to_be_rendered'));</span></span><br><span class="line"><span class="comment">   * timeagoFactory.cancel(); // will stop all the timers, stop render in real time.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * For canceling single timer on specific node:</span></span><br><span class="line"><span class="comment">   * var timeagoFactory = require('timeago.js');</span></span><br><span class="line"><span class="comment">   * var timeago = timeagoFactory();</span></span><br><span class="line"><span class="comment">   * var nodes = document.querySelectorAll('.need_to_be_rendered');</span></span><br><span class="line"><span class="comment">   * timeago.render(nodes);</span></span><br><span class="line"><span class="comment">   * timeagoFactory.cancel(nodes[0]); // will clear a timer attached to the first node, stop render in real time.</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">  timeagoFactory.cancel = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tid;</span><br><span class="line">    <span class="comment">// assigning in if statement to save space</span></span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">      tid = getTidFromNode(node);</span><br><span class="line">      <span class="keyword">if</span> (tid) &#123;</span><br><span class="line">        clearTimeout(tid);</span><br><span class="line">        <span class="keyword">delete</span> timers[tid];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (tid <span class="keyword">in</span> timers) clearTimeout(tid);</span><br><span class="line">      timers = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> timeagoFactory;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>timeago</tag>
      </tags>
  </entry>
  <entry>
    <title>将金额转换为大写人民币形式</title>
    <url>/2017/05/22/trans/</url>
    <content><![CDATA[<p>最近在项目中处理收费划价的事情，遇到要把数字金额装换为大写的金额。如￥150.00 =&gt; 壹佰伍拾元整。把这个方法记录下来，说不定以后还会用到。</p>
<h5 id="需要用到的常量"><a href="#需要用到的常量" class="headerlink" title="需要用到的常量"></a>需要用到的常量</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> digits = [<span class="string">"零"</span>, <span class="string">"壹"</span>, <span class="string">"贰"</span>, <span class="string">"叁"</span>, <span class="string">"肆"</span>, <span class="string">"伍"</span>, <span class="string">"陆"</span>, <span class="string">"柒"</span>, <span class="string">"捌"</span>, <span class="string">"玖"</span>];</span><br><span class="line"><span class="keyword">const</span> radices = [<span class="string">""</span>,<span class="string">"拾"</span>, <span class="string">"佰"</span>, <span class="string">"仟"</span>];</span><br><span class="line"><span class="keyword">const</span> bigRadices = [<span class="string">""</span>, <span class="string">"万"</span>, <span class="string">"亿"</span>];</span><br><span class="line"><span class="keyword">const</span> decimals = [<span class="string">"角"</span>,<span class="string">"分"</span>];</span><br><span class="line"><span class="keyword">const</span> CNY = <span class="string">"元"</span>; </span><br><span class="line"><span class="keyword">const</span> CN_INTEGER = <span class="string">"整"</span>;</span><br><span class="line"><span class="keyword">const</span> CN_RMB = <span class="string">"人民币"</span>;</span><br><span class="line"><span class="keyword">const</span> MAXNUM = <span class="number">999999999999.99</span>;</span><br></pre></td></tr></table></figure>

<h5 id="对数字进行处理验证"><a href="#对数字进行处理验证" class="headerlink" title="对数字进行处理验证"></a>对数字进行处理验证</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (currencyStr == <span class="string">""</span>)  <span class="keyword">return</span> <span class="string">"无值！"</span>; </span><br><span class="line"><span class="keyword">if</span> (currencyStr.match(<span class="regexp">/[^,.\d]/</span>) != <span class="literal">null</span>)  <span class="keyword">return</span> <span class="string">"含有无效字符！"</span>; </span><br><span class="line"><span class="keyword">if</span> ((currencyStr).match(<span class="regexp">/^((\d&#123;1,3&#125;(,\d&#123;3&#125;)*(.((\d&#123;3&#125;,)*\d&#123;1,3&#125;))?)|(\d+(.\d+)?))$/</span>) == <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">"格式不正确！"</span>; </span><br><span class="line"></span><br><span class="line">currencyStr = currencyStr.replace(<span class="regexp">/,/g</span>, <span class="string">""</span>);</span><br><span class="line">currencyStr = currencyStr.replace(<span class="regexp">/^0+/</span>, <span class="string">""</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Number</span>(currencyStr) &gt; MAXNUM) <span class="keyword">return</span> <span class="string">"金额过大，应小于10000亿元！"</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>将金额字符串分为整数部分和小数部分<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">parts = currencyStr.split(<span class="string">"."</span>); </span><br><span class="line"><span class="keyword">if</span> (parts.length &gt; <span class="number">1</span>) &#123; </span><br><span class="line">    integral = parts[<span class="number">0</span>]; </span><br><span class="line">    decimal = parts[<span class="number">1</span>].substr(<span class="number">0</span>, <span class="number">2</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    integral = parts[<span class="number">0</span>]; </span><br><span class="line">    decimal = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="处理整数部分"><a href="#处理整数部分" class="headerlink" title="处理整数部分"></a>处理整数部分</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">Number</span>(integral) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">zeroCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; integral.length; i++)&#123;</span><br><span class="line">    p = integral.length - i - <span class="number">1</span>; </span><br><span class="line">    d = integral.substr(i, <span class="number">1</span>); </span><br><span class="line">    quotient = p / <span class="number">4</span>; </span><br><span class="line">    modulus = p % <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span> (d == <span class="string">"0"</span>) &#123; </span><br><span class="line">        zeroCount++; </span><br><span class="line">    &#125;<span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="keyword">if</span> (zeroCount &gt; <span class="number">0</span>)&#123; </span><br><span class="line">            outputStr += digits[<span class="number">0</span>]; </span><br><span class="line">        &#125; </span><br><span class="line">        zeroCount = <span class="number">0</span>; </span><br><span class="line">        outputStr += digits[<span class="built_in">Number</span>(d)] + radices[modulus]; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (modulus == <span class="number">0</span> &amp;&amp; zeroCount &lt; <span class="number">4</span>) &#123; </span><br><span class="line">        outputStr += bigRadices[quotient]; </span><br><span class="line">        zeroCount = <span class="number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">outputStr += CNY</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="处理小数部分"><a href="#处理小数部分" class="headerlink" title="处理小数部分"></a>处理小数部分</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (decimal != <span class="string">""</span>) &#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; decimal.length; i++) &#123; </span><br><span class="line">        d = decimal.substr(i, <span class="number">1</span>); </span><br><span class="line">        <span class="keyword">if</span> (d != <span class="string">"0"</span>) &#123; </span><br><span class="line">            outputStr += digits[<span class="built_in">Number</span>(d)] + decimals[i]; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h5 id="输出大写金额的字符串"><a href="#输出大写金额的字符串" class="headerlink" title="输出大写金额的字符串"></a>输出大写金额的字符串</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (outputStr == <span class="string">""</span>) &#123; </span><br><span class="line">    outputStr = CN_ZERO + CN_DOLLAR; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span> (decimal == <span class="string">""</span> || decimal == <span class="string">"0"</span> || decimal == <span class="string">"00"</span>) &#123; </span><br><span class="line">    outputStr += CN_INTEGER; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">outputStr = CN_RMB + outputStr; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> outputStr;</span><br></pre></td></tr></table></figure>

<h5 id="完整的代码"><a href="#完整的代码" class="headerlink" title="完整的代码"></a>完整的代码</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> convertCurrency = <span class="function">(<span class="params">currency</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> digits = [<span class="string">"零"</span>, <span class="string">"壹"</span>, <span class="string">"贰"</span>, <span class="string">"叁"</span>, <span class="string">"肆"</span>, <span class="string">"伍"</span>, <span class="string">"陆"</span>, <span class="string">"柒"</span>, <span class="string">"捌"</span>, <span class="string">"玖"</span>];</span><br><span class="line">    <span class="keyword">const</span> radices = [<span class="string">""</span>,<span class="string">"拾"</span>, <span class="string">"佰"</span>, <span class="string">"仟"</span>];</span><br><span class="line">    <span class="keyword">const</span> bigRadices = [<span class="string">""</span>, <span class="string">"万"</span>, <span class="string">"亿"</span>];</span><br><span class="line">    <span class="keyword">const</span> decimals = [<span class="string">"角"</span>,<span class="string">"分"</span>];</span><br><span class="line">    <span class="keyword">const</span> CNY = <span class="string">"元"</span>; </span><br><span class="line">    <span class="keyword">const</span> CN_INTEGER = <span class="string">"整"</span>;</span><br><span class="line">    <span class="keyword">const</span> CN_RMB = <span class="string">"人民币"</span>;</span><br><span class="line">    <span class="keyword">const</span> MAXNUM = <span class="number">999999999999.99</span>;</span><br><span class="line">    <span class="keyword">let</span> parts, integral, decimal, zeroCount, p, d, quotient, modulus;</span><br><span class="line">    <span class="keyword">let</span> outputStr = <span class="string">""</span>;</span><br><span class="line">    currencyStr = currency.toString();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currencyStr == <span class="string">""</span>)  <span class="keyword">return</span> <span class="string">"无值！"</span>; </span><br><span class="line">    <span class="keyword">if</span> (currencyStr.match(<span class="regexp">/[^,.\d]/</span>) != <span class="literal">null</span>)  <span class="keyword">return</span> <span class="string">"含有无效字符！"</span>; </span><br><span class="line">    <span class="keyword">if</span> ((currencyStr).match(<span class="regexp">/^((\d&#123;1,3&#125;(,\d&#123;3&#125;)*(.((\d&#123;3&#125;,)*\d&#123;1,3&#125;))?)|(\d+(.\d+)?))$/</span>) == <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">"格式不正确！"</span>; </span><br><span class="line"></span><br><span class="line">    currencyStr = currencyStr.replace(<span class="regexp">/,/g</span>, <span class="string">""</span>);</span><br><span class="line">    currencyStr = currencyStr.replace(<span class="regexp">/^0+/</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Number</span>(currencyStr) &gt; MAXNUM) <span class="keyword">return</span> <span class="string">"金额过大，应小于10000亿元！"</span>; </span><br><span class="line"></span><br><span class="line">    parts = currencyStr.split(<span class="string">"."</span>); </span><br><span class="line">    <span class="keyword">if</span> (parts.length &gt; <span class="number">1</span>) &#123; </span><br><span class="line">        integral = parts[<span class="number">0</span>]; </span><br><span class="line">        decimal = parts[<span class="number">1</span>].substr(<span class="number">0</span>, <span class="number">2</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        integral = parts[<span class="number">0</span>]; </span><br><span class="line">        decimal = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算整数部分</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Number</span>(integral) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        zeroCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; integral.length; i++)&#123;</span><br><span class="line">            p = integral.length - i - <span class="number">1</span>; </span><br><span class="line">            d = integral.substr(i, <span class="number">1</span>); </span><br><span class="line">            quotient = p / <span class="number">4</span>; </span><br><span class="line">            modulus = p % <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">if</span> (d == <span class="string">"0"</span>) &#123; </span><br><span class="line">                zeroCount++; </span><br><span class="line">            &#125;<span class="keyword">else</span> &#123; </span><br><span class="line">                <span class="keyword">if</span> (zeroCount &gt; <span class="number">0</span>)&#123; </span><br><span class="line">                    outputStr += digits[<span class="number">0</span>]; </span><br><span class="line">                &#125; </span><br><span class="line">                zeroCount = <span class="number">0</span>; </span><br><span class="line">                outputStr += digits[<span class="built_in">Number</span>(d)] + radices[modulus]; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (modulus == <span class="number">0</span> &amp;&amp; zeroCount &lt; <span class="number">4</span>) &#123; </span><br><span class="line">                outputStr += bigRadices[quotient]; </span><br><span class="line">                zeroCount = <span class="number">0</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        outputStr += CNY</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算小数部分</span></span><br><span class="line">    <span class="keyword">if</span> (decimal != <span class="string">""</span>) &#123; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; decimal.length; i++) &#123; </span><br><span class="line">            d = decimal.substr(i, <span class="number">1</span>); </span><br><span class="line">            <span class="keyword">if</span> (d != <span class="string">"0"</span>) &#123; </span><br><span class="line">                outputStr += digits[<span class="built_in">Number</span>(d)] + decimals[i]; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">if</span> (outputStr == <span class="string">""</span>) &#123; </span><br><span class="line">        outputStr = CN_ZERO + CN_DOLLAR; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (decimal == <span class="string">""</span> || decimal == <span class="string">"0"</span> || decimal == <span class="string">"00"</span>) &#123; </span><br><span class="line">        outputStr += CN_INTEGER; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    outputStr = CN_RMB + outputStr; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> outputStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>money</tag>
      </tags>
  </entry>
  <entry>
    <title>vue自定义指令 查看图片</title>
    <url>/2018/06/22/v-imgview/</url>
    <content><![CDATA[<p><code>main.js</code>全局注册指令</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.directive(<span class="string">'imgview'</span>, &#123;</span><br><span class="line">  bind (el, binding, vnode) &#123;</span><br><span class="line">    <span class="keyword">let</span> imgSrc = el.getAttribute(<span class="string">'src'</span>)</span><br><span class="line">    el.style.cursor = <span class="string">'zoom-in'</span></span><br><span class="line">    el.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (imgSrc) &#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'imgViewDom'</span>).firstChild.src = imgSrc</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'imgViewDom'</span>).style.display = <span class="string">'flex'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  unbind (el) &#123;</span><br><span class="line">    el.removeEventListener(<span class="string">'click'</span>, <span class="literal">null</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><code>app.vue</code> DOM结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"imgViewDom"</span> @<span class="attr">click</span>=<span class="string">"onClickImgBox"</span> <span class="attr">style</span>=<span class="string">"disply: none"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> @<span class="attr">click</span>=<span class="string">"onClickImgBox"</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>app.vue</code> 方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'App'</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onClickImgBox (e) &#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">'imgViewDom'</span>).style.display = <span class="string">'none'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#imgViewDom</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">99999999</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,<span class="number">0.8</span>);</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">  <span class="attribute">transition</span>: all ease-in-out .<span class="number">3s</span>;</span><br><span class="line">  img&#123;</span><br><span class="line">    <span class="selector-tag">cursor</span>: <span class="selector-tag">zoom-out</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>合并单元格</title>
    <url>/2018/10/11/vue%20%E8%A1%A8%E6%A0%BC%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC/</url>
    <content><![CDATA[<p>在<code>mvvm</code>框架中，表格合并单元格的方（竖向）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> combineCell = <span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> field <span class="keyword">in</span> list[<span class="number">0</span>]) &#123;</span><br><span class="line">    <span class="keyword">var</span> k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (k &lt; list.length) &#123;</span><br><span class="line">      list[k][field + <span class="string">'span'</span>] = <span class="number">1</span></span><br><span class="line">      list[k][field + <span class="string">'dis'</span>] = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = k + <span class="number">1</span>; i &lt;= list.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (list[k][field] === list[i][field] &amp;&amp; list[k][field] !== <span class="string">''</span>) &#123;</span><br><span class="line">          list[k][field + <span class="string">'span'</span>]++</span><br><span class="line">          list[k][field + <span class="string">'dis'</span>] = <span class="literal">false</span></span><br><span class="line">          list[i][field + <span class="string">'span'</span>] = <span class="number">1</span></span><br><span class="line">          list[i][field + <span class="string">'dis'</span>] = <span class="literal">true</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      k = i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原理： 利用<code>table&gt;td</code>中的 <code>rowspan</code> 属性，给每一条数据的每个字段加上 <code>[field]span</code> 和 <code>[field]dis</code><br>分别表示 td 的 <code>rowspan</code> 属性 和 <code>display</code> 属性</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>vue mvvm</tag>
      </tags>
  </entry>
  <entry>
    <title>vue实现微页面编辑组件</title>
    <url>/2019/06/11/vue%E5%AE%9E%E7%8E%B0%E5%BE%AE%E9%A1%B5%E9%9D%A2%E7%BC%96%E8%BE%91%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p>之前的定义模板页面功能太少，局限性太大，满足不了日常使用的需求，这次页面改版，之前看过有赞商户后台的微页面编辑功能，所以想在我们的系统中实现类似的功能，自定义组件组合成页面。</p>
<p><img data-src="http://cdn.cqyyy.cn/pic/20190614171007.png" alt=""></p>
<a id="more"></a>

<h4 id="怎么实现"><a href="#怎么实现" class="headerlink" title="怎么实现"></a>怎么实现</h4><p>有赞的React后台组件<a href="https://youzan.github.io/zent/zh/component/design" target="_blank" rel="noopener">zent</a>中实现了 <code>design</code> 微页面编辑组件。作为参考。</p>
<p>一个组件的属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: <span class="string">'config'</span>, <span class="comment">// 组件类型，将决定由哪个组件渲染</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 组件内部需要的属性和值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个组件的组成：</p>
<ul>
<li><p><code>editor</code><br> 右边编辑区域，编辑每个组件的属性</p>
<ol>
<li>混入 mixins <code>base/minxins/editorMixins.js</code></li>
<li><code>designValue</code> 为组件的值 (Object)，用作表单双向绑定，组件的值根据每个功能组件具体需求实现</li>
</ol>
</li>
<li><p><code>preview</code></p>
<p> 左边显示效果的区域，根据 <code>props</code> 实现相应的UI，所以在zent中使用了 <code>PureComponent</code>.</p>
<ol>
<li>混入 mixins <code>base/minxins/previewMixins.js</code></li>
<li>留一个 <code>&lt;slot&gt;</code></li>
</ol>
</li>
<li><p><code>index.js</code></p>
<ol>
<li>引入预览组件和编辑组件</li>
<li>引入高阶组件 <code>base/combineComponents.js</code>将组价合并</li>
<li>定义组件属性：<code>designType</code>, <code>designDescription</code></li>
<li>定义组件初始值 导出最终的组件。</li>
</ol>
</li>
</ul>
<h4 id="基础构建"><a href="#基础构建" class="headerlink" title="基础构建"></a>基础构建</h4><p><code>DesignBase.vue</code> 组件是整个的基础容器，根据type 类型渲染组件，组件的新增删除事件，拖动功能。</p>
<p><code>DesignController.vue</code> 是 <code>preview</code> 的 <code>solt</code>，它提供的边框，前后新增按钮，删除功能。</p>
<p><code>DesignEditor.vue</code> 是 <code>editor</code> 的容器组件, 负责编辑组件的样式，如 绝对定位，组件名称等。</p>
<p><code>renderPreview.js</code> 根据type类型渲染组件，它要接收所有组件作为 <code>props</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'renderPreview'</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    value: <span class="built_in">Object</span>,</span><br><span class="line">    designComponents: <span class="built_in">Array</span>,</span><br><span class="line">    isactive: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  inheritAttrs: <span class="literal">false</span>,</span><br><span class="line">  render (h) &#123;</span><br><span class="line">    <span class="keyword">let</span> tag = <span class="keyword">this</span>.designComponents.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> item.designType === <span class="keyword">this</span>.value.type</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> h(tag, &#123;</span><br><span class="line">      props: &#123;</span><br><span class="line">        value: <span class="keyword">this</span>.value,</span><br><span class="line">        isactive: <span class="keyword">this</span>.isactive</span><br><span class="line">      &#125;,</span><br><span class="line">      inheritAttrs: <span class="literal">false</span>,</span><br><span class="line">      on: <span class="keyword">this</span>.$listeners,</span><br><span class="line">      attrs: <span class="keyword">this</span>.$attrs</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>combineComponents.js</code> 联合 <code>preview</code> 和 <code>editor</code> 组件的一个高阶组件，接收组件，返回组件，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> h(<span class="string">'div'</span>, &#123;</span><br><span class="line">  style: &#123;</span><br><span class="line">    position: <span class="string">'relative'</span> <span class="comment">// </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [p, <span class="keyword">this</span>.isactive ? e : <span class="literal">null</span>])</span><br></pre></td></tr></table></figure>
<p>因为 <code>editor</code> 组件要根据父元素绝对定位，这个 <code>relative</code> 不可少。</p>
<h4 id="实现其他业务组件"><a href="#实现其他业务组件" class="headerlink" title="实现其他业务组件"></a>实现其他业务组件</h4><p>然后就可以根据自己业务需求，添加其他组件，当然有的会需要后台配合，然后再手机端<br>根据类型实现相应的组件。</p>
<p>最终一个页面的值会是这样一个数组:</p>
<p><img data-src="http://cdn.cqyyy.cn/pic/20190614174856.png" alt=""></p>
<p>有时间的话会把这整个design组件再好好构造一下，还有很多地方可以再封装抽象。</p>
<h4 id="值得总结的地方"><a href="#值得总结的地方" class="headerlink" title="值得总结的地方"></a>值得总结的地方</h4><ol>
<li><p>vue 函数渲染 <a href="https://cn.vuejs.org/v2/guide/render-function.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/render-function.html</a></p>
</li>
<li><p>HOC 高阶组件，在vue中其实是用的render函数</p>
</li>
<li><p>自定义组件的 <code>v-model</code>, props 设置为 value, $emit(‘input’, ‘…’)<br><a href="https://cn.vuejs.org/v2/guide/components-custom-events.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E7%9A%84-v-model" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/components-custom-events.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E7%9A%84-v-model</a></p>
</li>
<li><p><a href="https://cn.vuejs.org/v2/guide/mixins.html" target="_blank" rel="noopener">vue 混入</a>, 估计vue3就不会有mixins了，毕竟存在值来源不清晰，多个mixins间相互依赖可能出现问题</p>
</li>
<li><p><code>$listeners</code> 垮组件地传递事件，就不用在每一层上面再接收再发射。<br><a href="https://cn.vuejs.org/v2/api/#vm-listeners" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#vm-listeners</a></p>
</li>
<li><p>父组件动态传递 props，子组件接下来希望将其作为一个本地的 prop 数据来使用</p>
</li>
</ol>
<p><a href="https://cn.vuejs.org/v2/guide/components-props.html#%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/components-props.html#%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件A --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Test</span> <span class="attr">:parentValue</span>=<span class="string">"arr"</span>&gt;</span><span class="tag">&lt;/<span class="name">Test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> @<span class="attr">click</span>=<span class="string">"cover"</span>&gt;</span>cover<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> @<span class="attr">click</span>=<span class="string">"push"</span>&gt;</span>push<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> B <span class="keyword">from</span> <span class="string">'./B'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'A'</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    B</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      arr: [1, 2, 3]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="actionscript">    <span class="comment">// 父组件想更改传给 B 的 props </span></span></span><br><span class="line">    cover () &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.arr = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>] <span class="comment">// 这种方法是不行的</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    push () &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.arr.push(<span class="number">233</span>) <span class="comment">// 可以！</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件B --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in arr"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    parentValue: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> []</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      arr: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.arr = <span class="keyword">this</span>.parentValue</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue项目中使用预渲染</title>
    <url>/2018/11/23/vue%E9%A2%84%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[<p>预渲染只是用来改善少数营销页面（例如 /, /about, /contact 等）的 SEO。无需使用 web 服务器实时动态编译 HTML，而是使用预渲染方式，在构建时 (build time) 简单地生成针对特定路由的静态 HTML 文件。</p>
<a id="more"></a>

<p>在vue-cli3中使用 <a href="https://github.com/chrisvfritz/prerender-spa-plugin" target="_blank" rel="noopener">prerender-spa-plugin</a>,<code>vue-cli3</code> 提供了一个零配置原型开发，可以快速搭建应用而不用管配置.</p>
<ol>
<li>安装 <a href="https://github.com/SolarLiner/vue-cli-plugin-prerender-spa" target="_blank" rel="noopener">vue-cli-plugin-prerender-spa</a> <code>vue-cli3</code> 中的 <code>prerender-spa-plugin</code> 插件</li>
</ol>
<p>用起来都很简单，主要是在安装步骤，这里会安装 <a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener">puppeteer</a>, 一个无头浏览器，它会下载 <code>Chromium</code> 内核，接近200M大小，</p>
<p><a href="https://zhaoqize.github.io/puppeteer-api-zh_CN/#/" target="_blank" rel="noopener">puppeteer文档</a> 十分强大，无界面版chrome, 可以用来做很多事。</p>
<ol start="2">
<li>在项目下新建文件 <code>vue.config.js</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  pluginOptions: &#123;</span><br><span class="line">    prerenderSpa: &#123;</span><br><span class="line">      registry: undefined,</span><br><span class="line">      renderRoutes: [</span><br><span class="line">        &#39;&#x2F;&#39;,</span><br><span class="line">        &#39;&#x2F;home&#39;,</span><br><span class="line">        &#39;&#x2F;about&#39;</span><br><span class="line">      ],</span><br><span class="line">      useRenderEvent: true,</span><br><span class="line">      headless: true,</span><br><span class="line">      onlyProduction: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在入口文件 <code>main.js</code> 中</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  mounted: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">document</span>.dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'x-app-rendered'</span>)) <span class="comment">// add</span></span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>执行命令 <code>npm run build</code> 就会在 <code>dist</code> 目录中生成对应的静态html文件。</li>
</ol>
<p>总结：<br>预渲染只适合于少数不依赖于后端数据的活动宣传营销页面，并不能大面积的使用，如果是为了真正的SEO,加载速度和用户体验，还是得上SSR.<br><a href="https://ssr.vuejs.org/zh/" target="_blank" rel="noopener">vue-ssr</a></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Github Webhook 自动部署项目</title>
    <url>/2018/01/05/webhook/</url>
    <content><![CDATA[<p>实现：服务器自动拉取push到github上的项目。<br>github支持Webhooks及大量的第三方服务，可以很好得对repo的push等操作做出反应。<br>当github收到repo的操作行为时，会向指定的url发送一个带有描述操作内容的post请求。</p>
<h4 id="1-对指定repo添加webhook，指向服务器上的接口。"><a href="#1-对指定repo添加webhook，指向服务器上的接口。" class="headerlink" title="1. 对指定repo添加webhook，指向服务器上的接口。"></a>1. 对指定repo添加webhook，指向服务器上的接口。</h4><p><img data-src="http://cdn.cqyyy.cn/pic/20190528152847.png" alt="webhook"></p>
<a id="more"></a>

<ul>
<li>Payload URL: 服务器地址，接收POST请求</li>
<li>Content type： 默认</li>
<li>Secret： 自定义加密字符串</li>
</ul>
<h4 id="2-服务器上编写代码接收请求"><a href="#2-服务器上编写代码接收请求" class="headerlink" title="2. 服务器上编写代码接收请求"></a>2. 服务器上编写代码接收请求</h4><p>全局安装 <code>github-webhook-handler</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g github-webhook-handler</span><br></pre></td></tr></table></figure>
<p>创建 <code>deploy.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">var</span> createHandler = <span class="built_in">require</span>(<span class="string">'github-webhook-handler'</span>)</span><br><span class="line"><span class="keyword">var</span> handler = createHandler(&#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">secret</span>: <span class="string">'**Github上设置的Secret**'</span> &#125;) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run_cmd</span>(<span class="params">cmd, args, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).spawn;</span><br><span class="line">  <span class="keyword">var</span> child = spawn(cmd, args);</span><br><span class="line">  <span class="keyword">var</span> resp = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">  child.stdout.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">buffer</span>) </span>&#123; resp += buffer.toString(); &#125;);</span><br><span class="line">  child.stdout.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; callback (resp) &#125;);</span><br><span class="line">&#125;</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  handler(req, res, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    res.statusCode = <span class="number">404</span></span><br><span class="line">    res.end(<span class="string">'no such location'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).listen(<span class="number">7777</span>)</span><br><span class="line"></span><br><span class="line">handler.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'Error:'</span>, err.message)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">handler.on(<span class="string">'push'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Received a push event for %s to %s'</span>,</span><br><span class="line">    event.payload.repository.name,</span><br><span class="line">    event.payload.ref);</span><br><span class="line">  run_cmd(<span class="string">'sh'</span>, [<span class="string">'./deploy.sh'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123; <span class="built_in">console</span>.log(text) &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>创建 <code>deploy.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">LOG_FILE=<span class="string">"E:\my-blog/blog_deploy.log"</span>  <span class="comment"># 这里最好是绝对路径^_^</span></span><br><span class="line"></span><br><span class="line">date &gt;&gt; <span class="string">"<span class="variable">$LOG_FILE</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Start deployment"</span> &gt;&gt;<span class="string">"<span class="variable">$LOG_FILE</span>"</span></span><br><span class="line"><span class="built_in">cd</span> ../blog</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"pulling source code..."</span> &gt;&gt; <span class="string">"<span class="variable">$LOG_FILE</span>"</span></span><br><span class="line">git checkout master</span><br><span class="line">git pull origin master</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Finished."</span> &gt;&gt;<span class="string">"<span class="variable">$LOG_FILE</span>"</span></span><br><span class="line"><span class="built_in">echo</span> &gt;&gt; <span class="variable">$LOG_FILE</span></span><br></pre></td></tr></table></figure>

<h4 id="把服务器跑起来"><a href="#把服务器跑起来" class="headerlink" title="把服务器跑起来"></a>把服务器跑起来</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node deploy.js</span><br></pre></td></tr></table></figure>

<p>或者使用 <code>supervisor</code> 管理进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">supervisor deploy.js</span><br></pre></td></tr></table></figure>


<h4 id="服务端项目"><a href="#服务端项目" class="headerlink" title="服务端项目"></a>服务端项目</h4><p>把Github上的项目clone下来，注意与bash中的目录正确</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/xxxxxx/blog.git</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
        <tag>webhook</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Anyproxy实现代理功能</title>
    <url>/2019/06/14/%E4%BD%BF%E7%94%A8Anyproxy%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p>中文文档：<a href="https://github.com/alibaba/anyproxy/tree/master/docs-src/cn" target="_blank" rel="noopener">https://github.com/alibaba/anyproxy/tree/master/docs-src/cn</a></p>
<h4 id="安装-Anyproxy"><a href="#安装-Anyproxy" class="headerlink" title="安装 Anyproxy"></a>安装 <code>Anyproxy</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g anyproxy</span><br></pre></td></tr></table></figure>

<p>也可以作为npm模块安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install --save anyproxy</span><br></pre></td></tr></table></figure>

<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ anyproxy</span><br><span class="line">$ anyproxy -i // 代理https</span><br></pre></td></tr></table></figure>
<ul>
<li>启动后将终端http代理服务器配置为127.0.0.1:8001即可</li>
<li>访问<a href="http://127.0.0.1:8002" target="_blank" rel="noopener">http://127.0.0.1:8002</a> ，web界面上能看到所有的请求信息</li>
</ul>
<h4 id="代理https"><a href="#代理https" class="headerlink" title="代理https"></a>代理https</h4><p>先下载 <code>RootCA.crt</code> 证书, 以火狐浏览器为例:</p>
<ol>
<li>设置代理</li>
</ol>
<p><img data-src="http://cdn.cqyyy.cn/pic/20190615211227.png" alt=""></p>
<ol start="2">
<li>导入证书</li>
</ol>
<p><img data-src="http://cdn.cqyyy.cn/pic/20190615211418.png" alt=""></p>
<p>点击导入按钮，选择下载好的 <code>RootCA.crt</code>, 勾选 ‘信任此证书机构’ 等</p>
<ol start="3">
<li>打开127.0.0.1:8002 就能看到代理获取的信息 baidu.com, https的能成功获取到内容：</li>
</ol>
<p><img data-src="http://cdn.cqyyy.cn/pic/20190615211736.png" alt=""></p>
<h4 id="编程式使用"><a href="#编程式使用" class="headerlink" title="编程式使用"></a>编程式使用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> AnyProxy = <span class="built_in">require</span>(<span class="string">'anyproxy'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  port: <span class="number">8001</span>, <span class="comment">// 代理端口</span></span><br><span class="line">  rule: <span class="built_in">require</span>(<span class="string">'./myRuleModule'</span>),</span><br><span class="line">  webInterface: &#123;</span><br><span class="line">    enable: <span class="literal">true</span>,</span><br><span class="line">    webPort: <span class="number">8002</span>,</span><br><span class="line">    wsPort: <span class="number">8003</span></span><br><span class="line">  &#125;,</span><br><span class="line">  throttle: <span class="number">10000</span>,</span><br><span class="line">  forceProxyHttps: <span class="literal">true</span>,</span><br><span class="line">  silent: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxyServer = <span class="keyword">new</span> AnyProxy.ProxyServer(options)</span><br><span class="line"></span><br><span class="line">proxyServer.on(<span class="string">'ready'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'satrt'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">proxyServer.on(<span class="string">'error'</span>, e =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;)</span><br><span class="line">proxyServer.start()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭</span></span><br><span class="line"><span class="comment">// proxyServer.close()</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// myRuleModule.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  sumary: <span class="string">'a rule to hack response'</span>,</span><br><span class="line">  * beforeSendResponse (requestDetail, responseDetail) &#123;</span><br><span class="line">    <span class="keyword">if</span> (requestDetail.url.indexOf(<span class="string">'baidu.com'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> newResponse = responseDetail.response</span><br><span class="line">      newResponse.body = <span class="string">'AnyProxy Hacked!'</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          resolve(&#123; <span class="attr">response</span>: newResponse &#125;)</span><br><span class="line">        &#125;, <span class="number">500</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动程序 <code>node index.js</code>, 通过代理访问百度， 页面内容会显示为 ‘AnyProxy Hacked!’</p>
<h4 id="rule-js-规则格式"><a href="#rule-js-规则格式" class="headerlink" title="rule.js 规则格式"></a>rule.js 规则格式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 模块介绍</span></span><br><span class="line">  summary: <span class="string">''</span>,</span><br><span class="line">  <span class="comment">// 发送请求前拦截处理</span></span><br><span class="line">  *beforeSendRequest(requestDetail) &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">  <span class="comment">// 发送响应前处理</span></span><br><span class="line">  *beforeSendResponse(requestDetail, responseDetail) &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">  <span class="comment">// 是否处理https请求</span></span><br><span class="line">  *beforeDealHttpsRequest(requestDetail) &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">  <span class="comment">// 请求出错的事件</span></span><br><span class="line">  *onError(requestDetail, error) &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">  <span class="comment">// https连接服务器出错</span></span><br><span class="line">  *onConnectError(requestDetail, error) &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 除了summary，都是由 co (https://github.com/tj/co) 驱动的，函数需要满足yieldable。可以返回promise或使用generator函数。</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>代理</category>
      </categories>
      <tags>
        <tag>anyproxy</tag>
      </tags>
  </entry>
  <entry>
    <title>使用新的Linux主机遇到的问题</title>
    <url>/2019/08/07/%E4%BD%BF%E7%94%A8%E6%96%B0%E7%9A%84Linux%E4%B8%BB%E6%9C%BA%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>系统 linux centos 6.3</p>
<h4 id="wget-command-not-found"><a href="#wget-command-not-found" class="headerlink" title="wget: command not found"></a>wget: command not found</h4><p>没有安装wget软件包，一般linux最小化安装时，wget不会默认被安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install wget</span><br></pre></td></tr></table></figure>

<h4 id="Cannot-find-a-valid-baseurl-for-repo-base"><a href="#Cannot-find-a-valid-baseurl-for-repo-base" class="headerlink" title="Cannot find a valid baseurl for repo: base"></a><code>Cannot find a valid baseurl for repo: base</code></h4><p>出现这个问题是因为yum在安装包的过程中，虽然已经联网，但是没法解析远程包管理库对应的域名，所以只需要在网络配置中添加上DNS对应的ip地址即可。</p>
<ol>
<li><p>打开 <code>ifcfg-eth0</code> 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure>
</li>
<li><p>在文件末尾追加DNS</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DNS1=8.8.8.8</span><br><span class="line">DNS2=4.2.2.2</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>重启网络</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifup eth0</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>eth0</code> 是网卡名称， 可以使用命令 <code>ip addr</code> 查看。</p>
</blockquote>
<h4 id="wget-unable-to-resolve-host-address"><a href="#wget-unable-to-resolve-host-address" class="headerlink" title="wget: unable to resolve host address"></a>wget: unable to resolve host address</h4><p>wget：无法解析主机地址。这就能看出是DNS解析的问题</p>
<ol>
<li>打开 <code>/etc/resolv.conf</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/resolv.conf</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改内容为下</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nameserver 8.8.8.8</span><br><span class="line">search localdomain</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>然后重启network服</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>

<h4 id="git-clone-提示-fatal-HTTP-request-failed"><a href="#git-clone-提示-fatal-HTTP-request-failed" class="headerlink" title="git clone 提示 fatal: HTTP request failed"></a>git clone 提示 fatal: HTTP request failed</h4><ol>
<li>git版本太低 升级版本</li>
</ol>
<h4 id="yum安装时出现：Cannot-retrieve-metalink-for-repository-epel-Please-verify-its-path-and-try-again"><a href="#yum安装时出现：Cannot-retrieve-metalink-for-repository-epel-Please-verify-its-path-and-try-again" class="headerlink" title="yum安装时出现：Cannot retrieve metalink for repository: epel. Please verify its path and try again"></a>yum安装时出现：Cannot retrieve metalink for repository: epel. Please verify its path and try again</h4><ol>
<li>打开 <code>/etc/yum.repos.d/epel.repo</code><br> <code>vi /etc/yum.repos.d/epel.repo</code>, 按键 <code>i</code> 进入编辑模式，修改文件，按 <code>ESC</code> 进入 command 模式， 输入：<code>:wq</code> 保存退出。</li>
<li>将</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[epel]</span><br><span class="line">name=Extra Packages <span class="keyword">for</span> Enterprise Linux 6 – <span class="variable">$basearch</span></span><br><span class="line"><span class="comment">#baseurl=http://download.fedoraproject.org/pub/epel/6/$basearch</span></span><br><span class="line">mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&amp;arch=<span class="variable">$basearch</span></span><br></pre></td></tr></table></figure>
<p>修改为:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[epel]</span><br><span class="line">name=Extra Packages <span class="keyword">for</span> Enterprise Linux 6 – <span class="variable">$basearch</span></span><br><span class="line">baseurl=http://download.fedoraproject.org/pub/epel/6/<span class="variable">$basearch</span></span><br><span class="line"><span class="comment">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&amp;arch=$basearch</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>执行clean, 再重新安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum install 包名</span><br></pre></td></tr></table></figure>

<h4 id="git-command-not-found-amp-git-版本低"><a href="#git-command-not-found-amp-git-版本低" class="headerlink" title="git: command not found &amp; git 版本低"></a>git: command not found &amp; git 版本低</h4><p>安装git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install git -y</span><br></pre></td></tr></table></figure>

<p>一般情况下 <code>yum</code> 安装的版本较低(1.7), 想要升级 <code>git</code> 版本</p>
<ol>
<li>安装依赖</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class="line">yum install  gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>卸载旧版本</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br><span class="line"><span class="comment"># git version 1.7.1</span></span><br><span class="line"></span><br><span class="line">yum remove git</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>下载git新版本</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/src</span><br><span class="line">wget https://www.kernel.org/pub/software/scm/git/git-2.1.2.tar.gz</span><br><span class="line">tar xzf git-2.1.2.tar.gz</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>安装git并添加到环境变量中</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> git-2.1.2</span><br><span class="line">make prefix=/usr/<span class="built_in">local</span>/git all</span><br><span class="line">make prefix=/usr/<span class="built_in">local</span>/git install</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export PATH=<span class="variable">$PATH</span>:/usr/local/git/bin"</span> &gt;&gt; /etc/bashrc</span><br><span class="line"><span class="built_in">source</span> /etc/bashrc</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>查看版本号</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br><span class="line"><span class="comment"># git version 2.1.2</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript字符串</title>
    <url>/2017/03/31/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><h4 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h4><p>取出一个字符串中指定位置的字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"qhx0807520"</span>;</span><br><span class="line">str.charAt(<span class="number">1</span>); <span class="comment">//'h'</span></span><br></pre></td></tr></table></figure>
<h4 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title="charCodeAt()"></a>charCodeAt()</h4><p>取出一个字符串中指定位置字符的编码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.charCodeAt(<span class="number">0</span>); <span class="comment">//113</span></span><br></pre></td></tr></table></figure>
<h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>将一个或多个值连接在成一个字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.concat(<span class="string">'hello'</span>,<span class="string">'world'</span>); <span class="comment">//'qhx0807520helloworld'</span></span><br></pre></td></tr></table></figure>
<h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h4><p>在指定字符串中搜寻一个字符或者子串,有则返回字符的索引,没有则返回 -1。可选参数 start,指定开始位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.indexOf(<span class="string">'8'</span>); <span class="comment">//4</span></span><br><span class="line">str.indexOf(<span class="string">'9'</span>); <span class="comment">//-1</span></span><br></pre></td></tr></table></figure>
<h4 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h4><p>在指定字符串中向后寻找一个字符或者子串。</p>
<h4 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h4><p>执行查找与替换操作。如果想替换全部：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.replaceAll = <span class="function"><span class="keyword">function</span>(<span class="params">s1,s2</span>)</span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(s1,<span class="string">"gm"</span>),s2); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h4><p>返回String第一个匹配的子串的开始位置。如果没有则返回-1。search不执行全局匹配。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.search(<span class="string">'qhx'</span>);<span class="comment">//0</span></span><br><span class="line">str.search(<span class="string">'qx'</span>);<span class="comment">//-1</span></span><br></pre></td></tr></table></figure>
<h4 id="slice-start-end"><a href="#slice-start-end" class="headerlink" title="slice(start,end)"></a>slice(start,end)</h4><p>提取一个字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.slice(<span class="number">1</span>,<span class="number">4</span>);<span class="comment">//'hx0'</span></span><br><span class="line">str.slice(<span class="number">-2</span>,<span class="number">-1</span>);<span class="comment">//'2'</span></span><br></pre></td></tr></table></figure>
<h4 id="slice-substring-substr"><a href="#slice-substring-substr" class="headerlink" title="slice(),substring(),substr()"></a>slice(),substring(),substr()</h4><p>提取一个字符串。</p>
<h4 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h4><p>将一个字符串切分并返回一个数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"1:2:3:4:5"</span>.split(<span class="string">":"</span>);<span class="comment">//["1","2","3","4","5"]</span></span><br></pre></td></tr></table></figure>
<h4 id="toLowerCase-toUpperCase-toLocaleUpperCase-toLocaleLowrtCase"><a href="#toLowerCase-toUpperCase-toLocaleUpperCase-toLocaleLowrtCase" class="headerlink" title="toLowerCase(),toUpperCase(),toLocaleUpperCase(),toLocaleLowrtCase()"></a>toLowerCase(),toUpperCase(),toLocaleUpperCase(),toLocaleLowrtCase()</h4><p>字符串大小写转换。</p>
<h4 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h4><p>字符串开头和结尾处的空白都已移除。</p>
<h4 id="…"><a href="#…" class="headerlink" title="…"></a>…</h4>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript复制</title>
    <url>/2017/09/01/%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<h4 id="实现点击复制内容到剪切板。"><a href="#实现点击复制内容到剪切板。" class="headerlink" title="实现点击复制内容到剪切板。"></a>实现点击复制内容到剪切板。</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>copy<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span>copy<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://wzrd.in/standalone/copy-to-clipboard@latest"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="built_in">document</span>.querySelector(<span class="string">'#test'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">		copyToClipboard(<span class="string">"Hello, I'm new content from your clipboard"</span>)</span></span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>html5</tag>
        <tag>javascript</tag>
        <tag>copy</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的正则表达式</title>
    <url>/2017/05/10/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<ul>
<li>匹配中文字符的正则表达式：<code>[\u4e00-\u9fa5]</code> </li>
<li>匹配双字节字符（包括汉字在内）：<code>[^\x00-\xff]</code></li>
<li>匹配空行的正则表达式：<code>\n[\s| ]*\r</code></li>
<li>匹配 HTML 标记的正则表达式：<code>&lt;(.*)&gt;.*&lt;\/\1&gt;|&lt;(.*) \/&gt;</code></li>
<li>匹配首尾空格的正则表达式：<code>(^\s*)|(\s*$)</code></li>
<li>匹配 IP 地址的正则表达式：<code>/(\d+)\.(\d+)\.(\d+)\.(\d+)/g</code></li>
<li>匹配 Email 地址的正则表达式：<code>\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</code></li>
<li>匹配网址 URL 的正则表达式：<code>http://(/[\w-]+\.)+[\w-]+(/[\w- ./?%&amp;=]*)?</code></li>
<li>sql 语句：<code>^(select|drop|delete|create|update|insert).*$</code></li>
<li>非负整数：<code>^\d+$</code></li>
<li>正整数：<code>^[0-9]*[1-9][0-9]*$</code></li>
<li>非正整数：<code>^((-\d+)|(0+))$</code></li>
<li>负整数：<code>^-[0-9]*[1-9][0-9]*$</code></li>
<li>整数：<code>^-?\d+$</code></li>
<li>非负浮点数：<code>^\d+(\.\d+)?$</code></li>
<li>正浮点数：<code>^((0-9)+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</code></li>
<li>非正浮点数：<code>^((-\d+\.\d+)?)|(0+(\.0+)?))$</code></li>
<li>英文字符串：<code>^[A-Za-z]+$</code></li>
<li>英文大写串：<code>^[A-Z]+$</code></li>
<li>英文小写串：<code>^[a-z]+$</code></li>
<li>英文字符数字串：<code>^[A-Za-z0-9]+$</code></li>
<li>英数字加下划线串：<code>^\w+$</code></li>
</ul>
<a id="more"></a>

<ul>
<li>E-mail地址：<code>^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$</code></li>
<li>URL：<code>^[a-zA-Z]+://(\w+(-\w+)*)(\.(\w+(-\w+)*))*(\?\s*)?$ 或：^http:\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&amp;_~</code>@[]&#39;:+!]<em>([^&lt;&gt;&quot;&quot;])</em>$ `</li>
<li>邮政编码：<code>^[1-9]\d{5}$</code></li>
<li>电话号码：<code>^((\(\d{2,3}\))|(\d{3}\-))?(\(0\d{2,3}\)|0\d{2,3}-)?[1-9]\d{6,7}(\-\d{1,4})?$</code></li>
<li>手机号码：<code>^((\(\d{2,3}\))|(\d{3}\-))?13\d{9}$</code></li>
<li>匹配首尾空格：<code>(^\s*)|(\s*$)</code></li>
<li>匹配 HTML 标记：<code>&lt;(.*)&gt;.*&lt;\/\1&gt;|&lt;(.*) \/&gt;</code></li>
<li>匹配空行：<code>\n[\s| ]*\r</code></li>
<li>提取信息中的网络链接：<code>(h|H)(r|R)(e|E)(f|F) *= *(&#39;|&quot;)?(\w|\\|\/|\.)+(&#39;|&quot;| *|&gt;)?</code></li>
<li>提取信息中的邮件地址：<code>\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</code></li>
<li>提取信息中的图片链接：<code>(s|S)(r|R)(c|C) *= *(&#39;|&quot;)?(\w|\\|\/|\.)+(&#39;|&quot;| *|&gt;)?</code></li>
<li>提取信息中的 IP 地址：<code>(\d+)\.(\d+)\.(\d+)\.(\d+)</code></li>
<li>提取信息中的中国手机号码：<code>(86)*0*13\d{9}</code></li>
<li>提取信息中的中国固定电话号码：<code>(\(\d{3,4}\)|\d{3,4}-|\s)?\d{8}</code></li>
<li>提取信息中的中国电话号码（包括移动和固定电话）：<code>(\(\d{3,4}\)|\d{3,4}-|\s)?\d{7,14}</code></li>
<li>提取信息中的中国邮政编码：<code>[1-9]{1}(\d+){5}</code></li>
<li>提取信息中的浮点数（即小数）：<code>(-?\d*)\.?\d+</code></li>
<li>提取信息中的任何数字 ：<code>(-?\d*)(\.\d+)?</code> </li>
<li>电话区号：<code>^0\d{2,3}$</code></li>
<li>腾讯 QQ 号：<code>^[1-9]*[1-9][0-9]*$</code></li>
<li>帐号（字母开头，允许 5-16 字节，允许字母数字下划线）：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></li>
<li>中文、英文、数字及下划线：<code>^[\u4e00-\u9fa5_a-zA-Z0-9]+$</code></li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>reg</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序 canvas 生成分享海报</title>
    <url>/2019/11/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%94%9F%E6%88%90%E5%88%86%E4%BA%AB%E6%B5%B7%E6%8A%A5/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods = &#123;</span><br><span class="line">  onClickSave () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    wepy.saveImageToPhotosAlbum(&#123;</span><br><span class="line">      filePath: <span class="string">'filePath'</span>, <span class="comment">// 图片文件路径，可以是临时文件路径也可以是永久文件路径，不支持网络图片路径,</span></span><br><span class="line">      success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">      fail: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">      complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  getxcxCode () &#123;</span><br><span class="line">    Toast.loading(&#123;</span><br><span class="line">      duration: <span class="number">0</span>,</span><br><span class="line">      forbidClick: <span class="literal">true</span>,</span><br><span class="line">      message: <span class="string">'加载中...'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> userid = wepy.getStorageSync(<span class="string">'userid'</span>)</span><br><span class="line">    <span class="keyword">let</span> d = &#123;</span><br><span class="line">      page: <span class="string">'pages/goods'</span>,</span><br><span class="line">      imgname: <span class="string">`goods-<span class="subst">$&#123;<span class="keyword">this</span>.goodsinfo.goodsid&#125;</span>-<span class="subst">$&#123;userid&#125;</span>`</span>,</span><br><span class="line">      scene: <span class="string">`id=<span class="subst">$&#123;<span class="keyword">this</span>.goodsinfo.goodsid&#125;</span>?regimentaluserid=<span class="subst">$&#123;userid&#125;</span>`</span>,</span><br><span class="line">      width: <span class="number">70</span></span><br><span class="line">    &#125;</span><br><span class="line">    api(<span class="string">'/xcx/getwxacode'</span>, d)</span><br><span class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        Toast.clear()</span><br><span class="line">        <span class="keyword">if</span> (response.data.code === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.methods.downLoadImgs.call(<span class="keyword">this</span>, response.data.data.url)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          Toast(response.data.msg)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        Toast.clear()</span><br><span class="line">        Toast(error.toString())</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  downLoadImgs (codeurl) &#123;</span><br><span class="line">    <span class="keyword">let</span> goodsurl = <span class="keyword">this</span>.goodsinfo.goodsimg</span><br><span class="line">    wepy.downloadFile(&#123;</span><br><span class="line">      url: goodsurl,</span><br><span class="line">      success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">        <span class="keyword">this</span>.goodsImgPath = res.tempFilePath</span><br><span class="line">        wepy.downloadFile(&#123;</span><br><span class="line">          url: codeurl,</span><br><span class="line">          success: <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(r)</span><br><span class="line">            <span class="keyword">this</span>.codeImgPath = r.tempFilePath</span><br><span class="line">            <span class="keyword">this</span>.methods.drawCanvas.call(<span class="keyword">this</span>)</span><br><span class="line">          &#125;,</span><br><span class="line">          fail: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  drawCanvas () &#123;</span><br><span class="line">    <span class="keyword">let</span> context = wepy.createCanvasContext(<span class="string">'shareImg'</span>)</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="keyword">this</span>.goodsinfo</span><br><span class="line">    <span class="comment">// w220 h320</span></span><br><span class="line">    context.drawImage(<span class="keyword">this</span>.goodsImgPath, <span class="number">0</span>, <span class="number">0</span>, <span class="number">220</span>, <span class="number">200</span>)</span><br><span class="line">    context.drawImage(<span class="keyword">this</span>.codeImgPath, <span class="number">146</span>, <span class="number">204</span>, <span class="number">70</span>, <span class="number">70</span>)</span><br><span class="line"></span><br><span class="line">    context.setFillStyle(<span class="string">'black'</span>)</span><br><span class="line">    context.setFontSize(<span class="number">13</span>)</span><br><span class="line">    <span class="keyword">let</span> namearr = obj.goodsname.split(<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">let</span> len = <span class="built_in">Math</span>.ceil(namearr.length / <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        arr.push(namearr.slice(i * <span class="number">10</span>, i * <span class="number">10</span> + <span class="number">10</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> text = arr[i].join(<span class="string">''</span>)</span><br><span class="line">      context.fillText(text, <span class="number">5</span>, (<span class="number">224</span> + i * <span class="number">14</span>), <span class="number">200</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> h = arr.length * <span class="number">14</span></span><br><span class="line">    context.setFillStyle(<span class="string">'red'</span>)</span><br><span class="line">    context.setFontSize(<span class="number">14</span>)</span><br><span class="line">    context.fillText(<span class="string">'￥'</span>, <span class="number">5</span>, <span class="number">240</span>+h, <span class="number">50</span>)</span><br><span class="line">    context.setFillStyle(<span class="string">'red'</span>)</span><br><span class="line">    context.setFontSize(<span class="number">20</span>)</span><br><span class="line">    context.fillText(obj.goodsprice, <span class="number">20</span>, <span class="number">240</span>+h, <span class="number">100</span>)</span><br><span class="line">    context.draw()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信H5自动播放音频 ios</title>
    <url>/2018/09/22/%E5%BE%AE%E4%BF%A1H5%E8%87%AA%E5%8A%A8%E6%92%AD%E6%94%BE%E9%9F%B3%E9%A2%91%20ios/</url>
    <content><![CDATA[<p>要求微信H5一打开自动播放背景音乐，加上 <code>autoplay</code> 在ios上不管用</p>
<p>解决办法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myAuto = <span class="built_in">document</span>.getElementById(<span class="string">'audio'</span>)</span><br><span class="line">audio.play()</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"WeixinJSBridgeReady"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  myAuto.play()</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure>
<p>不用引入微信<code>jssdk</code>！</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>wechat H5</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序连接蓝牙设备</title>
    <url>/2020/03/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%BF%9E%E6%8E%A5%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87/</url>
    <content><![CDATA[<p><a href="https://developers.weixin.qq.com/community/develop/doc/0008acd004ccd86b37d649ee55b009" target="_blank" rel="noopener">小程序官方文档-低功耗蓝牙</a></p>
<p><img data-src="http://cdn.cqyyy.cn/pic/20200526162106.jpg" alt=""></p>
<a id="more"></a>

<h4 id="1-打开蓝牙适配器"><a href="#1-打开蓝牙适配器" class="headerlink" title="1.打开蓝牙适配器"></a>1.打开蓝牙适配器</h4><p>扫描并发现蓝牙外设。如果蓝牙功能未开启，可监听蓝牙状态变化以便自动进入下一步，提升用户体验。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'=========打开适配器============='</span>)</span><br><span class="line">wx.openBluetoothAdapter(&#123;</span><br><span class="line">  success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'初始化成功'</span>)</span><br><span class="line">    <span class="keyword">this</span>.startFindDivice() <span class="comment">// 调用开始搜索事件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  fail: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">    wx.showModal(&#123;</span><br><span class="line">      title: <span class="string">'提示'</span>,</span><br><span class="line">      content: <span class="string">'请检查手机蓝牙是否打开'</span>,</span><br><span class="line">      showCancel: <span class="literal">false</span>,</span><br><span class="line">      success: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setData(&#123; <span class="attr">reScanBtnShow</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="2-开始蓝牙设备搜索"><a href="#2-开始蓝牙设备搜索" class="headerlink" title="2.开始蓝牙设备搜索"></a>2.开始蓝牙设备搜索</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.startBluetoothDevicesDiscovery(&#123;</span><br><span class="line">  services: [],</span><br><span class="line">  success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"-----开始蓝牙设备搜索----------"</span>);</span><br><span class="line">    <span class="keyword">this</span>.onFindDivice() <span class="comment">//调用扫描设备监听事件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  fail: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123; <span class="attr">reScanBtnShow</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="3-监听蓝牙搜索结果"><a href="#3-监听蓝牙搜索结果" class="headerlink" title="3.监听蓝牙搜索结果"></a>3.监听蓝牙搜索结果</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> wx.onBluetoothDeviceFound(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res.devices)</span><br><span class="line">  <span class="comment">// 对搜索结果做处理</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="4-连接蓝牙外围设备"><a href="#4-连接蓝牙外围设备" class="headerlink" title="4.连接蓝牙外围设备"></a>4.连接蓝牙外围设备</h4><p>若之前连接过某个设备，可跳过扫描步骤，直接传入 deviceId 连接。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.createBLEConnection(&#123;</span><br><span class="line">  deviceId: <span class="keyword">this</span>.data.diviceInfo.deviceId,</span><br><span class="line">  success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    wx.showToast(&#123;</span><br><span class="line">      title: <span class="string">'连接成功'</span>,</span><br><span class="line">      icon: <span class="string">'success'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    wx.setNavigationBarTitle(&#123;</span><br><span class="line">      title: <span class="keyword">this</span>.data.diviceInfo.localName + <span class="string">'(已连接)'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.getServices()</span><br><span class="line">  &#125;,</span><br><span class="line">  error: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    wx.showModal(&#123;</span><br><span class="line">      title: <span class="string">'提示'</span>,</span><br><span class="line">      content: <span class="string">'连接设备失败'</span>+e.errMsg+e.errCode,</span><br><span class="line">      showCancel: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="5-查找蓝牙外围设备的服务"><a href="#5-查找蓝牙外围设备的服务" class="headerlink" title="5.查找蓝牙外围设备的服务"></a>5.查找蓝牙外围设备的服务</h4><p>每个蓝牙设备可能提供多个 Service，每个 Service 可能有多个 Characteristic，我们根据蓝牙设备的协议用对应的 Characteristic 进行读写即可达到与其通信的目的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.getBLEDeviceServices(&#123;</span><br><span class="line">  deviceId,</span><br><span class="line">  success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 服务</span></span><br><span class="line">    <span class="comment">// res.services []</span></span><br><span class="line">  &#125;,</span><br><span class="line">  fail: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">    wx.showToast(&#123;</span><br><span class="line">      title: <span class="string">'获取服务失败'</span>,</span><br><span class="line">      icon: <span class="string">'none'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="6-读写指定服务的特性值"><a href="#6-读写指定服务的特性值" class="headerlink" title="6.读写指定服务的特性值"></a>6.读写指定服务的特性值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.getBLEDeviceCharacteristics(&#123;</span><br><span class="line">  deviceId,</span><br><span class="line">  serviceId, <span class="comment">// 上一步获取的服务</span></span><br><span class="line">  success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    <span class="keyword">let</span> casid = res.characteristics.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> item.properties.write <span class="comment">// 可写</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> casnt = res.characteristics.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> item.properties.notify <span class="comment">// </span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  fail: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'========获取特征值失败！！==========='</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="7-发送指令"><a href="#7-发送指令" class="headerlink" title="7. 发送指令"></a>7. 发送指令</h4><p>根据硬件给的指令，一般长这个样子：<code>EF 01 FF FF FF FF 01 00 03 32 00 36</code>. 先要把装换为 <code>ArrayBuffer</code> 类型的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> code = <span class="string">'EF 01 FF FF FF FF 01 00 03 32 00 36'</span></span><br><span class="line"><span class="keyword">let</span> codeArr = code.split(<span class="string">' '</span>)</span><br><span class="line"><span class="keyword">let</span> buffer  = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(codeArr.length)</span><br><span class="line"><span class="keyword">let</span> dataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buffer)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; codeArr.length; j++) &#123;</span><br><span class="line">  dataView.setUint8(j, <span class="string">'0x'</span> + codeArr[j])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用上面转换的数据作为发送数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.writeBLECharacteristicValue(&#123;</span><br><span class="line">  deviceId, <span class="comment">// 设备id</span></span><br><span class="line">  serviceId, <span class="comment">// 服务id</span></span><br><span class="line">  characteristicId, <span class="comment">// 特征id 可写！</span></span><br><span class="line">  value: buffer, <span class="comment">// 上面的buffer</span></span><br><span class="line">  success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    wx.showToast(&#123;</span><br><span class="line">      title: <span class="string">'指令已发送'</span>,</span><br><span class="line">      icon: <span class="string">'success'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  fail: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="8-监听接收数据"><a href="#8-监听接收数据" class="headerlink" title="8. 监听接收数据"></a>8. 监听接收数据</h4><p>接收到的数据一般为16进制的数据，需要转换一下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ab2hex: <span class="function"><span class="keyword">function</span>(<span class="params">buffer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> hexArr = <span class="built_in">Array</span>.prototype.map.call(</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer),</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">bit</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="string">'00'</span> + bit.toString(<span class="number">16</span>)).slice(<span class="number">-2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">return</span> hexArr.join(<span class="string">''</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.notifyBLECharacteristicValueChange(&#123;</span><br><span class="line">  characteristicId,  <span class="comment">// 上面获取的特征值 属性notify为true</span></span><br><span class="line">  deviceId,</span><br><span class="line">  serviceId,</span><br><span class="line">  state: <span class="literal">true</span>,</span><br><span class="line">  success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    wx.onBLECharacteristicValueChange(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'改变了....'</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.ab2hex(val.value))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  fail: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol>
<li><p>在安卓上，部分机型无定位权限或者是定位开关未打开时会搜不到设备。原因是蓝牙功能是可以获取到定位的，系统基于安全考量，使用蓝牙接口时必须要有定位权限，否则搜索不到；</p>
</li>
<li><p>在安卓上，部分机型获取设备服务时会多出 00001800 和 00001801 UUID 的服务，这是系统行为，注意不要使用这两个服务;</p>
</li>
<li><p><strong>建立连接和关闭连接必须要成对调用</strong>。如果未能及时关闭连接释放资源，容易导致 state 133 GATT ERROR的异常；</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript中 apply,call,bind 方法的作用和区别</title>
    <url>/2019/06/30/%E6%90%9E%E6%87%82apply,call,bind%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>这三个方法都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部 this 的指向。</p>
<p>在 ES5 中，其实 <code>this</code> 的指向，始终坚持一个原理：<strong><code>this</code> 永远指向最后调用它的那个对象</strong>。</p>
<h4 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a><code>this</code>的指向</h4><p><strong><code>this</code> 永远指向最后调用它的那个对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'global name'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'scope name'</span></span><br><span class="line">  <span class="built_in">console</span>.log(name)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line"><span class="comment">// 'scope name'</span></span><br><span class="line"><span class="comment">// 'global name'  this.name</span></span><br></pre></td></tr></table></figure>
<p>上面调用 <code>foo</code> 的是 <code>window</code> (浏览器中), 相当于 <code>window.foo()</code>, 所有 <code>this.name</code> 为 <code>global name</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'global name'</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  name: <span class="string">'scope name'</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo.fn() <span class="comment">// 'scope name'</span></span><br></pre></td></tr></table></figure>
<p>调用 <code>fn</code> 的为 <code>window.foo</code>, 所有打印出的相当于 <code>window.foo.name</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'global name'</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  name: <span class="string">'scope name'</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = foo.fn</span><br><span class="line">f() <span class="comment">// 这里会打印出什么？</span></span><br></pre></td></tr></table></figure>
<p>上面会打印出 <code>&#39;global name&#39;</code>, 注意：<code>fn()</code> 最后是window调用的，所打出 <code>window.name</code></p>
<h4 id="改变-this-的指向"><a href="#改变-this-的指向" class="headerlink" title="改变 this 的指向"></a>改变 <code>this</code> 的指向</h4><p>使用 apply、call、bind 改变 <code>this</code> 的指向</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'global name'</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'scope name'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">foo() <span class="comment">// 'global name'</span></span><br><span class="line">foo.apply(obj)    <span class="comment">// 'scope name'</span></span><br><span class="line">foo.call(obj)     <span class="comment">// 'scope name'</span></span><br><span class="line">foo.bind(obj)()   <span class="comment">// 'scope name'</span></span><br></pre></td></tr></table></figure>
<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ol>
<li>apply()</li>
</ol>
<blockquote>
<p>apply() 方法调用一个函数, 其具有一个指定的this值，以及作为一个数组（或类似数组的对象）提供的参数.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fun.apply(thisArg, [argsArray])</span><br></pre></td></tr></table></figure>
<ul>
<li><p>thisArg：在 <code>fun</code> 函数运行时指定的 <code>this</code> 值。需要注意的是，指定的 <code>this</code> 值并不一定是该函数执行时真正的 <code>this</code> 值，如果这个函数处于非严格模式下，则指定为 <code>null</code> 或 <code>undefined</code> 时会自动指向全局对象（浏览器中就是window对象），同时值为原始值（数字，字符串，布尔值）的 <code>this</code> 会指向该原始值的自动包装对象。</p>
</li>
<li><p>argsArray：一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 <code>fun</code> 函数。如果该参数的值为 <code>null</code> 或 <code>undefined</code>，则表示不需要传入任何参数。从ECMAScript 5 开始可以使用类数组对象。</p>
</li>
</ul>
<ol start="2">
<li>call()</li>
</ol>
<blockquote>
<p>call() 该方法的语法和作用与 <code>apply()</code> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是一个参数列表，而 <code>apply()</code> 方法接受的是一个包含多个参数的数组。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fun.call(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>bind()</li>
</ol>
<blockquote>
<p>bind()方法创建一个新的函数，在bind()被调用时，这个新函数的this被bind的第一个参数指定，其余的参数将作为新函数的参数供调用时使用。</p>
</blockquote>
<p>bind 是创建一个新的函数，必须要手动去调用!</p>
<p>fn.bind(thisArg)([, arg1[, arg2[, …]]])</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj =&#123;</span><br><span class="line">  name : <span class="string">"my name"</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.fn.apply(obj, [<span class="number">1</span>, <span class="number">3</span>]) <span class="comment">// 4</span></span><br><span class="line">obj.fn.call(obj, <span class="number">1</span>, <span class="number">3</span>)    <span class="comment">// 4</span></span><br><span class="line">obj.fn.bind(obj)(<span class="number">1</span>, <span class="number">3</span>)    <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>打字机效果</title>
    <url>/2017/05/07/%E6%89%93%E5%AD%97%E6%9C%BA%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p>模拟打字过程        在线演示：<a href="https://www.baidu.com" target="_blank" rel="noopener">普通链接带标题</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> typewriterArr = [],</span><br><span class="line">	typewritering = <span class="literal">false</span>,</span><br><span class="line">	typewriterID = <span class="number">-1</span>,</span><br><span class="line">	typewriterTime = <span class="number">300</span>,</span><br><span class="line"><span class="keyword">var</span> typewriterEffect = <span class="function"><span class="keyword">function</span>(<span class="params">e, str, color</span>)</span>&#123;<span class="comment">//增加显示的元素</span></span><br><span class="line">    typewriterArr.push(&#123;</span><br><span class="line">        <span class="string">"context"</span> : e,<span class="comment">//目标元素上下文</span></span><br><span class="line">        <span class="string">"str"</span> : str,<span class="comment">//显示的元素</span></span><br><span class="line">        <span class="string">"lening"</span>:<span class="number">0</span>,<span class="comment">//截取的进度</span></span><br><span class="line">        <span class="string">"maxLength"</span>:str.length<span class="comment">//最大进度</span></span><br><span class="line">    &#125;);</span><br><span class="line">    e.style.color = color || <span class="string">"#000000"</span>;<span class="comment">//设置元素颜色</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> closeTypewriter = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    clearTimeout(typewriterID);</span><br><span class="line">    typewritering = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> typewriterUi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">            l = typewriterArr.length,</span><br><span class="line">            eing = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; l; i++)&#123;</span><br><span class="line">        eing = typewriterArr[i];</span><br><span class="line">        eing.lening++;</span><br><span class="line">        <span class="keyword">if</span>(eing.lening &gt; eing.maxLength) eing.lening = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//显示截取的字符</span></span><br><span class="line">        eing.context.innerHTML = eing.str.substring(<span class="number">0</span>, eing.lening) + <span class="string">"_"</span>;</span><br><span class="line">        <span class="comment">//if(eing.lening &gt; eing.maxLength) eing.context.innerHTML = eing.str.substring(0, eing.lening) + "";</span></span><br><span class="line">    &#125;</span><br><span class="line">    typewriterID = setTimeout(typewriterUi, typewriterTime);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//开启间时调用 ， 参数为设置时间</span></span><br><span class="line"><span class="keyword">var</span> startTypewriter = <span class="function"><span class="keyword">function</span>(<span class="params">time</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!typewritering)&#123;</span><br><span class="line">        typewriterTime = time || typewriterTime;</span><br><span class="line">        typewriterUi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">typewriterEffect(</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"typewriterEffect"</span>),</span><br><span class="line">            <span class="string">"《朝花夕拾》原名《旧事重提》，是现代文学家鲁迅的散文集，收录鲁迅于1926年创作的10篇回忆性散文，1928年由北京未名社初版，现编入《鲁迅全集》第2卷。"</span>);</span><br><span class="line">startTypewriter(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript数组</title>
    <url>/2017/03/06/%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h4 id="判定数组类型"><a href="#判定数组类型" class="headerlink" title="判定数组类型"></a>判定数组类型</h4><p><code>Arry.isArray([])</code>,<code>instanceof Array</code></p>
<h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p>把所有元素都转化为字符串并拼接在一起，返回生成的字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">a.join(); <span class="comment">//"1,2,3"</span></span><br><span class="line">a.join(<span class="string">""</span>);<span class="string">"123"</span>;</span><br></pre></td></tr></table></figure>

<h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>把元素连接到数组中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">a.concat(<span class="number">4</span>,<span class="number">5</span>);<span class="comment">//返回[1,2,3,4,5]</span></span><br><span class="line">a.concat([<span class="number">4</span>,<span class="number">5</span>]);<span class="comment">//返回[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>
<h4 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h4><p>测试断言函数是否对每一个元素为真。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].every(<span class="function"><span class="params">x</span> =&gt;</span> x&lt;<span class="number">7</span>);<span class="comment">//true</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].every(<span class="function"><span class="params">x</span> =&gt;</span> x&lt;<span class="number">5</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<h4 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h4><p>测试是否存在一个元素对断言函数为真。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].some(<span class="function"><span class="params">x</span> =&gt;</span> x&lt;<span class="number">3</span>);<span class="comment">//true</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].some(<span class="function"><span class="params">x</span> =&gt;</span> x&lt;<span class="number">1</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><p>返回通过断言函数的数组元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].filter(<span class="function"><span class="params">x</span> =&gt;</span> x&lt;<span class="number">3</span>);<span class="comment">//[1,2];</span></span><br></pre></td></tr></table></figure>
<h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><p>为每一个数组元素调用一个函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].forEach(<span class="function">(<span class="params">x,i,a</span>) =&gt;</span> a[i]++);<span class="comment">//a = [2,3,4];</span></span><br></pre></td></tr></table></figure>
<h4 id="indexOf-lastIndexOf"><a href="#indexOf-lastIndexOf" class="headerlink" title="indexOf(),lastIndexOf()"></a>indexOf(),lastIndexOf()</h4><p>查找数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].indexOf(<span class="number">1</span>);<span class="comment">//0</span></span><br></pre></td></tr></table></figure>
<h4 id="join-1"><a href="#join-1" class="headerlink" title="join()"></a>join()</h4><p>将数组元素衔接成字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].join(<span class="string">'+'</span>);<span class="comment">//"1+2+3"</span></span><br></pre></td></tr></table></figure>
<h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><p>map将会创建一个新数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x*x);<span class="comment">//=&gt; [1,4,9]</span></span><br></pre></td></tr></table></figure>
<h4 id="pop-shift"><a href="#pop-shift" class="headerlink" title="pop(), shift()"></a>pop(), shift()</h4><p>移除并返回数组的最后一个(第一个)元素。</p>
<h4 id="push-unshift"><a href="#push-unshift" class="headerlink" title="push(), unshift()"></a>push(), unshift()</h4><p>给数组追加元素。</p>
<h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h4><p>缩减数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].reduce(<span class="function">(<span class="params">x,y</span>) =&gt;</span> x*y);<span class="comment">//24:((1*2)*3)*4</span></span><br></pre></td></tr></table></figure>
<h4 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight()"></a>reduceRight()</h4><p>缩减数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">2</span>,<span class="number">10</span>,<span class="number">60</span>].reduceRight(<span class="function">(<span class="params">x,y</span>) =&gt;</span> x/y);<span class="comment">//3:(60/10)/2</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><p>颠倒数组中元素的顺序</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].reverse(); <span class="comment">//=&gt; [3,2,1]</span></span><br></pre></td></tr></table></figure>
<h4 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h4><p>返回数组的一部分。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].slice(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">//=&gt; [2,3]</span></span><br></pre></td></tr></table></figure>
<h4 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h4><p>插入，删除，替换数组元素。splice(start,delCount,…value)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line">a.splice(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//返回：[2,3], a = [1,4,5,6,7,8]</span></span><br><span class="line">a.splice(<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//返回：[], a = [1,2,3,2,3,4,5,6,7,8]</span></span><br></pre></td></tr></table></figure>
<h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p>对数组元素进行排序。在原数组中进行排序。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">32</span>,<span class="number">1111</span>,<span class="number">2222222</span>,<span class="number">4</span>].sort();<span class="comment">//=&gt; [1111,2222222,32,4]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numberSort</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="number">32</span>,<span class="number">1111</span>,<span class="number">2222222</span>,<span class="number">4</span>].sort(numberSort);<span class="comment">//=&gt; [4,32,1111,2222222]</span></span><br></pre></td></tr></table></figure>
<h4 id="toLocaleString-toString"><a href="#toLocaleString-toString" class="headerlink" title="toLocaleString(), toString()"></a>toLocaleString(), toString()</h4><p>转为字符串。</p>
<h4 id="…"><a href="#…" class="headerlink" title="…"></a>…</h4>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>array</tag>
      </tags>
  </entry>
  <entry>
    <title>js日期格式化</title>
    <url>/2017/05/27/%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    <content><![CDATA[<p>javascript Date format (js日期格式化)<br><code>new Date().Format(&quot;yyyy-MM-DD hh:mm:ss&quot;)</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Date</span>.prototype.Format = <span class="function"><span class="keyword">function</span>(<span class="params">formatStr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = formatStr;</span><br><span class="line">    <span class="keyword">var</span> Week = [<span class="string">'日'</span>, <span class="string">'一'</span>, <span class="string">'二'</span>, <span class="string">'三'</span>, <span class="string">'四'</span>, <span class="string">'五'</span>, <span class="string">'六'</span>];</span><br><span class="line">    str = str.replace(<span class="regexp">/yyyy|YYYY/</span>, <span class="keyword">this</span>.getFullYear());</span><br><span class="line">    str = str.replace(<span class="regexp">/yy|YY/</span>, (<span class="keyword">this</span>.getYear() % <span class="number">100</span>) &gt; <span class="number">9</span> ? (<span class="keyword">this</span>.getYear() % <span class="number">100</span>).toString() : <span class="string">'0'</span> + (<span class="keyword">this</span>.getYear() % <span class="number">100</span>));</span><br><span class="line">    str = str.replace(<span class="regexp">/MM/</span>, (<span class="keyword">this</span>.getMonth() + <span class="number">1</span>) &gt; <span class="number">9</span> ? (<span class="keyword">this</span>.getMonth() + <span class="number">1</span>).toString() : <span class="string">'0'</span> + (<span class="keyword">this</span>.getMonth() + <span class="number">1</span>));</span><br><span class="line">    str = str.replace(<span class="regexp">/M/g</span>, (<span class="keyword">this</span>.getMonth() + <span class="number">1</span>));</span><br><span class="line">    str = str.replace(<span class="regexp">/w|W/g</span>, Week[<span class="keyword">this</span>.getDay()]);</span><br><span class="line">    str = str.replace(<span class="regexp">/dd|DD/</span>, <span class="keyword">this</span>.getDate() &gt; <span class="number">9</span> ? <span class="keyword">this</span>.getDate().toString() : <span class="string">'0'</span> + <span class="keyword">this</span>.getDate());</span><br><span class="line">    str = str.replace(<span class="regexp">/d|D/g</span>, <span class="keyword">this</span>.getDate());</span><br><span class="line">    str = str.replace(<span class="regexp">/hh|HH/</span>, <span class="keyword">this</span>.getHours() &gt; <span class="number">9</span> ? <span class="keyword">this</span>.getHours().toString() : <span class="string">'0'</span> + <span class="keyword">this</span>.getHours());</span><br><span class="line">    str = str.replace(<span class="regexp">/h|H/g</span>, <span class="keyword">this</span>.getHours());</span><br><span class="line">    str = str.replace(<span class="regexp">/mm/</span>, <span class="keyword">this</span>.getMinutes() &gt; <span class="number">9</span> ? <span class="keyword">this</span>.getMinutes().toString() : <span class="string">'0'</span> + <span class="keyword">this</span>.getMinutes());</span><br><span class="line">    str = str.replace(<span class="regexp">/m/g</span>, <span class="keyword">this</span>.getMinutes());</span><br><span class="line">    str = str.replace(<span class="regexp">/ss|SS/</span>, <span class="keyword">this</span>.getSeconds() &gt; <span class="number">9</span> ? <span class="keyword">this</span>.getSeconds().toString() : <span class="string">'0'</span> + <span class="keyword">this</span>.getSeconds());</span><br><span class="line">    str = str.replace(<span class="regexp">/s|S/g</span>, <span class="keyword">this</span>.getSeconds());</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>date</tag>
      </tags>
  </entry>
  <entry>
    <title>JS解析树形对象</title>
    <url>/2017/04/20/%E6%A0%91%E5%BD%A2%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>js递归</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	<span class="string">'name'</span>: <span class="string">'aa'</span>,</span><br><span class="line">    	<span class="string">'children'</span> : &#123;</span><br><span class="line">        	<span class="string">'name'</span>: <span class="string">'bb'</span>,</span><br><span class="line">        	<span class="string">'children'</span> : &#123;...&#125; <span class="comment">// 里面包含若干个类似结构的对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>obj.hasOwnProperty(prop)</code></p>
<h4 id="返回值：用来判断某个对象是否含有指定的属性的-Boolean-。"><a href="#返回值：用来判断某个对象是否含有指定的属性的-Boolean-。" class="headerlink" title="返回值：用来判断某个对象是否含有指定的属性的 Boolean 。"></a>返回值：用来判断某个对象是否含有指定的属性的 Boolean 。</h4><p>所有继承了 Object 的对象都会继承到 hasOwnProperty 方法。这个方法可以用来检测一个对象是否含有特定的自身属性；和 in 运算符不同，该方法会忽略掉那些从原型链上继承到的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">get</span> = (&#123; children &#125;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!children.hasOwnProperty(<span class="string">'children'</span>)) <span class="keyword">return</span> children;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">get</span>(children);</span><br><span class="line">&#125;</span><br><span class="line">let item = <span class="keyword">get</span>(a);</span><br><span class="line">item.name = 'ee';</span><br></pre></td></tr></table></figure>
<p>在项目中，还遇到类似这种数据：如多级菜单，权限选择树</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json = [&#123;</span><br><span class="line">        name: <span class="string">'aa'</span>,</span><br><span class="line">        children: &#123;</span><br><span class="line">            name: <span class="string">'bb'</span>,</span><br><span class="line">            children: &#123;</span><br><span class="line">                name: <span class="string">"cc"</span>,</span><br><span class="line">                children: &#123;&#125; <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: <span class="string">"11"</span>,</span><br><span class="line">        children: &#123;</span><br><span class="line">            name: <span class="string">"22"</span>,</span><br><span class="line">            children: &#123;</span><br><span class="line">                name: <span class="string">"33"</span>,</span><br><span class="line">                children: &#123;&#125; <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure>
<h4 id="将-json-解析为-list（递归）"><a href="#将-json-解析为-list（递归）" class="headerlink" title="将 json 解析为 list（递归）"></a>将 json 解析为 list（递归）</h4><a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> l = json.length;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> jsonArray = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> jsonArray) &#123;</span><br><span class="line">                <span class="keyword">if</span> (k.indexOf(<span class="string">'children'</span>) != <span class="number">-1</span> &amp;&amp; jsonArray[k] != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="built_in">arguments</span>.callee(jsonArray[k]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (k == <span class="string">'name'</span> || k == <span class="string">'children'</span>) &#123;</span><br><span class="line">                        arr.push(jsonArray[k]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)(json[i]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure>
<p>这里用到 <code>arguments.callee()</code> </p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器渲染页面的过程</title>
    <url>/2019/04/15/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>简明扼要介绍下页面的加载过程，有助于更好理解后续渲染过程。</p>
<h4 id="页面加载过程"><a href="#页面加载过程" class="headerlink" title="页面加载过程"></a>页面加载过程</h4><p>要点如下：</p>
<ul>
<li>浏览器根据 DNS 服务器得到域名的 IP 地址</li>
<li>向这个 IP 的机器发送 HTTP 请求</li>
<li>服务器收到、处理并返回 HTTP 请求</li>
<li>浏览器得到返回内容</li>
</ul>
<h4 id="浏览器渲染过程"><a href="#浏览器渲染过程" class="headerlink" title="浏览器渲染过程"></a>浏览器渲染过程</h4><p><img data-src="http://cdn.cqyyy.cn/pic/20190528110827.png" alt=""></p>
<a id="more"></a>
<p>浏览器渲染过程大体分为如下三部分：</p>
<ol>
<li><p>浏览器会解析三个东西：</p>
<ul>
<li><p>一是HTML/SVG/XHTML，HTML字符串描述了一个页面的结构，浏览器会把HTML结构字符串解析转换DOM树形结构。</p>
</li>
<li><p>二是CSS，解析CSS会产生CSS规则树，它和DOM结构比较像。</p>
</li>
<li><p>三是Javascript脚本，等到Javascript 脚本文件加载后， 通过 DOM API 和 CSSOM API 来操作 DOM Tree 和 CSS Rule Tree。</p>
</li>
</ul>
</li>
<li><p>解析完成后，浏览器引擎会通过DOM Tree 和 CSS Rule Tree 来构造 Rendering Tree。</p>
<ul>
<li><p>Rendering Tree 渲染树并不等同于DOM树，渲染树只会包括需要显示的节点和这些节点的样式信息。</p>
</li>
<li><p>CSS 的 Rule Tree主要是为了完成匹配并把CSS Rule附加上Rendering Tree上的每个Element（也就是每个Frame）。</p>
</li>
<li><p>然后，计算每个Frame 的位置，这又叫layout和reflow过程。</p>
</li>
</ul>
</li>
<li><p>最后通过调用操作系统Native GUI的API绘制。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>用node写一个生成文件目录结构的命令行工具</title>
    <url>/2019/06/26/%E7%94%A8node%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>以树形结构显示文件目录结构，生成txt文件，非常适合介绍项目文件目录的组成框架。<a href="https://github.com/qhx0807/file-tree-generator" target="_blank" rel="noopener">Github</a></p>
<p><img data-src="http://cdn.cqyyy.cn/pic/20190711160048.png" alt=""></p>
<h4 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h4><p><code>#!/usr/bin/env node</code></p>
<p>文件的头部务必加入 <code>#!/usr/bin/env node</code> 这行代码，这里表示使用node作为脚本的解释程序，node的路径通过env来查找。新建一个 index.js 文件，<br>想在命令行工具中输入 <code>filetree</code> 就执行 index.js.</p>
<p>在 <code>package.json</code> 中添加：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"bin": &#123;</span><br><span class="line">  "filetree": "index.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="npm-link"><a href="#npm-link" class="headerlink" title="npm link"></a>npm link</h4><p>在本地开发npm模块的时候，我们可以使用npm link命令，将npm 模块链接到对应的运行项目中去，方便地对模块进行调试和测试。<br>在项目中执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm link</span><br></pre></td></tr></table></figure>

<h4 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h4><p>用到的node模块</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br></pre></td></tr></table></figure>

<p>递归获取文件目录信息，第一个参数：目录路径，第二个参数：递归的深度<br>默认忽略 <code>node_modules</code> 和 <code>.git</code> 目录。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fileMap = <span class="function">(<span class="params">dir, deep</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (dir.indexOf(<span class="string">'node_modules'</span>) &gt; <span class="number">-1</span> || dir.indexOf(<span class="string">'.git'</span>) &gt; <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> files = fs.readdirSync(dir)</span><br><span class="line">  <span class="keyword">let</span> maps = []</span><br><span class="line">  files.forEach(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> filepath = resolve(dir, file)</span><br><span class="line">    <span class="keyword">const</span> isdir = fs.statSync(filepath).isDirectory()</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;</span><br><span class="line">      name: file,</span><br><span class="line">      isdir: isdir,</span><br><span class="line">      deep: deep,</span><br><span class="line">      children: []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isdir) &#123;</span><br><span class="line">      <span class="keyword">let</span> d = deep + <span class="number">1</span></span><br><span class="line">      obj.children = fileMap(filepath, d)</span><br><span class="line">    &#125;</span><br><span class="line">    maps.push(obj)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> maps</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>process.cwd()主要是进程的当前目录</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> filestack = fileMap(process.cwd(), <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>拼凑字符串然后输出txt文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fileOutPutLog = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">''</span></span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; item.deep) &#123;</span><br><span class="line">      str += charSet.pipe</span><br><span class="line">      i++</span><br><span class="line">    &#125;</span><br><span class="line">    str += (index === arr.length - <span class="number">1</span> &amp;&amp; item.children.length === <span class="number">0</span>) ? charSet.last : charSet.node</span><br><span class="line">    str += item.isdir ? <span class="string">` /<span class="subst">$&#123;item.name&#125;</span>/\r\n`</span> : <span class="string">` <span class="subst">$&#123;item.name&#125;</span>\r\n`</span></span><br><span class="line">    <span class="keyword">if</span> (item.children.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      str += fileOutPutLog(item.children)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> contents = fileOutPutLog(filestack)</span><br><span class="line">fs.writeFile(process.cwd() + <span class="string">'/filetree.txt'</span>, contents, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'-------目录树文件filetree.txt已创建-------'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>在想生成文件结构的目录中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ filetree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出现</span></span><br><span class="line"><span class="comment"># -------目录树文件filetree.txt已创建-------</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>禁止浏览器回退，鼠标点击，Backspace键</title>
    <url>/2018/06/18/%E7%A6%81%E6%AD%A2%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9B%9E%E9%80%80/</url>
    <content><![CDATA[<p>消除网页后退的所有动作，包括 键盘、鼠标手势等产生的后退动作。<br>(HI集管理平台锁屏功能)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 防止页面后退</span></span><br><span class="line">history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="built_in">document</span>.URL)</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="built_in">document</span>.URL)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>trick</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次爬虫自动登录密码RSA加密</title>
    <url>/2019/09/15/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%88%AC%E8%99%AB%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<p>为了避免密码以明文传输，很多网站都在登录是对密码加密。</p>
<p><img data-src="http://cdn.cqyyy.cn/pic/20190923092905.png" alt=""></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 明文密码: 123456</span></span><br><span class="line"><span class="comment">// 加密后为: 3a4ee3990a6ab88388eff6d262a1675aa6a72b550f254fb9d77d926de788e8cdefd087a618ee97e413d7e17a874e37aa8255347cd9dfcbaf3f966939751f9e77931597bb42eb90489964fb982f0f2172983f8e86d3103aaaece21436bb456e15165c3d161f160ce2679eba9dd0a2d7591fc8b3a0d6bfcbe21b63606133ffb6f4</span></span><br></pre></td></tr></table></figure>

<p>通过分析前端代码，Chrome断点调试，发现以下代码：</p>
<p><img data-src="http://cdn.cqyyy.cn/pic/20190923093611.png" alt=""></p>
<p>最终确定此网站的加密方式为RSA加密。</p>
<p>现将完整的加密代码整理下。</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 具体加密代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HelloShit</span>(<span class="params">i, t, e, r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.e = biFromHex(i),</span><br><span class="line">    <span class="keyword">this</span>.d = biFromHex(t),</span><br><span class="line">    <span class="keyword">this</span>.m = biFromHex(e),</span><br><span class="line">    <span class="keyword">this</span>.chunkSize = <span class="string">"number"</span> != <span class="keyword">typeof</span> r ? <span class="number">2</span> * biHighIndex(<span class="keyword">this</span>.m) : r / <span class="number">8</span>,</span><br><span class="line">    <span class="keyword">this</span>.radix = <span class="number">16</span>,</span><br><span class="line">    <span class="keyword">this</span>.barrett = <span class="keyword">new</span> BarrettMu(<span class="keyword">this</span>.m)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hzasieckses</span>(<span class="params">i, t, e, r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n, s, o, a, g, d, u, l, h, b = <span class="keyword">new</span> <span class="built_in">Array</span>, c = t.length, f = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (a = <span class="string">"string"</span> == <span class="keyword">typeof</span> e ? e == RSAAPP.NoPadding ? <span class="number">1</span> : e == RSAAPP.PKCS1Padding ? <span class="number">2</span> : <span class="number">0</span> : <span class="number">0</span>,</span><br><span class="line">    g = <span class="string">"string"</span> == <span class="keyword">typeof</span> r &amp;&amp; r == RSAAPP.RawEncoding ? <span class="number">1</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span> == a ? c &gt; i.chunkSize &amp;&amp; (c = i.chunkSize) : <span class="number">2</span> == a &amp;&amp; c &gt; i.chunkSize - <span class="number">11</span> &amp;&amp; (c = i.chunkSize - <span class="number">11</span>),</span><br><span class="line">    n = <span class="number">0</span>,</span><br><span class="line">    s = <span class="number">2</span> == a ? c - <span class="number">1</span> : i.chunkSize - <span class="number">1</span>; n &lt; c; )</span><br><span class="line">        a ? b[s] = t.charCodeAt(n) : b[n] = t.charCodeAt(n),</span><br><span class="line">        n++,</span><br><span class="line">        s--;</span><br><span class="line">    <span class="keyword">for</span> (<span class="number">1</span> == a &amp;&amp; (n = <span class="number">0</span>),</span><br><span class="line">    s = i.chunkSize - c % i.chunkSize; s &gt; <span class="number">0</span>; ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> == a) &#123;</span><br><span class="line">            <span class="keyword">for</span> (d = <span class="built_in">Math</span>.floor(<span class="number">256</span> * <span class="built_in">Math</span>.random()); !d; )</span><br><span class="line">                d = <span class="built_in">Math</span>.floor(<span class="number">256</span> * <span class="built_in">Math</span>.random());</span><br><span class="line">            b[n] = d</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            b[n] = <span class="number">0</span>;</span><br><span class="line">        n++,</span><br><span class="line">        s--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="number">2</span> == a &amp;&amp; (b[c] = <span class="number">0</span>,</span><br><span class="line">    b[i.chunkSize - <span class="number">2</span>] = <span class="number">2</span>,</span><br><span class="line">    b[i.chunkSize - <span class="number">1</span>] = <span class="number">0</span>),</span><br><span class="line">    u = b.length,</span><br><span class="line">    n = <span class="number">0</span>; n &lt; u; n += i.chunkSize) &#123;</span><br><span class="line">        <span class="keyword">for</span> (l = <span class="keyword">new</span> BigInt,</span><br><span class="line">        s = <span class="number">0</span>,</span><br><span class="line">        o = n; o &lt; n + i.chunkSize; ++s)</span><br><span class="line">            l.digits[s] = b[o++],</span><br><span class="line">            l.digits[s] += b[o++] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">        h = i.barrett.powMod(l, i.e),</span><br><span class="line">        f += <span class="number">1</span> == g ? biToBytes(h) : <span class="number">16</span> == i.radix ? biToHex(h) : biToString(h, i.radix)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decryptedString</span>(<span class="params">i, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e, r, n, s, o = t.split(<span class="string">" "</span>), a = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; o.length; ++r)</span><br><span class="line">        <span class="keyword">for</span> (s = <span class="number">16</span> == i.radix ? biFromHex(o[r]) : biFromString(o[r], i.radix),</span><br><span class="line">        e = i.barrett.powMod(s, i.d),</span><br><span class="line">        n = <span class="number">0</span>; n &lt;= biHighIndex(e); ++n)</span><br><span class="line">            a += <span class="built_in">String</span>.fromCharCode(<span class="number">255</span> &amp; e.digits[n], e.digits[n] &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> == a.charCodeAt(a.length - <span class="number">1</span>) &amp;&amp; (a = a.substring(<span class="number">0</span>, a.length - <span class="number">1</span>)),</span><br><span class="line">    a</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BarrettMu</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.modulus = biCopy(i),</span><br><span class="line">    <span class="keyword">this</span>.k = biHighIndex(<span class="keyword">this</span>.modulus) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">new</span> BigInt;</span><br><span class="line">    t.digits[<span class="number">2</span> * <span class="keyword">this</span>.k] = <span class="number">1</span>,</span><br><span class="line">    <span class="keyword">this</span>.mu = biDivide(t, <span class="keyword">this</span>.modulus),</span><br><span class="line">    <span class="keyword">this</span>.bkplus1 = <span class="keyword">new</span> BigInt,</span><br><span class="line">    <span class="keyword">this</span>.bkplus1.digits[<span class="keyword">this</span>.k + <span class="number">1</span>] = <span class="number">1</span>,</span><br><span class="line">    <span class="keyword">this</span>.modulo = BarrettMu_modulo,</span><br><span class="line">    <span class="keyword">this</span>.multiplyMod = BarrettMu_multiplyMod,</span><br><span class="line">    <span class="keyword">this</span>.powMod = BarrettMu_powMod</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BarrettMu_modulo</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t = biDivideByRadixPower(biMultiply(biDivideByRadixPower(i, <span class="keyword">this</span>.k - <span class="number">1</span>), <span class="keyword">this</span>.mu), <span class="keyword">this</span>.k + <span class="number">1</span>)</span><br><span class="line">      , e = biSubtract(biModuloByRadixPower(i, <span class="keyword">this</span>.k + <span class="number">1</span>), biModuloByRadixPower(biMultiply(t, <span class="keyword">this</span>.modulus), <span class="keyword">this</span>.k + <span class="number">1</span>));</span><br><span class="line">    e.isNeg &amp;&amp; (e = biAdd(e, <span class="keyword">this</span>.bkplus1));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> r = biCompare(e, <span class="keyword">this</span>.modulus) &gt;= <span class="number">0</span>; r; )</span><br><span class="line">        e = biSubtract(e, <span class="keyword">this</span>.modulus),</span><br><span class="line">        r = biCompare(e, <span class="keyword">this</span>.modulus) &gt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BarrettMu_multiplyMod</span>(<span class="params">i, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = biMultiply(i, t);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.modulo(e)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BarrettMu_powMod</span>(<span class="params">i, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="keyword">new</span> BigInt;</span><br><span class="line">    e.digits[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> r = i, n = t; <span class="number">0</span> != (<span class="number">1</span> &amp; n.digits[<span class="number">0</span>]) &amp;&amp; (e = <span class="keyword">this</span>.multiplyMod(e, r)),</span><br><span class="line">    <span class="number">0</span> != (n = biShiftRight(n, <span class="number">1</span>)).digits[<span class="number">0</span>] || <span class="number">0</span> != biHighIndex(n); )</span><br><span class="line">        r = <span class="keyword">this</span>.multiplyMod(r, r);</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setMaxDigits</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    maxDigits = i,</span><br><span class="line">    ZERO_ARRAY = <span class="keyword">new</span> <span class="built_in">Array</span>(maxDigits);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>; t &lt; ZERO_ARRAY.length; t++)</span><br><span class="line">        ZERO_ARRAY[t] = <span class="number">0</span>;</span><br><span class="line">    bigZero = <span class="keyword">new</span> BigInt,</span><br><span class="line">    (bigOne = <span class="keyword">new</span> BigInt).digits[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BigInt</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.digits = <span class="string">"boolean"</span> == <span class="keyword">typeof</span> i &amp;&amp; <span class="number">1</span> == i ? <span class="literal">null</span> : ZERO_ARRAY.slice(<span class="number">0</span>),</span><br><span class="line">    <span class="keyword">this</span>.isNeg = !<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biFromDecimal</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t, e = <span class="string">"-"</span> == i.charAt(<span class="number">0</span>), r = e ? <span class="number">1</span> : <span class="number">0</span>; r &lt; i.length &amp;&amp; <span class="string">"0"</span> == i.charAt(r); )</span><br><span class="line">        ++r;</span><br><span class="line">    <span class="keyword">if</span> (r == i.length)</span><br><span class="line">        t = <span class="keyword">new</span> BigInt;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> n = (i.length - r) % dpl10;</span><br><span class="line">        <span class="keyword">for</span> (<span class="number">0</span> == n &amp;&amp; (n = dpl10),</span><br><span class="line">        t = biFromNumber(<span class="built_in">Number</span>(i.substr(r, n))),</span><br><span class="line">        r += n; r &lt; i.length; )</span><br><span class="line">            t = biAdd(biMultiply(t, lr10), biFromNumber(<span class="built_in">Number</span>(i.substr(r, dpl10)))),</span><br><span class="line">            r += dpl10;</span><br><span class="line">        t.isNeg = e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biCopy</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">new</span> BigInt(!<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> t.digits = i.digits.slice(<span class="number">0</span>),</span><br><span class="line">    t.isNeg = i.isNeg,</span><br><span class="line">    t</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biFromNumber</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">new</span> BigInt;</span><br><span class="line">    t.isNeg = i &lt; <span class="number">0</span>,</span><br><span class="line">    i = <span class="built_in">Math</span>.abs(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; i &gt; <span class="number">0</span>; )</span><br><span class="line">        t.digits[e++] = i &amp; maxDigitVal,</span><br><span class="line">        i &gt;&gt;= biRadixBits;</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseStr</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="string">""</span>, e = i.length - <span class="number">1</span>; e &gt; <span class="number">-1</span>; --e)</span><br><span class="line">        t += i.charAt(e);</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biToString</span>(<span class="params">i, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="keyword">new</span> BigInt;</span><br><span class="line">    e.digits[<span class="number">0</span>] = t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> r = biDivideModulo(i, e), n = hexatrigesimalToChar[r[<span class="number">1</span>].digits[<span class="number">0</span>]]; <span class="number">1</span> == biCompare(r[<span class="number">0</span>], bigZero); )</span><br><span class="line">        r = biDivideModulo(r[<span class="number">0</span>], e),</span><br><span class="line">        digit = r[<span class="number">1</span>].digits[<span class="number">0</span>],</span><br><span class="line">        n += hexatrigesimalToChar[r[<span class="number">1</span>].digits[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">return</span> (i.isNeg ? <span class="string">"-"</span> : <span class="string">""</span>) + reverseStr(n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biToDecimal</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">new</span> BigInt;</span><br><span class="line">    t.digits[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = biDivideModulo(i, t), r = <span class="built_in">String</span>(e[<span class="number">1</span>].digits[<span class="number">0</span>]); <span class="number">1</span> == biCompare(e[<span class="number">0</span>], bigZero); )</span><br><span class="line">        e = biDivideModulo(e[<span class="number">0</span>], t),</span><br><span class="line">        r += <span class="built_in">String</span>(e[<span class="number">1</span>].digits[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> (i.isNeg ? <span class="string">"-"</span> : <span class="string">""</span>) + reverseStr(r)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">digitToHex</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">        e += hexToChar[<span class="number">15</span> &amp; t],</span><br><span class="line">        t &gt;&gt;&gt;= <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> reverseStr(e)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biToHex</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="string">""</span>, e = (biHighIndex(i),</span><br><span class="line">    biHighIndex(i)); e &gt; <span class="number">-1</span>; --e)</span><br><span class="line">        t += digitToHex(i.digits[e]);</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">charToHex</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i &gt;= <span class="number">48</span> &amp;&amp; i &lt;= <span class="number">57</span> ? i - <span class="number">48</span> : i &gt;= <span class="number">65</span> &amp;&amp; i &lt;= <span class="number">90</span> ? <span class="number">10</span> + i - <span class="number">65</span> : i &gt;= <span class="number">97</span> &amp;&amp; i &lt;= <span class="number">122</span> ? <span class="number">10</span> + i - <span class="number">97</span> : <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexToDigit</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>, e = <span class="built_in">Math</span>.min(i.length, <span class="number">4</span>), r = <span class="number">0</span>; r &lt; e; ++r)</span><br><span class="line">        t &lt;&lt;= <span class="number">4</span>,</span><br><span class="line">        t |= charToHex(i.charCodeAt(r));</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biFromHex</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="keyword">new</span> BigInt, e = i.length, r = <span class="number">0</span>; e &gt; <span class="number">0</span>; e -= <span class="number">4</span>,</span><br><span class="line">    ++r)</span><br><span class="line">        t.digits[r] = hexToDigit(i.substr(<span class="built_in">Math</span>.max(e - <span class="number">4</span>, <span class="number">0</span>), <span class="built_in">Math</span>.min(e, <span class="number">4</span>)));</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biFromString</span>(<span class="params">i, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="string">"-"</span> == i.charAt(<span class="number">0</span>)</span><br><span class="line">      , r = e ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">      , n = <span class="keyword">new</span> BigInt</span><br><span class="line">      , s = <span class="keyword">new</span> BigInt;</span><br><span class="line">    s.digits[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> o = i.length - <span class="number">1</span>; o &gt;= r; o--)</span><br><span class="line">        n = biAdd(n, biMultiplyDigit(s, charToHex(i.charCodeAt(o)))),</span><br><span class="line">        s = biMultiplyDigit(s, t);</span><br><span class="line">    <span class="keyword">return</span> n.isNeg = e,</span><br><span class="line">    n</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biToBytes</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="string">""</span>, e = biHighIndex(i); e &gt; <span class="number">-1</span>; --e)</span><br><span class="line">        t += digitToBytes(i.digits[e]);</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">digitToBytes</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="built_in">String</span>.fromCharCode(<span class="number">255</span> &amp; i);</span><br><span class="line">    <span class="keyword">return</span> i &gt;&gt;&gt;= <span class="number">8</span>,</span><br><span class="line">    <span class="built_in">String</span>.fromCharCode(<span class="number">255</span> &amp; i) + t</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biDump</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (i.isNeg ? <span class="string">"-"</span> : <span class="string">""</span>) + i.digits.join(<span class="string">" "</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biAdd</span>(<span class="params">i, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e;</span><br><span class="line">    <span class="keyword">if</span> (i.isNeg != t.isNeg)</span><br><span class="line">        t.isNeg = !t.isNeg,</span><br><span class="line">        e = biSubtract(i, t),</span><br><span class="line">        t.isNeg = !t.isNeg;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        e = <span class="keyword">new</span> BigInt;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> r, n = <span class="number">0</span>, s = <span class="number">0</span>; s &lt; i.digits.length; ++s)</span><br><span class="line">            r = i.digits[s] + t.digits[s] + n,</span><br><span class="line">            e.digits[s] = <span class="number">65535</span> &amp; r,</span><br><span class="line">            n = <span class="built_in">Number</span>(r &gt;= biRadix);</span><br><span class="line">        e.isNeg = i.isNeg</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biSubtract</span>(<span class="params">i, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e;</span><br><span class="line">    <span class="keyword">if</span> (i.isNeg != t.isNeg)</span><br><span class="line">        t.isNeg = !t.isNeg,</span><br><span class="line">        e = biAdd(i, t),</span><br><span class="line">        t.isNeg = !t.isNeg;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        e = <span class="keyword">new</span> BigInt;</span><br><span class="line">        <span class="keyword">var</span> r, n;</span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (s = <span class="number">0</span>; s &lt; i.digits.length; ++s)</span><br><span class="line">            r = i.digits[s] - t.digits[s] + n,</span><br><span class="line">            e.digits[s] = <span class="number">65535</span> &amp; r,</span><br><span class="line">            e.digits[s] &lt; <span class="number">0</span> &amp;&amp; (e.digits[s] += biRadix),</span><br><span class="line">            n = <span class="number">0</span> - <span class="built_in">Number</span>(r &lt; <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">-1</span> == n) &#123;</span><br><span class="line">            n = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> s = <span class="number">0</span>; s &lt; i.digits.length; ++s)</span><br><span class="line">                r = <span class="number">0</span> - e.digits[s] + n,</span><br><span class="line">                e.digits[s] = <span class="number">65535</span> &amp; r,</span><br><span class="line">                e.digits[s] &lt; <span class="number">0</span> &amp;&amp; (e.digits[s] += biRadix),</span><br><span class="line">                n = <span class="number">0</span> - <span class="built_in">Number</span>(r &lt; <span class="number">0</span>);</span><br><span class="line">            e.isNeg = !i.isNeg</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            e.isNeg = i.isNeg</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biHighIndex</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = i.digits.length - <span class="number">1</span>; t &gt; <span class="number">0</span> &amp;&amp; <span class="number">0</span> == i.digits[t]; )</span><br><span class="line">        --t;</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biNumBits</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t, e = biHighIndex(i), r = i.digits[e], n = (e + <span class="number">1</span>) * bitsPerDigit;</span><br><span class="line">    <span class="keyword">for</span> (t = n; t &gt; n - bitsPerDigit &amp;&amp; <span class="number">0</span> == (<span class="number">32768</span> &amp; r); --t)</span><br><span class="line">        r &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biMultiply</span>(<span class="params">i, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e, r, n, s = <span class="keyword">new</span> BigInt, o = biHighIndex(i), a = biHighIndex(t), g = <span class="number">0</span>; g &lt;= a; ++g) &#123;</span><br><span class="line">        <span class="keyword">for</span> (e = <span class="number">0</span>,</span><br><span class="line">        n = g,</span><br><span class="line">        j = <span class="number">0</span>; j &lt;= o; ++j,</span><br><span class="line">        ++n)</span><br><span class="line">            r = s.digits[n] + i.digits[j] * t.digits[g] + e,</span><br><span class="line">            s.digits[n] = r &amp; maxDigitVal,</span><br><span class="line">            e = r &gt;&gt;&gt; biRadixBits;</span><br><span class="line">        s.digits[g + o + <span class="number">1</span>] = e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.isNeg = i.isNeg != t.isNeg,</span><br><span class="line">    s</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biMultiplyDigit</span>(<span class="params">i, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e, r, n;</span><br><span class="line">    result = <span class="keyword">new</span> BigInt,</span><br><span class="line">    e = biHighIndex(i),</span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> s = <span class="number">0</span>; s &lt;= e; ++s)</span><br><span class="line">        n = result.digits[s] + i.digits[s] * t + r,</span><br><span class="line">        result.digits[s] = n &amp; maxDigitVal,</span><br><span class="line">        r = n &gt;&gt;&gt; biRadixBits;</span><br><span class="line">    <span class="keyword">return</span> result.digits[<span class="number">1</span> + e] = r,</span><br><span class="line">    result</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayCopy</span>(<span class="params">i, t, e, r, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> s = <span class="built_in">Math</span>.min(t + n, i.length), o = t, a = r; o &lt; s; ++o,</span><br><span class="line">    ++a)</span><br><span class="line">        e[a] = i[o]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biShiftLeft</span>(<span class="params">i, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="built_in">Math</span>.floor(t / bitsPerDigit)</span><br><span class="line">      , r = <span class="keyword">new</span> BigInt;</span><br><span class="line">    arrayCopy(i.digits, <span class="number">0</span>, r.digits, e, r.digits.length - e);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> n = t % bitsPerDigit, s = bitsPerDigit - n, o = r.digits.length - <span class="number">1</span>, a = o - <span class="number">1</span>; o &gt; <span class="number">0</span>; --o,</span><br><span class="line">    --a)</span><br><span class="line">        r.digits[o] = r.digits[o] &lt;&lt; n &amp; maxDigitVal | (r.digits[a] &amp; highBitMasks[n]) &gt;&gt;&gt; s;</span><br><span class="line">    <span class="keyword">return</span> r.digits[<span class="number">0</span>] = r.digits[o] &lt;&lt; n &amp; maxDigitVal,</span><br><span class="line">    r.isNeg = i.isNeg,</span><br><span class="line">    r</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biShiftRight</span>(<span class="params">i, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="built_in">Math</span>.floor(t / bitsPerDigit)</span><br><span class="line">      , r = <span class="keyword">new</span> BigInt;</span><br><span class="line">    arrayCopy(i.digits, e, r.digits, <span class="number">0</span>, i.digits.length - e);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> n = t % bitsPerDigit, s = bitsPerDigit - n, o = <span class="number">0</span>, a = o + <span class="number">1</span>; o &lt; r.digits.length - <span class="number">1</span>; ++o,</span><br><span class="line">    ++a)</span><br><span class="line">        r.digits[o] = r.digits[o] &gt;&gt;&gt; n | (r.digits[a] &amp; lowBitMasks[n]) &lt;&lt; s;</span><br><span class="line">    <span class="keyword">return</span> r.digits[r.digits.length - <span class="number">1</span>] &gt;&gt;&gt;= n,</span><br><span class="line">    r.isNeg = i.isNeg,</span><br><span class="line">    r</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biMultiplyByRadixPower</span>(<span class="params">i, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="keyword">new</span> BigInt;</span><br><span class="line">    <span class="keyword">return</span> arrayCopy(i.digits, <span class="number">0</span>, e.digits, t, e.digits.length - t),</span><br><span class="line">    e</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biDivideByRadixPower</span>(<span class="params">i, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="keyword">new</span> BigInt;</span><br><span class="line">    <span class="keyword">return</span> arrayCopy(i.digits, t, e.digits, <span class="number">0</span>, e.digits.length - t),</span><br><span class="line">    e</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biModuloByRadixPower</span>(<span class="params">i, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="keyword">new</span> BigInt;</span><br><span class="line">    <span class="keyword">return</span> arrayCopy(i.digits, <span class="number">0</span>, e.digits, <span class="number">0</span>, t),</span><br><span class="line">    e</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biCompare</span>(<span class="params">i, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i.isNeg != t.isNeg)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> - <span class="number">2</span> * <span class="built_in">Number</span>(i.isNeg);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = i.digits.length - <span class="number">1</span>; e &gt;= <span class="number">0</span>; --e)</span><br><span class="line">        <span class="keyword">if</span> (i.digits[e] != t.digits[e])</span><br><span class="line">            <span class="keyword">return</span> i.isNeg ? <span class="number">1</span> - <span class="number">2</span> * <span class="built_in">Number</span>(i.digits[e] &gt; t.digits[e]) : <span class="number">1</span> - <span class="number">2</span> * <span class="built_in">Number</span>(i.digits[e] &lt; t.digits[e]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biDivideModulo</span>(<span class="params">i, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e, r, n = biNumBits(i), s = biNumBits(t), o = t.isNeg;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; s)</span><br><span class="line">        <span class="keyword">return</span> i.isNeg ? (e = biCopy(bigOne),</span><br><span class="line">        e.isNeg = !t.isNeg,</span><br><span class="line">        i.isNeg = !<span class="number">1</span>,</span><br><span class="line">        t.isNeg = !<span class="number">1</span>,</span><br><span class="line">        r = biSubtract(t, i),</span><br><span class="line">        i.isNeg = !<span class="number">0</span>,</span><br><span class="line">        t.isNeg = o) : (e = <span class="keyword">new</span> BigInt,</span><br><span class="line">        r = biCopy(i)),</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Array</span>(e,r);</span><br><span class="line">    e = <span class="keyword">new</span> BigInt,</span><br><span class="line">    r = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="built_in">Math</span>.ceil(s / bitsPerDigit) - <span class="number">1</span>, g = <span class="number">0</span>; t.digits[a] &lt; biHalfRadix; )</span><br><span class="line">        t = biShiftLeft(t, <span class="number">1</span>),</span><br><span class="line">        ++g,</span><br><span class="line">        ++s,</span><br><span class="line">        a = <span class="built_in">Math</span>.ceil(s / bitsPerDigit) - <span class="number">1</span>;</span><br><span class="line">    r = biShiftLeft(r, g),</span><br><span class="line">    n += g;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> d = <span class="built_in">Math</span>.ceil(n / bitsPerDigit) - <span class="number">1</span>, u = biMultiplyByRadixPower(t, d - a); <span class="number">-1</span> != biCompare(r, u); )</span><br><span class="line">        ++e.digits[d - a],</span><br><span class="line">        r = biSubtract(r, u);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> l = d; l &gt; a; --l) &#123;</span><br><span class="line">        <span class="keyword">var</span> h = l &gt;= r.digits.length ? <span class="number">0</span> : r.digits[l]</span><br><span class="line">          , b = l - <span class="number">1</span> &gt;= r.digits.length ? <span class="number">0</span> : r.digits[l - <span class="number">1</span>]</span><br><span class="line">          , c = l - <span class="number">2</span> &gt;= r.digits.length ? <span class="number">0</span> : r.digits[l - <span class="number">2</span>]</span><br><span class="line">          , f = a &gt;= t.digits.length ? <span class="number">0</span> : t.digits[a]</span><br><span class="line">          , m = a - <span class="number">1</span> &gt;= t.digits.length ? <span class="number">0</span> : t.digits[a - <span class="number">1</span>];</span><br><span class="line">        e.digits[l - a - <span class="number">1</span>] = h == f ? maxDigitVal : <span class="built_in">Math</span>.floor((h * biRadix + b) / f);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> v = e.digits[l - a - <span class="number">1</span>] * (f * biRadix + m), p = h * biRadixSquared + (b * biRadix + c); v &gt; p; )</span><br><span class="line">            --e.digits[l - a - <span class="number">1</span>],</span><br><span class="line">            v = e.digits[l - a - <span class="number">1</span>] * (f * biRadix | m),</span><br><span class="line">            p = h * biRadix * biRadix + (b * biRadix + c);</span><br><span class="line">        (r = biSubtract(r, biMultiplyDigit(u = biMultiplyByRadixPower(t, l - a - <span class="number">1</span>), e.digits[l - a - <span class="number">1</span>]))).isNeg &amp;&amp; (r = biAdd(r, u),</span><br><span class="line">        --e.digits[l - a - <span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r = biShiftRight(r, g),</span><br><span class="line">    e.isNeg = i.isNeg != o,</span><br><span class="line">    i.isNeg &amp;&amp; (e = o ? biAdd(e, bigOne) : biSubtract(e, bigOne),</span><br><span class="line">    t = biShiftRight(t, g),</span><br><span class="line">    r = biSubtract(t, r)),</span><br><span class="line">    <span class="number">0</span> == r.digits[<span class="number">0</span>] &amp;&amp; <span class="number">0</span> == biHighIndex(r) &amp;&amp; (r.isNeg = !<span class="number">1</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Array</span>(e,r)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biDivide</span>(<span class="params">i, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> biDivideModulo(i, t)[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biModulo</span>(<span class="params">i, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> biDivideModulo(i, t)[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biMultiplyMod</span>(<span class="params">i, t, e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> biModulo(biMultiply(i, t), e)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biPow</span>(<span class="params">i, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = bigOne, r = i; <span class="number">0</span> != (<span class="number">1</span> &amp; t) &amp;&amp; (e = biMultiply(e, r)),</span><br><span class="line">    <span class="number">0</span> != (t &gt;&gt;= <span class="number">1</span>); )</span><br><span class="line">        r = biMultiply(r, r);</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biPowMod</span>(<span class="params">i, t, e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> r = bigOne, n = i, s = t; <span class="number">0</span> != (<span class="number">1</span> &amp; s.digits[<span class="number">0</span>]) &amp;&amp; (r = biMultiplyMod(r, n, e)),</span><br><span class="line">    <span class="number">0</span> != (s = biShiftRight(s, <span class="number">1</span>)).digits[<span class="number">0</span>] || <span class="number">0</span> != biHighIndex(s); )</span><br><span class="line">        n = biMultiplyMod(n, n, e);</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> RSAAPP = &#123;&#125;;</span><br><span class="line">RSAAPP.NoPadding = <span class="string">"NoPadding"</span>,</span><br><span class="line">RSAAPP.PKCS1Padding = <span class="string">"PKCS1Padding"</span>,</span><br><span class="line">RSAAPP.RawEncoding = <span class="string">"RawEncoding"</span>,</span><br><span class="line">RSAAPP.NumericEncoding = <span class="string">"NumericEncoding"</span>;</span><br><span class="line"><span class="keyword">var</span> biRadixBase = <span class="number">2</span>, biRadixBits = <span class="number">16</span>, bitsPerDigit = biRadixBits, biRadix = <span class="number">65536</span>, biHalfRadix = biRadix &gt;&gt;&gt; <span class="number">1</span>, biRadixSquared = biRadix * biRadix, maxDigitVal = biRadix - <span class="number">1</span>, maxInteger = <span class="number">9999999999999998</span>, maxDigits, ZERO_ARRAY, bigZero, bigOne;</span><br><span class="line">setMaxDigits(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">var</span> dpl10 = <span class="number">15</span></span><br><span class="line">  , lr10 = biFromNumber(<span class="number">1e15</span>)</span><br><span class="line">  , hexatrigesimalToChar = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"0"</span>,<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>,<span class="string">"g"</span>,<span class="string">"h"</span>,<span class="string">"i"</span>,<span class="string">"j"</span>,<span class="string">"k"</span>,<span class="string">"l"</span>,<span class="string">"m"</span>,<span class="string">"n"</span>,<span class="string">"o"</span>,<span class="string">"p"</span>,<span class="string">"q"</span>,<span class="string">"r"</span>,<span class="string">"s"</span>,<span class="string">"t"</span>,<span class="string">"u"</span>,<span class="string">"v"</span>,<span class="string">"w"</span>,<span class="string">"x"</span>,<span class="string">"y"</span>,<span class="string">"z"</span>)</span><br><span class="line">  , hexToChar = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"0"</span>,<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>)</span><br><span class="line">  , highBitMasks = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0</span>,<span class="number">32768</span>,<span class="number">49152</span>,<span class="number">57344</span>,<span class="number">61440</span>,<span class="number">63488</span>,<span class="number">64512</span>,<span class="number">65024</span>,<span class="number">65280</span>,<span class="number">65408</span>,<span class="number">65472</span>,<span class="number">65504</span>,<span class="number">65520</span>,<span class="number">65528</span>,<span class="number">65532</span>,<span class="number">65534</span>,<span class="number">65535</span>)</span><br><span class="line">  , lowBitMasks = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">31</span>, <span class="number">63</span>, <span class="number">127</span>, <span class="number">255</span>, <span class="number">511</span>, <span class="number">1023</span>, <span class="number">2047</span>, <span class="number">4095</span>, <span class="number">8191</span>, <span class="number">16383</span>, <span class="number">32767</span>, <span class="number">65535</span>);</span><br></pre></td></tr></table></figure>


<p>使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">pwd</span>)</span>&#123;</span><br><span class="line">    setMaxDigits(<span class="number">130</span>);</span><br><span class="line">    <span class="keyword">var</span> RSA_m = <span class="string">"00b5eeb166e069920e80bebd1fea4829d3d1f3216f2aabe79b6c47a3c18dcee5fd22c2e7ac519cab59198ece036dcf289ea8201e2a0b9ded307f8fb704136eaeb670286f5ad44e691005ba9ea5af04ada5367cd724b5a26fdb5120cc95b6431604bd219c6b7d83a6f8f24b43918ea988a76f93c333aa5a20991493d4eb1117e7b1"</span>;</span><br><span class="line">    <span class="keyword">var</span> RSA_e = <span class="string">"010001"</span>;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="keyword">new</span> HelloShit(RSA_e, <span class="string">""</span>, RSA_m);</span><br><span class="line">    <span class="keyword">return</span> hzasieckses(s, <span class="built_in">encodeURIComponent</span>(pwd))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(test(<span class="string">"123456"</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>登录密码加密</tag>
      </tags>
  </entry>
</search>
